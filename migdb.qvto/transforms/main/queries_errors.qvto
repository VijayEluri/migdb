/*
 * The MIT License
 * 
 * Copyright (c) 2010-2013 MigDB team [https://github.com/migdb/migdb/wiki]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
library queries_errors;
import builder_errors;


modeltype ERR uses 'http://www.collectionspro.eu/jam/mm/errors';

query ErrorLog::print(){
	 self.errors->forEach(err){
		 	log(err.repr());
		 };
}

helper addValidationError(inout errorLog : ErrorLog, message : String, transformationId : String){
	if(errorLog.errors <> null and errorLog.errors[ValidationError]->
			forAll(err | err.message <> message or err.transformationId <> transformationId))then{
		errorLog.errors += _validationError(message, transformationId);
	}endif;
}

helper addOrmError(inout errorLog : ErrorLog, message : String, transformationId : String){
	if(errorLog.errors <> null and errorLog.errors[OrmError]->
			forAll(err | err.message <> message or err.transformationId <> transformationId))then{
		errorLog.errors += _ormError(message, transformationId);
	}endif;
}

helper addEvolutionError(inout errorLog : ErrorLog, message : String, transformationId : String, 
		operationIndex : Integer){
	if(errorLog.errors <> null and errorLog.errors[EvolutionError]->
			forAll(err | err.message <> message or err.transformationId <> transformationId or
			err.operationIndex <> operationIndex))then{
		errorLog.errors += _evolutionError(operationIndex, message, transformationId);
	}endif;
}

query Error::equals(error : Error) : Boolean{
	return self.message = error.message and self.transformationId = error.transformationId;
}