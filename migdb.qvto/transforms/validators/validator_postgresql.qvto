/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

import queries_rdb_link;
modeltype RDB uses 'http://www.collectionspro.eu/jam/mm/rdb';
transformation POSTGRESQL_VALIDATE(in inModel : RDB);

main() {	
	log("Postgresql validation of model started...");
	if(inModel.rootObjects()->exists(root | root.oclIsTypeOf(RDB::ModelRoot)))then{
		inModel.rootObjects()![RDB::Structure].isModelValid();
		log("");
	}else{
		log("modelRoots doesn't conform to RDB::ModelRoot type");
	}endif;
}

query rdb::Structure::isModelValid():Boolean{
	var invalidityString : String := "";

	var tableUnique : Boolean := true;
	var schemaUnique : Boolean := true;
	var columnUnique : Boolean := true;
	var constraintUnique : Boolean := true;
	var pkCount : Boolean := true;
	
	var validIdentifiers : Boolean := true;
	
	var schemas : Set(Schema) := self.schemas;
	var tables : Bag(Table) := schemas->tables;
	//kontrola identifikatoru schematu
	schemas->forEach(schema){
		if(not schema.hasUniqueName())then{
			invalidityString := invalidityString + "Schema \"" + schema.name + "\" has duplicit name as another schema in generation \n";
			schemaUnique := false;
		}endif;	
		if(not isValidIdentifier(schema.name))then{
			invalidityString := invalidityString + "Invalid schema identifier \"" + schema.name + "\"\n";
			validIdentifiers:= false;
		}endif;
	};
	
	//kontrola identifikatoru tabulky
	tables->forEach(table){
		if(not table.hasUniqueName())then{
			invalidityString := invalidityString + "Schema \"" + table.owningSchema.name + "\" contains duplicit table name - \"" 
			+ table.name + "\"\n";
			tableUnique := false;
		}endif;
		if(not isValidIdentifier(table.name))then{
			invalidityString := invalidityString + "Invalid table identifier \"" + table.name + "\"\n";
			validIdentifiers:= false;			
		}endif;
	};
	//kontrola identifikatoru sloupce
	tables->columns->forEach(column){
		if(not column.hasUniqueName())then{
			invalidityString := invalidityString + ("Schema \"" + column.owningTable.owningSchema.name + "\" contains duplicit " 
			+ "column name \"" + column.name + "\"\n") ;
			columnUnique := false;
		}endif;
		if(not isValidIdentifier(column.name))then{
			invalidityString := invalidityString + "Invalid column identifier \"" + column.name + "\"\n";
			validIdentifiers:= false;
		}endif;
	};
	
	tables->constraints->forEach(constraint){
		if(not constraint.hasUniqueName())then{
			invalidityString := invalidityString + ("Schema \"" + constraint.owningTable.owningSchema.name + 
			"\" contains constraint with duplicit name \"" + constraint.name + "\"\n") ;
			constraintUnique := false;
		}endif;
		if(not isValidIdentifier(constraint.name))then{
			invalidityString := invalidityString + "Invalid table constraint identifier \"" + constraint.name + "\"\n";
			validIdentifiers := false;
		}endif;
	};
	
	tables->forEach(tbl){
		if(tbl.hasRedundantId())then{
			invalidityString := invalidityString + "Table \"" + tbl.name + "\" in schema \"" + tbl.owningSchema.name + 
			"\" has redundant PK count.\n";
			pkCount := false;
		}endif;
	};
	
	var valid : Boolean := tableUnique and columnUnique and schemaUnique and constraintUnique and pkCount and validIdentifiers;
	
	if(not valid)then{
		if(not schemaUnique)then{
			invalidityString := invalidityString + "Model - invalid : ambigous schema names\n";
		}endif;
		if(not tableUnique)then{
			invalidityString := invalidityString + "Model - invalid : ambigous table names\n";
		}endif;
		if(not columnUnique)then{
			invalidityString := invalidityString + "Model - invalid : ambigous column names\n";
		}endif;
		if(not constraintUnique)then{
			invalidityString := invalidityString + "Model - invalid : ambiguous constraint names\n"
		}endif;
		if(not pkCount) then {
			invalidityString := invalidityString + "Model invalid - table contains redundant ID's\n";
		}endif;
		if(not validIdentifiers) then {
			invalidityString := invalidityString + "Model invalid - contains invalid identifiers\n";
		}endif;
		log(invalidityString);
	} else {
		log("Model is valid");
	}endif;
	return valid;
}