/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
 
modeltype APP uses app('http://www.collectionspro.eu/jam/mm/app');
modeltype RDB uses rdb('http://www.collectionspro.eu/jam/mm/rdb');

transformation app_to_rdb(in inApp : APP, inout inRdb : RDB);

main() {
	assert(inApp.rootObjects()->size() = 1);
	assert(inApp.rootObjects()->forAll(oclIsKindOf(APP::ModelRoot)));
	
	log("transformation started...");
	
	var appRoot : APP::ModelRoot = inApp.rootObjects()![APP::ModelRoot];
	var appGen : APP::ModelGeneration = appRoot.modelGenerations->first();
	var rdbRoot : RDB::ModelRoot = inRdb.rootObjects()![RDB::ModelRoot];
	
	appRoot.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(appGen, rdbRoot)) then {
			log("	operation is valid " + op.repr());
			op.xmap toRdb(appGen, rdbRoot);
		} else {
			log("	operation is invalid " + op.repr());
		} endif;
	};
}

// a mapping of a given operation
abstract mapping APP::ops::ModelOperation::
	toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot);
	
// is a mapping valid
abstract query APP::ops::ModelOperation::
	isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) : Boolean;


/* ++++++++++ OPERATIONS ++++++++++++++++++++ */

query APP::ops::AddPrimitiveClass::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::AddPrimitiveClass::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	// this operation is not mapped to RDB
}

query APP::ops::AddEmbeddedClass::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::AddEmbeddedClass::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	// this operation is not mapped to RDB
}

query APP::ops::AddClass::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::AddClass::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	// addition of a table to the schema
	rdbRoot.operations += object RDB::ops::AddTable {
		owningSchemaName := "public";
		name := self.name.toLower();
	};
	
	// addition of a column to the table
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.name.toLower();
		name := "id_" + self.name.toLower();
		type := RDB::PrimitiveType::int;
		// defaultValue := "0";
	};
	
	// addition of an index to the schema
	rdbRoot.operations += object RDB::ops::AddIndex {
		owningSchemaName := "public";
		owningTableName := self.name.toLower();
		name := "IX_" + self.name.toLower() + "_id_" + self.name.toLower();
		columnsNames := OrderedSet {"id_" + self.name.toLower()};
	};
	
	// addition of a primary key to the table
	rdbRoot.operations += object RDB::ops::AddPrimaryKey {
		owningSchemaName := "public";
		owningTableName := self.name.toLower();
		owningColumnName := "id_" + self.name.toLower();
		name := "PK_" + self.name.toLower();
		//underlyingIndexName := "IX_" + self.name.toLower() + "_id_" + self.name.toLower();
	};
}

query APP::ops::AddProperty::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::AddProperty::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	self.xmap primitivePropertyToRdb(appGen, rdbRoot);
	self.xmap embeddedPropertyToRdb(appGen, rdbRoot);
	self.xmap complexPropertyToRdb(appGen, rdbRoot);	
	self.xmap notNullToRdb(appGen, rdbRoot);	
	self.xmap collectionToRdb(appGen, rdbRoot);
}

mapping APP::ops::AddProperty::primitivePropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.isPrimitiveClassInGeneration(self.type); }
{
	// adds a column of a primitve type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, appGen.findPrimitiveTypeInRdb(self.type));
}

mapping APP::ops::AddProperty::embeddedPropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.isEmbeddedClassInGeneration(self.type); }
{
	// for each property from an embedded class
	appGen.findEmbeddedClass(self.type).properties->forEach(p) {
		// adds a column of a primitve type to a table
		rdbRoot.operations += appGen.AddColumnOfPrimitiveType(p, appGen.findPrimitiveTypeInRdb(p.type.name));
	};
}

mapping APP::ops::AddProperty::complexPropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.isClassInGeneration(self.type) and self.upperBound <> -1; }
{
	// adds a column of an integer type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, RDB::PrimitiveType::int);
	// adds a foreign key to a table
	rdbRoot.operations += appGen.AddForeignKeyToColumn(self);
}

mapping APP::ops::AddProperty::notNullToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { self.lowerBound = 1 }
{
	// adds a not null constraint to a column
	rdbRoot.operations += appGen.AddNotNullConstraintToColumn(self);
}

mapping APP::Property::primitivePropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.isPrimitiveClassInGeneration(self.type.name); }
{
	// adds a column of a primitve type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, appGen.findPrimitiveTypeInRdb(self.type.name));
}

mapping APP::Property::complexPropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.isClassInGeneration(self.type.name) and self.upperBound <> -1; }
{
	// adds a column of an integer type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, RDB::PrimitiveType::int);
	// adds a foreign key to a table
	rdbRoot.operations += appGen.AddForeignKeyToColumn(self);
}

mapping APP::Property::notNullToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { self.lowerBound = 1 }
{
	// adds a not null constraint to a column
	rdbRoot.operations += appGen.AddNotNullConstraintToColumn(self);
}

/* ++++++++++ HELPERS_FOR_A_CREATION_OF_OPERATIONS ++++++++++++++++++++ */

// the universal helper for an addition of a column of a primitive type t <- {boolean, int, char, float}
helper APP::ModelGeneration::AddColumnOfPrimitiveType(op : APP::ops::AddProperty, t : RDB::PrimitiveType) : RDB::ops::AddColumn {		
	return object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := op.owningClassName.toLower();
		name := op.name.toLower();
		type := t; // ???
		defaultValue := op.defaultValue;
	}
}

// usually used in a mapping of a proeprty of an embedded type  
helper APP::ModelGeneration::AddColumnOfPrimitiveType(p : APP::Property, t : RDB::PrimitiveType) : RDB::ops::AddColumn {		
	return object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := p.owningGeneralClass.name.toLower();
		name := p.name.toLower();
		type := t; // ???
		defaultValue := p.defaultValue;
	}
}

// the helper for an addition of a foreign key to a table
helper APP::ModelGeneration::AddForeignKeyToColumn(op : APP::ops::AddProperty) : RDB::ops::AddForeignKey {
	return object RDB::ops::AddForeignKey {
		owningSchemaName := "public";
		owningTableName := op.owningClassName.toLower();
		owningColumnName := op.name.toLower(); // todo: fix a order
		name := "FK_" + op.name.toLower() + "_id_" + op.type.toLower();
		targetTableName := op.type.toLower();		
	}
}

helper APP::ModelGeneration::AddForeignKeyToColumn(p : APP::Property) : RDB::ops::AddForeignKey {
	return object RDB::ops::AddForeignKey {
		owningSchemaName := "public";
		owningTableName := p.owningGeneralClass.name.toLower();
		owningColumnName := p.name.toLower(); // todo: fix a order
		name := "FK_" + p.name.toLower() + "_id_" + p.type.name.toLower();
		targetTableName := p.type.name.toLower();
	}
}

// the helper for an addition of a not null constraint to a column
helper APP::ModelGeneration::AddNotNullConstraintToColumn(op : APP::ops::AddProperty) : RDB::ops::AddNotNull {
	return object RDB::ops::AddNotNull {
		owningSchemaName := "public";
		owningTableName := op.owningClassName.toLower();
		owningColumnName := op.name.toLower();
		name := "NN_" + op.name.toLower();
	}
}

helper APP::ModelGeneration::AddNotNullConstraintToColumn(p : APP::Property) : RDB::ops::AddNotNull {
	return object RDB::ops::AddNotNull {
		owningSchemaName := "public";
		owningTableName := p.owningGeneralClass.name.toLower();
		owningColumnName := p.name.toLower();
		name := "NN_" + p.name.toLower();
	}
}

/* ++++++++++ THE_END_OF_THIS_BLOCK ++++++++++++++++++++ */

mapping APP::ops::AddProperty::collectionToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { self.upperBound = -1 }
{
	self.xmap generalCollectionToRdb(appGen, rdbRoot);
	self.xmap orderedCollectionToRdb(appGen, rdbRoot);
}

// 0..1 * {unique?}
mapping APP::ops::AddProperty::generalCollectionToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { true; }
{
	// addition of a column to the table
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.type.toLower();
		name := self.owningClassName.toLower() + "_id";
		type := RDB::PrimitiveType::int;
	};
	
	// addition of a foreign key to the table
	rdbRoot.operations += object RDB::ops::AddForeignKey {
		owningSchemaName := "public";
		owningTableName := self.type.toLower();
		name := "FK_" + self.owningClassName.toLower() + "_id_" + self.owningClassName.toLower();
		targetTableName := self.owningClassName.toLower();
		owningColumnName := self.owningClassName.toLower();
	};
}

// 0..1 * {ordered, unique?}
mapping APP::ops::AddProperty::orderedCollectionToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { self.isOrdered }
{
	// addition of a column to the table
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.type.toLower();
		name := "ord_" + self.owningClassName.toLower();
		type := RDB::PrimitiveType::int;
	};
	
	// addition of an index to the schema
	rdbRoot.operations += object RDB::ops::AddIndex {
		owningSchemaName := "public";
		owningTableName := self.type.toLower();
		name := "UX_" + self.type.toLower() + "_ord_" + self.owningClassName.toLower();
		columnsNames := OrderedSet {"ord_" + self.owningClassName.toLower()};
	};
	
	// addition of an unique constraint to the table
	rdbRoot.operations += object RDB::ops::AddUnique {
		owningSchemaName := "public";
		owningTableName := self.type.toLower();
		name := "UK_" + self.type.toLower() + "_ord_" + self.owningClassName.toLower();
		//underlyingIndexName := "UX_" + self.type.toLower() + "_ord_" + self.owningClassName.toLower();
	};
}

// unique collection

query APP::ops::RenameProperty::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::RenameProperty::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	rdbRoot.operations += object RDB::ops::RenameColumn {
		owningSchemaName := "public";
		owningTableName := self.owningClassName.toLower();
		name := self.name.toLower();
		newName := self.newName.toLower();
	};
}

query APP::ops::RemoveProperty::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::RemoveProperty::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	rdbRoot.operations += object RDB::ops::RemoveColumn {
		owningSchemaName := "public";
		owningTableName := self.owningClassName.toLower();
		name := self.name.toLower();
	};
}

query APP::ops::SetAbstract::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::SetAbstract::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	
	rdbRoot.operations += object RDB::ops::HasNoOwnInstances {
		owningSchemaName := "public";
		tableName := self.name.toLower();
		descendantsNames := appGen.findDescendants(self.name);
	};
}

query APP::ops::SetParent::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::SetParent::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	self.xmap joined(appGen, rdbRoot);
}

// inheritanceType = joined
mapping APP::ops::SetParent::joined(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {

	if (not self.properties->isEmpty()) then {
		rdbRoot.operations += object RDB::ops::InsertInstances {
			owningSchemaName := "public";
			sourceTableName := self.name.toLower();
			targetTableName := self.parentName.toLower();
			sourceColumnsNames := "id_" + self.name.toLower();
			sourceColumnsNames += self.properties->toLower();
			targetColumnsNames := "id_" + self.parentName.toLower();
			targetColumnsNames += self.properties->toLower();			
		};
		
		self.properties->forEach(pName) {
			rdbRoot.operations += object RDB::ops::RemoveColumn {
				owningSchemaName := "public";
				owningTableName := self.name.toLower();
				name := pName.toLower();
			};
		};
	} endif;

	var targets : OrderedSet(String);
		targets += self.parentName.toLower();
		targets += appGen.findAncestors(self.parentName);
			
/*		if (appGen.hasAnyColumns(targets)) then {
			rdbRoot.operations += object RDB::ops::HasNoInstances {
				owningSchemaName := "public";
				tableName := self.name.toLower();			
			};
		} else {
			rdbRoot.operations += object RDB::ops::AddInstances {
				owningSchemaName := "public";
				sourceTableName := self.name.toLower();
				targetTableNames := targets;
			};
		} endif; */
		
		rdbRoot.operations += object RDB::ops::RenameColumn {
			owningSchemaName := "public";
			owningTableName := self.name.toLower();
			name := "id_" + self.name.toLower();
			newName := "id_" + targets->last();
		};
}

mapping APP::ops::MoveProperty::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {

	rdbRoot.operations += object RDB::ops::RenameColumn {
		owningSchemaName := "public";
		owningTableName := self.owningClassName.toLower();
		name := self.name;
		newName := self.name + "_old";
	};
	
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.targetClassName.toLower();
		name := self.name;
		type := RDB::PrimitiveType::boolean;
	};
	
	rdbRoot.operations += object RDB::ops::CopyInstances {
		owningSchemaName := "public";
		owningTableName := self.owningClassName.toLower();
		sourceColumnName := self.name + '_old';
		targetTableName := self.targetClassName.toLower();
		targetColumnName := self.name;
		type := appGen.mergeTypeInAppToMergeTypeInRdb(self.type);
	};
	
	rdbRoot.operations += object RDB::ops::RemoveColumn {
		owningSchemaName := "public";
		owningTableName := self.owningClassName.toLower();
		name := self.name + "_old";		
	};
}

query APP::ops::ExtractClass::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::ops::ExtractClass::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	
	rdbRoot.operations += object RDB::ops::AddTable {
		owningSchemaName := "public";
		name := self.extractClassName.toLower();
	};
	
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.extractClassName.toLower();
		name := "id_" + self.extractClassName.toLower();
		type := RDB::PrimitiveType::int;
	};
	
	rdbRoot.operations += object RDB::ops::AddIndex {
		owningSchemaName := "public";
		owningTableName := self.extractClassName.toLower();
		name := "IX_" + self.extractClassName.toLower() + "_id_" + self.extractClassName.toLower();
		columnsNames := OrderedSet {"id_" + self.extractClassName.toLower()};
	};
	
	rdbRoot.operations += object RDB::ops::AddPrimaryKey {
		owningSchemaName := "public";
		owningTableName := self.extractClassName.toLower();
		owningColumnName := "id_" + self.extractClassName.toLower();
		name := "PK_" + self.extractClassName.toLower();
		//underlyingIndexName := "IX_" + self.extractClassName.toLower() + "_id_" + self.extractClassName.toLower();
	};
	
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.sourceClassName.toLower();
		name := self.extractClassName.toLower();
		type := RDB::PrimitiveType::int;
	};
	
	rdbRoot.operations += object RDB::ops::GenerateSequenceNumbers {
		owningSchemaName := "public";
		tableName := self.sourceClassName.toLower();
		columnName := self.extractClassName.toLower();
		sequenceName := "seq_global";
	};
	
	self.extractPropertiesNames->forEach(pName) {
		var p : APP::Property := appGen.findProperty(self.extractClassName, pName);
		
		p.xmap primitivePropertyToRdb(appGen, rdbRoot);
		p.xmap complexPropertyToRdb(appGen, rdbRoot);
		p.xmap notNullToRdb(appGen, rdbRoot); 		
		
	};
	
	rdbRoot.operations += object RDB::ops::InsertInstances {
		owningSchemaName := "public";
		sourceTableName := self.sourceClassName.toLower();
		targetTableName := self.extractClassName.toLower();
		sourceColumnsNames := self.extractClassName.toLower();
		sourceColumnsNames += self.extractPropertiesNames.toLower();
		targetColumnsNames := "id_" + self.extractClassName.toLower();
		targetColumnsNames += self.extractPropertiesNames.toLower();
	};
	
	self.extractPropertiesNames->forEach(pName) {		
		rdbRoot.operations += object RDB::ops::RemoveColumn {
			owningSchemaName := "public";
			owningTableName := self.sourceClassName.toLower();
			name := pName.toLower();
		};
	};
	
	rdbRoot.operations += object RDB::ops::AddForeignKey {
		owningSchemaName := "public";
		owningTableName := self.sourceClassName.toLower();
		name := "FK_" + self.extractClassName.toLower() + "_id_" + self.extractClassName.toLower();
		targetTableName := self.extractClassName.toLower();
		owningColumnName := self.extractClassName.toLower();
	};	
}

query RDB::ModelGeneration::findSchema(sName : String) : RDB::Schema {
	return self.schemas->selectOne(name = sName);
}

query RDB::ModelGeneration::findTable(sName : String, tName : String) : RDB::Table {
	return self.findSchema(sName).tables->selectOne(name = tName);
}

query RDB::ModelGeneration::findColumn(sName : String, tName : String, cName : String) : RDB::Column {
	return self.findTable(sName, tName).columns->selectOne(name = cName);
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

query APP::ModelGeneration::findEntity(eName : String) : APP::ModelEntity {
	return self.entities![name = eName];
}

query APP::ModelGeneration::isPrimitiveClassInGeneration(cName : String) : Boolean {
	return self.findEntity(cName).oclIsTypeOf(APP::PrimitiveClass);
}

query APP::ModelGeneration::findPrimitiveClass(cName : String) : APP::PrimitiveClass {
	return self.findEntity(cName).oclAsType(APP::PrimitiveClass);
}

query APP::ModelGeneration::findAbstractClass(cName : String) : APP::GeneralClass {
	return self.findEntity(cName).oclAsType(APP::GeneralClass);
}

query APP::ModelGeneration::isEmbeddedClassInGeneration(cName : String) : Boolean {
	return self.findEntity(cName).oclIsTypeOf(APP::EmbeddedClass);
}

query APP::ModelGeneration::findEmbeddedClass(cName : String) : APP::EmbeddedClass {
	return self.findEntity(cName).oclAsType(APP::EmbeddedClass);
}

query APP::ModelGeneration::isClassInGeneration(cName : String) : Boolean {
	return self.findEntity(cName).oclIsTypeOf(APP::StandardClass);
}

query APP::ModelGeneration::findClass(cName : String) : APP::StandardClass {
	return self.findEntity(cName).oclAsType(APP::StandardClass);
}

query APP::ModelGeneration::findProperty(cName : String, pName : String) : APP::Property {
	return self.findAbstractClass(cName).properties![name = pName];
}

query APP::ModelGeneration::findPrimitiveTypeInApp(pName : String) : APP::PrimitiveType {
	return self.findPrimitiveClass(pName).primitiveType;
}

query APP::ModelGeneration::findPrimitiveTypeInRdb(pName : String) : RDB::PrimitiveType {
	switch {
		case (self.findPrimitiveTypeInApp(pName) = APP::PrimitiveType::boolean) return RDB::PrimitiveType::boolean;
		case (self.findPrimitiveTypeInApp(pName) = APP::PrimitiveType::char) return RDB::PrimitiveType::char;
		case (self.findPrimitiveTypeInApp(pName) = APP::PrimitiveType::int) return RDB::PrimitiveType::int;
	};
	return null;
}

query APP::ModelGeneration::findMergeTypeInApp(pName : String) : APP::PrimitiveType {
	return self.findEntity(pName).oclAsType(APP::PrimitiveClass).primitiveType;
}

query APP::ModelGeneration::mergeTypeInAppToMergeTypeInRdb(type : APP::ops::MergeType) : RDB::ops::MergeType {
	switch {
		case (type = APP::ops::MergeType::strict) return RDB::ops::MergeType::strict;
		case (type = APP::ops::MergeType::force) return RDB::ops::MergeType::force;
		case (type = APP::ops::MergeType::tolerant) return RDB::ops::MergeType::tolerant;
	};
	return null;
}

query APP::StandardClass::isDescendantOf(cName : String) : Boolean {
	if (self.parent <> null) then {
		if (self.parent.name = cName) then return true
		else return self.parent.isDescendantOf(cName) endif;
	} endif;
	return false;
}

query APP::ModelGeneration::findDescendants(cName : String) : Set(String) {
	var d : Set(String);
	self.entities->oclAsType(APP::StandardClass)->forEach(c) {
		if (c.isDescendantOf(cName)) then {
			d += c.name.toLower();
		} endif;
	};
	return d;
}

query APP::ModelGeneration::findAncestors(cName : String) : Set(String) {
	var a : Set(String);
	var c : APP::StandardClass := self.findClass(cName);
	if (c <> null and c.parent <> null) then {
		a += c.parent.name.toLower();
		a += self.findAncestors(c.parent.name);
	} endif;
	return a;
}

query APP::ModelGeneration::hasAnyColumns(entities : Set(String)) : Boolean {
	var b : Boolean := false;
	entities->forEach(cName) {
		b := b or self.findClass(cName).properties->size() <> 1;
	};
	return b;
};