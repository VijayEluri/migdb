<!DOCTYPE html>
<html>

  <head>
    <meta charset='utf-8' />
    <meta http-equiv="X-UA-Compatible" content="chrome=1" />
    <meta name="description" content="Migdb : database migration" />

    <link rel="stylesheet" type="text/css" media="screen" href="stylesheets/stylesheet.css">

    <title>MigDB</title>
  </head>

  <body>

    <!-- HEADER -->
    <div id="header_wrap" class="outer">
        <header class="inner">
	  <a id="forkme_banner_blog" href="http://mdsd.cs.felk.cvut.cz/">Check our blog!</a>
          <a id="forkme_banner" href="https://github.com/migdb/migdb">View on GitHub</a>

          <h1 id="project_title">MigDB</h1>
          <h2 id="project_tagline">Database Migration</h2>

            <section id="downloads">
              <a class="zip_download_link" href="https://github.com/migdb/migdb/zipball/master">Download this project as a .zip file</a>
              <a class="tar_download_link" href="https://github.com/migdb/migdb/tarball/master">Download this project as a tar.gz file</a>
            </section>
        </header>
    </div>

    <!-- MAIN CONTENT -->
    <div id="main_content_wrap" class="outer">
      <section id="main_content" class="inner">
        <h3>Welcome</h3>

<p>Object-relational mapping is a common programming technique used to accelerate development 
of software applications. With regards to their evolution, it can become ineffective and the whole 
process need be executed manually.</p>

<p>Our project focuses on solving this problem, which consists in an automated evolution of database
 schemes and a related data migration in virtue of changes of an object layer.</p>

<p>The focus on data consistency during database changes is what makes our project 
unique among others. From the whole project we primarily promise a more effective database 
migration than any which is provided by our competitors and an increased efficiency of programmers, 
who will no longer have to deal with the database regeneration.</p>

<h3>Example</h3>
<h4>Minimum requirements</h4>
<ul>
	<li>UNIX-based operating system (for example <a href="http://www.ubuntu.com/" class="user-mention">Ubuntu</a>)</li>
	<li><a href="http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/indigosr2" class="user-mention">Eclipse Modeling Tools Indigo</a> (and later)</li>
	<li><a href="http://www.postgresql.org/download/" class="user-mention">PostgreSQL 9.1.3</a> (and later)</li>
	<li><a href="http://www.ruby-lang.org/en/downloads/" class="user-mention">Ruby 1.9.3</a> (and later)</li>
</ul>

<h4>Before we  strart</h4>
<ul>
	<li>Download our project and <a href="https://github.com/migdb/mwe-components" class="user-mention">kit</a> providing a working workflow for the application</li>
	<li>Copy both files from <code>migdb/plugins</code> to <code>eclipse/dropins</code></li>
	<li>Import all projects to Eclipse IDE</li>
	<li>For every file from <code>migdb.run/src</code> change <code>CommandLineExec</code> in the following way:</li>	
</ul>
<pre><code>"ruby ../migdb.ruby.sql/script.rb output_sql_[mwe2] [database] [name] [pass]"</code></pre>

<h4>Let's get it started</h4>
<ul>
	<li>Launch <code>migdb.run/builds/build.mwe2</code></li>
	<li>Generate testing data by force of SQL script <code>cg.sql/insert.sql</code></li>
	<li>Launch <code>migdb.run/builds/first.mwe2</code> and <code>migdb.run/builds/second.mwe2<code></li>	
</ul>

<h3>Outputs</h3>
<h4>Building model</h4>
<p>When <code>build.mwe2</code> is finished, an initial structure of object and database layer is created. Relevant XMI 
models are in <code>migdb.run/output_xmi_build</code>.</p> 

<p>We got two classes (<code>LegalPerson</code> and <code>NaturalPerson</code>) with an evident redundant code.</p>

<img src="images/build.jpg" alt="build model" style="width:315px; heigth:237px; left:150px" />

<h4>First transformation</h4>
<p>When <code>first.mwe2</code> is finished, there is a common parent <code>Party</code> who solved the problem with redundancy in 
<code>NaturalPerson</code> and <code>LegalPerson</code>. Relevant XMI models of both layers in  <code>migdb.run/output_xmi_first</code> and propriate 
database queries in <code>migdb.run/output_sql_first</code> were also created.</p>

<img src="images/first.jpg" alt="build model" style="width:355px; heigth:238px; left:130px" />

<h4>Second transformation</h4>
<p>After <code>second.mwe2</code> is ended, we found a new class <code>Address</code> was created. This state provides a possibiltiy 
to add more than one contact address in <code>Party</code> to us. XMI models are placed in <code>migdb.run/output_xmi_second</code> and relevant 
database queries in <code>migdb.run/output_sql_second</code>.</p>.

<img src="images/second.jpg" alt="build model" style="width:434px; heigth:277px; left:90px" />

      </section>
    </div>

    <!-- FOOTER  -->
    <div id="footer_wrap" class="outer">
      <footer class="inner">
        <p class="copyright">Migdb maintained by <a href="https://github.com/migdb">migdb</a></p>
        <p>Published with <a href="http://pages.github.com">GitHub Pages</a></p>
      </footer>
    </div>

    

  </body>
</html>
