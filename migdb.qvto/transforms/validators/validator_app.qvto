/*
 * The MIT License
 * 
 * Copyright (c) 2010-2012 MigDB team [https://github.com/migdb/migdb/wiki]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

import queries_app_link;
	
modeltype APP uses 'http://www.collectionspro.eu/jam/mm/app';
transformation APP_VALIDATE(in inModel : APP);

main() {	
	log("Validation aplication model started...");
	if(inModel.rootObjects()->exists(root | root.oclIsTypeOf(APP::Structure)))then{
		inModel.rootObjects()![Structure].isModelValid();
		log("");
	}else{
		log("Root element doesn't conform to APP::Structure type");
	}endif;
}
///////////////---------------------------------Validacni query --------------------------------///////////

query app::Structure::isModelValid():Boolean{
	var classUniqueName : Boolean := true; 
	var propUniqueName : Boolean := true;
	var notCycledHierarchies : Boolean := true;
	var oppositeProperty : Boolean := true;
	var embeddedBounds : Boolean := true;
	var notHasNonRootId : Boolean := true;
	var idBounds : Boolean := true;
	var idTypes : Boolean := true;
	var notTpcExpansion : Boolean := true;
	var rootsId : Boolean := true;
	var notOppositePrimitive : Boolean := true;
	
	var entities : Set(ModelEntity) := self.oclAsType(Structure).entities;
	var stdClasses : Set(StandardClass) := entities[StandardClass];
	var stdClassProps : Bag(Property) := stdClasses->properties;
	//classes leading to cycle
	var cycles : Set(StandardClass) := Set{};
	entities->forEach(ent | not ent.hasUniqueName()) {
		log("Structure contains ambigous Class name \"" + ent.name + "\"");		
		classUniqueName := false;
	};
	stdClassProps->forEach(prop | not prop.hasUniqueNameInHierarchy()) {
		log("Structure contains ambigous property name \"" + prop.name +
		 "\" in class \"" + prop.owningGeneralClass.name + "\"");
		propUniqueName := false;		
	};
	stdClasses->forEach(cls | cls.containsCycle(OrderedSet{}) and not cycles->includes(cls)) {
		var  iterateClass : StandardClass := cls;  
		var output : String := "Structure contains cycled hierarchy:\"" + cls.name +"\"";
		while(not cycles->includes(iterateClass)){
			cycles += iterateClass;
			iterateClass := iterateClass.parent;
			output := output + ", \"" + iterateClass.name+"\"";					
		};
		log(output + "...");
		notCycledHierarchies := false;
	};
	stdClassProps->forEach(prop | not prop.isOppositeCorrectlySet()){
		log("Structure contains property \""+ prop.name + "\" property in class \""
		 + prop.owningGeneralClass.name + "\" opposite not correctly set");
		 oppositeProperty := false;
	};
	stdClassProps->forEach(prop | prop.oppositeProperty <> null
	 and not prop.oppositeProperty.type.oclIsTypeOf(StandardClass)){
		log("Structure contains property \"" + prop.name + "\" property in class \"" 
		+ prop.owningGeneralClass.name + "\" with embedded or primitive opposite");
		 notOppositePrimitive := false;
	};
	entities[EmbeddedClass]->properties->forEach(prop | not prop.areEmbeddedArritiesCorrectlySet()){
		log("Structure contains embedded property \"" + prop.name +"\" in class \""
		 + prop.owningGeneralClass.name + "\" with bounds not correctly set");
		embeddedBounds := false;
	};
    stdClasses->forEach(cls | cls.parent <> null and cls.hasId()){
    	log("Structure contains Non-root class \"" + cls.name + "\" containing id property " + cls.idProperty.name + " .");
    	notHasNonRootId := false;
    };
	stdClasses->forEach(cls | not cls.areIDBoundsCorrectlySet()){
		log("Structure contains class \"" + cls.name + "\" with id bounds not correctly set");
		idBounds := false;
	};
	stdClasses->forEach(cls | not cls.areIDTypesCorrectlySet()){
	    log("Structure contains class \"" +
	     cls.name + "\" with id not according primitive Integer");
	     idTypes := false;
	};
	
	stdClasses->forEach(cls | cls.parent = null and not cls.hasId()){
		rootsId := false;
		log("Structure contains root class " + cls.name + " with no id Property");	
	};
	
	stdClassProps->forEach(prop | (prop.owningGeneralClass.isNonleafTPCClass() and
	  (prop.upperBound > 1 or prop.upperBound = -1))){
		log("Structure contains TPC hierarchy causing table expansion class \""
		 + prop.owningGeneralClass.name + "\" property\"" + prop.name + "\"");
		notTpcExpansion := false;
	};
	if(not classUniqueName)then{
		log("Model invalid - ambigous class names in generation");
	}endif;
	if(not propUniqueName)then{
		log("Model invalid - ambigous property names in class hierarchy");
		}endif;
	if(not notCycledHierarchies)then{
		log("Model invalid - cycled class hierarchy");
		}endif;
	if(not oppositeProperty)then{
		log("Model invalid - properties and oppositeProperties are not correctly set");
	}endif;
	if(not embeddedBounds)then{
		log("Model invalid - Embedded property bounds are not correctly set");
	}endif;	
	if(not notHasNonRootId)then{
		log("Model invalid - nonRoot classes with ID");
	}endif;
	if(not idBounds)then{
		log("Model invalid - id property with wrong arrities");
	}endif;
	if(not idTypes)then{
		log("Model invalid - wrong id types");
	}endif;
	if(not notTpcExpansion)then{
		log("Model invalid - TPC expansion");
	}endif;
	if(not rootsId)then{
		log("Model invalid - invalid roots count");
	}endif;
	if(not 	notOppositePrimitive)then{
		log("Model invalid - contains primitive or embedded primitive class");
	}endif;
	var valid : Boolean := classUniqueName and propUniqueName and notCycledHierarchies and oppositeProperty and embeddedBounds
	and notHasNonRootId and idBounds and idTypes and notTpcExpansion and rootsId;
	if(valid) then{
		log("Model is valid");
	}endif;
	return  valid;
}