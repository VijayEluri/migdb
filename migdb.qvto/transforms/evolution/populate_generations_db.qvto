/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

modeltype RDB uses 'http://www.collectionspro.eu/jam/mm/rdb';

transformation DB_To_Rdb(in inModel : RDB, out outModel : RDB);
main() {
	assert(inModel.rootObjects()->size() = 1);
	assert(inModel.rootObjects()->forAll(oclIsKindOf(RDB::ModelRoot)));
	
	log("transformation started...");
	
	inModel.rootObjects().deepclone();

	var root : RDB::ModelRoot = outModel.rootObjects()![RDB::ModelRoot];
	var gen0 : RDB::ModelGeneration = root.modelGenerations->first();
	
	root.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(gen0)) then {
			log("	operation is valid " + op.repr());
			op.xmap apply(gen0);
		} else {
			log("	operation is invalid " + op.repr());
		} endif;
	};
	
	root.operations = root.operations->reject(true);
}

// kontroluje validitu operace
abstract query RDB::operations::ModelOperation::
	isValid(gen : RDB::ModelGeneration) : Boolean;

// namapuje danou operaci
abstract mapping RDB::operations::ModelOperation::
	apply(inout gen : RDB::ModelGeneration);


/* ++++++++++ ADD OPERATIONS ++++++++++++++++++++ */

query RDB::operations::AddSchema::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dan� generaci neexistuje sch�ma stejn�ho n�zvu
	return not gen.isSchemaInGeneration(self.name);
}

// p�id� sch�ma do generace
mapping RDB::operations::AddSchema::apply(inout gen : RDB::ModelGeneration) {
	gen.schemas += object RDB::Schema {
		name := self.name;
	}
}

query RDB::operations::AddSequence::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dan�m sch�matu neexistuje sekvence stejn�ho n�zvu
	return not gen.isSequenceInSchema(self.owningSchemaName, self.name);
}

// p�id� sekvenci do sch�matu
mapping RDB::operations::AddSequence::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.sequences += object RDB::Sequence {
		name := self.name;
		cacheSize := self.cacheSize;
	}
}

query RDB::operations::AddIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dan�m sch�matu neexistuje index stejn�ho n�zvu
	return not gen.isIndexInSchema(self.owningSchemaName, self.name)
	// v dan� tabulce existuj� dan� sloupce
		   and gen.areColumnsInTable(self.owningSchemaName, self.owningTableName, self.columnsNames);
}

// p�id� index do sch�matu
mapping RDB::operations::AddIndex::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.indexes += object RDB::Index {
		name := self.name;		
		columns += gen.findColumns(self.owningSchemaName, self.owningTableName, self.columnsNames);
	}
}

query RDB::operations::AddTable::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dan�m sch�matu neexistuje tabulka stejn�ho n�zvu
	return not gen.isTableInSchema(self.owningSchemaName, self.name);
}

// p�id� tabulku do sch�matu
mapping RDB::operations::AddTable::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.tables += object RDB::Table {
		name := self.name;
	};
}

query RDB::operations::AddColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dan� tabulce neexistuje sloupec stejn�ho n�zvu
	return not gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name);
}

// p�id� sloupec do tabulky
mapping RDB::operations::AddColumn::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.columns += object RDB::Column {
		name := self.name;
		type := self.type;
		defaultValue := self.defaultValue;
	}
}

query RDB::operations::AddUniqueIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezen� stejn�ho n�zvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v dan�m sch�matu existuje dan� index
	and gen.isIndexInSchema(self.owningSchemaName, self.underlyingIndexName);
}

// p�id� omezen� 'UniqueIndex' pro tabulku
mapping RDB::operations::AddUniqueIndex::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::UniqueIndex {
		name := self.name;
		underlyingIndex := gen.findIndex(self.owningSchemaName, self.underlyingIndexName);
	}
}

query RDB::operations::AddPrimaryKey::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezen� stejn�ho n�zvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v dan�m sch�matu existuje dan� index
	and gen.isIndexInSchema(self.owningSchemaName, self.underlyingIndexName);
}

// p�id� omezen� 'PrimaryKey' pro tabulku
mapping RDB::operations::AddPrimaryKey::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::PrimaryKey {
		name := self.name;
		underlyingIndex := gen.findIndex(self.owningSchemaName, self.underlyingIndexName);
	}
}

query RDB::operations::AddForeignKey::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezen� stejn�ho n�zvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v dan�m sch�matu existuje c�lov� tabulka
	and gen.isTableInSchema(self.owningSchemaName, self.targetTableName)
	// v c�lov� tabulce existuj� dan� sloupce
	and gen.areColumnsInTable(self.owningSchemaName, self.targetTableName, self.constrainedColumnNames)
	// pro dan� sloupce existuje omezen� 'Unique'	
	and gen.isUnique(self.owningSchemaName, self.targetTableName, self.targetColumnsNames);
}

// p�id� omezen� 'ForeignKey' pro tabulku
mapping RDB::operations::AddForeignKey::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::ForeignKey {
		name := self.name;
		targetTable := gen.findTable(self.owningSchemaName, self.targetTableName);
		constrainedColumns := gen.findColumns(self.owningSchemaName, self.targetTableName, self.constrainedColumnNames);
	}
}

query RDB::operations::AddNotNullConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro dan� sloupec neexistuje omezen� stejn�ho n�zvu
	return not gen.isConstraintForColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name);	   
}

// p�id� omezen� 'NotNull' pro sloupec
mapping RDB::operations::AddNotNullConstraint::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.constraints += object RDB::NotNullConstraint {
		name := self.name;
	}
}

/* ++++++++++ EDIT OPERATIONS ++++++++++++++++++++ */

query RDB::operations::RenameTable::isValid( gen : RDB::ModelGeneration) : Boolean {
	// tabulka s n�zvem @name existuje ve sch�matu
	return gen.isTableInSchema(self.owningSchemaName, self.name)
	// tabulka s n�zvem @newName neexistuje ve sch�matu
		   and not gen.isTableInSchema(self.owningSchemaName, self.newName);
}

mapping RDB::operations::RenameTable::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.name);
	// zm�na hodnoty atributu name
	t.name := self.newName;
}

query RDB::operations::RenameColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
	// sloupec s n�zvem @name existuje v tabulce
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
	// sloupec s n�zvem @newName neexistuje v tabulce
		   and not gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.newName);
}

mapping RDB::operations::RenameColumn::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.name);
	// zm�na hodnoty atributu name
	c.name := self.newName;
}


/* ++++++++++ REMOVE OPERATIONS ++++++++++++++++++++ */

query RDB::operations::RemoveTable::isValid(gen : RDB::ModelGeneration) : Boolean {
   
}

// odstran� tabulku z dan�ho sch�matu
mapping RDB::operations::RemoveTable::apply(inout gen : RDB::ModelGeneration) {
	
}

query RDB::operations::RemoveColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
    // sloupec existuje v dan� tabulce
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
	// pro dan� sloupec neexistuje omezen� 'PrimaryKey' �i 'ForeignKey'
		   and not gen.isKey(self.owningSchemaName, self.owningTableName, self.name);
}

// odstran� atribut z dan� t��dy
mapping RDB::operations::RemoveColumn::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	// odstran�n� sloupce
	t.columns := t.columns->excluding(gen.findColumn(self.owningSchemaName, self.owningTableName, self.name));
}

query RDB::operations::RemoveTableConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
    // omezen� existuje pro danou tabulku
	return gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name);
}

// odstran� omezen� pro danou tabulku
mapping RDB::operations::RemoveTableConstraint::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	// odstran�n� omezen�
	t.constraints := t.constraints->excluding(gen.findTableConstraint(self.owningSchemaName, self.owningTableName, self.name));
}

query RDB::operations::RemoveColumnConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
    // omezen� existuje pro dan� sloupec
	return gen.isConstraintForColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name);
}

// odstran� omezen� pro dan� sloupec
mapping RDB::operations::RemoveColumnConstraint::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	// odstran�n� omezen�
	c.constraints := c.constraints->excluding(gen.findColumnConstraint(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name));
}

query RDB::operations::RemoveIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
    // index existuje v dan�m sch�matu
	return gen.isIndexInSchema(self.owningSchemaName, self.name);
}

// odstran� index z dan�ho sch�matu
mapping RDB::operations::RemoveIndex::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	// odstran�n� index
	s.indexes := s.indexes->excluding(gen.findIndex(self.owningSchemaName, self.name));
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

// ov���, zda-li existuje sch�ma v generaci
query RDB::ModelGeneration::isSchemaInGeneration(sName : String) : Boolean {
	return self.schemas->exists(name = sName);
}

// vr�t� sch�ma z generace
query RDB::ModelGeneration::findSchema(sName : String) : RDB::Schema {
	return self.schemas->selectOne(name = sName);
}

// ov���, zda-li existuje sekvence ve sch�matu
query RDB::ModelGeneration::isSequenceInSchema(sName : String, qName : String) : Boolean {
	return self.findSchema(sName).sequences->exists(name = qName);
}

// ov���, zda-li existuje index ve sch�matu
query RDB::ModelGeneration::isIndexInSchema(sName : String, iName : String) : Boolean {
	return self.findSchema(sName).indexes->exists(name = iName);
}

// vr�t� index ze sch�ma
query RDB::ModelGeneration::findIndex(sName : String, iName : String) : RDB::Index {
	return self.findSchema(sName).indexes->selectOne(name = iName);
}

// ov���, zda-li existuje tabulka ve sch�matu
query RDB::ModelGeneration::isTableInSchema(sName : String, tName : String) : Boolean {
	return self.findSchema(sName).tables->exists(name = tName);
}

// vr�t� tabulku ze sch�ma
query RDB::ModelGeneration::findTable(sName : String, tName : String) : RDB::Table {
	return self.findSchema(sName).tables->selectOne(name = tName);
}

// ov���, zda-li existuje sloupec v tabulce
query RDB::ModelGeneration::isColumnInTable(sName : String, tName : String, cName : String) : Boolean {
	return self.findTable(sName, tName).columns->exists(name = cName);
}

// ov���, zda-li existuj� sloupce v tabulce
query RDB::ModelGeneration::areColumnsInTable(sName : String, tName : String, cNames : OrderedSet(String)) : Boolean {
	var b : Boolean := true;
	cNames->forEach(cName) {
		b = b and self.isColumnInTable(sName, tName, cName);
	};
	return b;
}

// vr�t� sloupec z tabulky
query RDB::ModelGeneration::findColumn(sName : String, tName : String, cName : String) : RDB::Column {
	return self.findTable(sName, tName).columns->selectOne(name = cName);
}

// vr�t� se�azenou mno�inu sloupc� z tabulky
query RDB::ModelGeneration::findColumns(sName : String, tName : String, cNames : OrderedSet(String)) : OrderedSet(RDB::Column) {
	var columns : OrderedSet(RDB::Column);
	cNames->forEach(cName) {
		columns += self.findColumn(sName, tName, cName);
	};
	return columns;
}

// ov���, zda-li existuje omezen� pro tabulku
query RDB::ModelGeneration::isConstraintForTable(sName : String, tName : String, rName : String) : Boolean {
	return self.findTable(sName, tName).constraints->exists(name = rName);
}

// ov���, zda-li existuje omezen� pro sloupec 
query RDB::ModelGeneration::isConstraintForColumn(sName : String, tName : String, cName : String, rName : String) : Boolean {
	return self.findColumn(sName, tName, cName).constraints->exists(name = rName);
}

// vr�t� omezen� dan� tabulky
query RDB::ModelGeneration::findTableConstraint(sName : String, tName : String, rName : String) : RDB::TableConstraint {
	return self.findTable(sName, tName).constraints->selectOne(name = rName);
}

// vr�t� omezen� dan�ho sloupce
query RDB::ModelGeneration::findColumnConstraint(sName : String, tName : String, cName : String, rName : String) : RDB::ColumnConstraint {
	return self.findColumn(sName, tName, cName).constraints->selectOne(name = rName);
}

// ov���, zda-li existuje pro sloupce tabulkov� omezen� 'Unique' �i 'PrimaryKey' 
query RDB::ModelGeneration::isUnique(sName : String, tName : String, cName : OrderedSet(String)) : Boolean {
	var target : OrderedSet(RDB::Column) = self.findColumns(sName, tName, cName);
	// vybere omezen� typu 'Unique'
	self.findTable(sName, tName).constraints.oclAsType(RDB::UniqueIndex)->forEach(r) {
		if (r.underlyingIndex.columns = target) then {
			return true;
		} endif;
	};
	return false;
}

// ov���, zda-li existuje pro sloupce tabulkov� omezen� 'PrimaryKey' �i 'ForeignKey' 
query RDB::ModelGeneration::isKey(sName : String, tName : String, cName : String) : Boolean {
	var target : RDB::Column = self.findColumn(sName, tName, cName);
	// vybere omezen� typu 'PrimaryKey'
	self.findTable(sName, tName).constraints.oclAsType(RDB::PrimaryKey)->forEach(r) {
		r.underlyingIndex.columns->forEach(c) {
			if (c = target) then {
				return true;
			} endif;
		};
	};
	// vybere omezen� typu 'ForeignKey'
	self.findTable(sName, tName).constraints.oclAsType(RDB::ForeignKey)->forEach(r) {
		r.targetColumns->forEach(c) {
			if (c = target) then {
				return true;
			} endif;
		};
	};
	return false;
}