/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
 
modeltype APP uses app('http://www.collectionspro.eu/jam/mm/app');
modeltype RDB uses rdb('http://www.collectionspro.eu/jam/mm/rdb');

transformation app_to_rdb(in inApp : APP, inout inRdb : RDB);

main() {
	assert(inApp.rootObjects()->size() = 1);
	assert(inApp.rootObjects()->forAll(oclIsKindOf(APP::ModelRoot)));
	
	log("transformation started...");
	
	var appRoot : APP::ModelRoot = inApp.rootObjects()![APP::ModelRoot];
	var appGen : APP::ModelGeneration = appRoot.modelGenerations->first();
	var rdbRoot : RDB::ModelRoot = inRdb.rootObjects()![RDB::ModelRoot];
	
	appRoot.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(appGen, rdbRoot)) then {
			log("	operation is valid " + op.repr());
			op.xmap toRdb(appGen, rdbRoot);
		} else {
			log("	operation is invalid " + op.repr());
		} endif;
	};
}

// a mapping of a given operation
abstract mapping APP::operations::ModelOperation::
	toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot);
	
// is a mapping valid
abstract query APP::operations::ModelOperation::
	isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) : Boolean;


/* ++++++++++ OPERATIONS ++++++++++++++++++++ */

query APP::operations::AddClass::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return self.isAbstract = false;
}

mapping APP::operations::AddClass::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot) {
	// addition of a table to the schema
	rdbRoot.operations += object RDB::operations::AddTable {
		owningSchemaName := "public";
		name := self.name;
	};
	
	// addition of a column to the table
	rdbRoot.operations += object RDB::operations::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.name;
		name := "id";
		type := RDB::PrimitiveType::int;
		// defaultValue := "0";
	};
	
	// addition of an index to the schema
	rdbRoot.operations += object RDB::operations::AddIndex {
		owningSchemaName := "public";
		owningTableName := self.name;
		name := "public." + self.name.toLower() + ".id";
		columnsNames := OrderedSet {"id"};
	};
	
	// addition of a primary key to the table
	rdbRoot.operations += object RDB::operations::AddPrimaryKey {
		owningSchemaName := "public";
		owningTableName := self.name;
		name := "public." + self.name.toLower() + ".id.pk";
		underlyingIndexName := "public." + self.name.toLower() + ".id";
	};
}

query APP::operations::AddProperty::isValid(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot): Boolean {
	return true;
}

mapping APP::operations::AddProperty::toRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
disjuncts APP::operations::AddProperty::primitivePropertyToRdb,
		  APP::operations::AddProperty::embeddedPropertyToRdb,
		  APP::operations::AddProperty::complexPropertyToRdb,
		  APP::operations::AddProperty::notNullToRdb { 
}

mapping APP::operations::AddProperty::primitivePropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.findEntity(self.type).oclIsTypeOf(APP::PrimitiveClass); }
{
	// addition of a column to the table
	rdbRoot.operations += object RDB::operations::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.owningClassName;
		name := self.name.toLower();
		type := appGen.findPrimitiveTypeInRdb(self.type);
		defaultValue := self.defaultValue;
	};
}

mapping APP::operations::AddProperty::embeddedPropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.findEntity(self.type).oclIsTypeOf(APP::EmbeddedClass); }
{
	appGen.findEntity(self.type).oclAsType(APP::EmbeddedClass).properties->forEach(p) {
		// addition of a column to the table
		rdbRoot.operations += object RDB::operations::AddColumn {
			owningSchemaName := "public";
			owningTableName := p.owningClass.name;
			name := p.name.toLower();
			type := appGen.findPrimitiveTypeInRdb(p.type.name);
			defaultValue := self.defaultValue;
		};
	
	};
}

mapping APP::operations::AddProperty::complexPropertyToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { appGen.findEntity(self.type).oclIsTypeOf(APP::Class); }
{
	// addition of a column to the table
	rdbRoot.operations += object RDB::operations::AddColumn {
		owningSchemaName := "public";
		owningTableName := self.owningClassName;
		name := "id_ref_" + self.type.toLower();
		type := RDB::PrimitiveType::int;
		defaultValue := self.defaultValue;
	};
	
	// addition of a foreign key to the table
	rdbRoot.operations += object RDB::operations::AddForeignKey {
		owningSchemaName := "public";
		owningTableName := self.owningClassName;
		name := "public." + self.owningClassName.toLower() + ".id.fk";
		targetTableName := self.type.toLower();
		constrainedColumnName := "id_ref_" + self.type.toLower();		
	};
}

mapping APP::operations::AddProperty::notNullToRdb(appGen : APP::ModelGeneration, inout rdbRoot : RDB::ModelRoot)
when { self.lowerBound = 1 }
{
	// addition of a notNull constraint to the column
	rdbRoot.operations += object RDB::operations::AddNotNullConstraint {
		owningSchemaName := "public";
		owningTableName := self.owningClassName;
		owningColumnName := self.name;
		name := "public." + self.owningClassName.toLower() + "." + self.name.toLower() + ".nn";
	};
}


/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

query APP::ModelGeneration::findEntity(eName : String) : APP::Entity {
	return self.classes->selectOne(name = eName);
}

query APP::ModelGeneration::findPrimitiveTypeInApp(pName : String) : APP::PrimitiveType {
	return self.findEntity(pName).oclAsType(APP::PrimitiveClass).primitiveType;
}

query APP::ModelGeneration::findPrimitiveTypeInRdb(pName : String) : RDB::PrimitiveType {
	switch {
		case (self.findPrimitiveTypeInApp(pName) = APP::PrimitiveType::boolean) return RDB::PrimitiveType::boolean;
		case (self.findPrimitiveTypeInApp(pName) = APP::PrimitiveType::char) return RDB::PrimitiveType::char;
		case (self.findPrimitiveTypeInApp(pName) = APP::PrimitiveType::int) return RDB::PrimitiveType::int;
	};
	return null;
}