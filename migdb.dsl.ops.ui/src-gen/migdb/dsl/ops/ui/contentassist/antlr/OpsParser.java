/*
* generated by Xtext
*/
package migdb.dsl.ops.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import migdb.dsl.ops.services.OpsGrammarAccess;

public class OpsParser extends AbstractContentAssistParser {
	
	@Inject
	private OpsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected migdb.dsl.ops.ui.contentassist.antlr.internal.InternalOpsParser createParser() {
		migdb.dsl.ops.ui.contentassist.antlr.internal.InternalOpsParser result = new migdb.dsl.ops.ui.contentassist.antlr.internal.InternalOpsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelOperationAccess().getAlternatives(), "rule__ModelOperation__Alternatives");
					put(grammarAccess.getAtomicOperationAccess().getAlternatives(), "rule__AtomicOperation__Alternatives");
					put(grammarAccess.getDecomposableOperationAccess().getAlternatives(), "rule__DecomposableOperation__Alternatives");
					put(grammarAccess.getSetParentAccess().getAlternatives_1(), "rule__SetParent__Alternatives_1");
					put(grammarAccess.getSetAbstractAccess().getAlternatives_1(), "rule__SetAbstract__Alternatives_1");
					put(grammarAccess.getAddPropertyAccess().getAlternatives_2_0(), "rule__AddProperty__Alternatives_2_0");
					put(grammarAccess.getAddPropertyAccess().getAlternatives_2_1(), "rule__AddProperty__Alternatives_2_1");
					put(grammarAccess.getAddPropertyAccess().getAlternatives_6_1(), "rule__AddProperty__Alternatives_6_1");
					put(grammarAccess.getSetOppositeAccess().getAlternatives_3(), "rule__SetOpposite__Alternatives_3");
					put(grammarAccess.getSetBoundsAccess().getAlternatives_3_1(), "rule__SetBounds__Alternatives_3_1");
					put(grammarAccess.getSetOrderedAccess().getAlternatives_3(), "rule__SetOrdered__Alternatives_3");
					put(grammarAccess.getSetUniqueAccess().getAlternatives_3(), "rule__SetUnique__Alternatives_3");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getMergeTypeAccess().getAlternatives(), "rule__MergeType__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getInheritanceTypeAccess().getAlternatives(), "rule__InheritanceType__Alternatives");
					put(grammarAccess.getAddPrimitiveClassAccess().getGroup(), "rule__AddPrimitiveClass__Group__0");
					put(grammarAccess.getAddEmbeddedClassAccess().getGroup(), "rule__AddEmbeddedClass__Group__0");
					put(grammarAccess.getAddStandardClassAccess().getGroup(), "rule__AddStandardClass__Group__0");
					put(grammarAccess.getRenameEntityAccess().getGroup(), "rule__RenameEntity__Group__0");
					put(grammarAccess.getSetParentAccess().getGroup(), "rule__SetParent__Group__0");
					put(grammarAccess.getSetParentAccess().getGroup_1_0(), "rule__SetParent__Group_1_0__0");
					put(grammarAccess.getSetAbstractAccess().getGroup(), "rule__SetAbstract__Group__0");
					put(grammarAccess.getRemoveEntityAccess().getGroup(), "rule__RemoveEntity__Group__0");
					put(grammarAccess.getAddPropertyAccess().getGroup(), "rule__AddProperty__Group__0");
					put(grammarAccess.getAddPropertyAccess().getGroup_6(), "rule__AddProperty__Group_6__0");
					put(grammarAccess.getAddPropertyAccess().getGroup_6_1_1(), "rule__AddProperty__Group_6_1_1__0");
					put(grammarAccess.getAddPropertyAccess().getGroup_7(), "rule__AddProperty__Group_7__0");
					put(grammarAccess.getRenamePropertyAccess().getGroup(), "rule__RenameProperty__Group__0");
					put(grammarAccess.getRemovePropertyAccess().getGroup(), "rule__RemoveProperty__Group__0");
					put(grammarAccess.getSetTypeAccess().getGroup(), "rule__SetType__Group__0");
					put(grammarAccess.getSetOppositeAccess().getGroup(), "rule__SetOpposite__Group__0");
					put(grammarAccess.getSetBoundsAccess().getGroup(), "rule__SetBounds__Group__0");
					put(grammarAccess.getSetBoundsAccess().getGroup_3(), "rule__SetBounds__Group_3__0");
					put(grammarAccess.getSetBoundsAccess().getGroup_3_1_1(), "rule__SetBounds__Group_3_1_1__0");
					put(grammarAccess.getSetOrderedAccess().getGroup(), "rule__SetOrdered__Group__0");
					put(grammarAccess.getSetUniqueAccess().getGroup(), "rule__SetUnique__Group__0");
					put(grammarAccess.getCopyPropertyAccess().getGroup(), "rule__CopyProperty__Group__0");
					put(grammarAccess.getMovePropertyAccess().getGroup(), "rule__MoveProperty__Group__0");
					put(grammarAccess.getExtractClassAccess().getGroup(), "rule__ExtractClass__Group__0");
					put(grammarAccess.getExtractClassAccess().getGroup_5(), "rule__ExtractClass__Group_5__0");
					put(grammarAccess.getExtractParentAccess().getGroup(), "rule__ExtractParent__Group__0");
					put(grammarAccess.getExtractParentAccess().getGroup_3(), "rule__ExtractParent__Group_3__0");
					put(grammarAccess.getExtractParentAccess().getGroup_8(), "rule__ExtractParent__Group_8__0");
					put(grammarAccess.getOperationsAccess().getOperationsAssignment(), "rule__Operations__OperationsAssignment");
					put(grammarAccess.getAddPrimitiveClassAccess().getNameAssignment_0(), "rule__AddPrimitiveClass__NameAssignment_0");
					put(grammarAccess.getAddPrimitiveClassAccess().getPrimitiveTypeAssignment_3(), "rule__AddPrimitiveClass__PrimitiveTypeAssignment_3");
					put(grammarAccess.getAddEmbeddedClassAccess().getNameAssignment_0(), "rule__AddEmbeddedClass__NameAssignment_0");
					put(grammarAccess.getAddStandardClassAccess().getNameAssignment_0(), "rule__AddStandardClass__NameAssignment_0");
					put(grammarAccess.getAddStandardClassAccess().getIsAbstractAssignment_2_0(), "rule__AddStandardClass__IsAbstractAssignment_2_0");
					put(grammarAccess.getAddStandardClassAccess().getInheritanceTypeAssignment_2_1(), "rule__AddStandardClass__InheritanceTypeAssignment_2_1");
					put(grammarAccess.getRenameEntityAccess().getNameAssignment_0(), "rule__RenameEntity__NameAssignment_0");
					put(grammarAccess.getRenameEntityAccess().getNewNameAssignment_2(), "rule__RenameEntity__NewNameAssignment_2");
					put(grammarAccess.getSetParentAccess().getNameAssignment_0(), "rule__SetParent__NameAssignment_0");
					put(grammarAccess.getSetParentAccess().getParentNameAssignment_1_0_1(), "rule__SetParent__ParentNameAssignment_1_0_1");
					put(grammarAccess.getSetAbstractAccess().getNameAssignment_0(), "rule__SetAbstract__NameAssignment_0");
					put(grammarAccess.getSetAbstractAccess().getIsAbstractAssignment_1_0(), "rule__SetAbstract__IsAbstractAssignment_1_0");
					put(grammarAccess.getRemoveEntityAccess().getNameAssignment_1(), "rule__RemoveEntity__NameAssignment_1");
					put(grammarAccess.getAddPropertyAccess().getOwningClassNameAssignment_0(), "rule__AddProperty__OwningClassNameAssignment_0");
					put(grammarAccess.getAddPropertyAccess().getIsOrderedAssignment_2_0_1(), "rule__AddProperty__IsOrderedAssignment_2_0_1");
					put(grammarAccess.getAddPropertyAccess().getIsUniqueAssignment_2_1_1(), "rule__AddProperty__IsUniqueAssignment_2_1_1");
					put(grammarAccess.getAddPropertyAccess().getNameAssignment_3(), "rule__AddProperty__NameAssignment_3");
					put(grammarAccess.getAddPropertyAccess().getTypeAssignment_5(), "rule__AddProperty__TypeAssignment_5");
					put(grammarAccess.getAddPropertyAccess().getUpperBoundAssignment_6_1_0(), "rule__AddProperty__UpperBoundAssignment_6_1_0");
					put(grammarAccess.getAddPropertyAccess().getLowerBoundAssignment_6_1_1_0(), "rule__AddProperty__LowerBoundAssignment_6_1_1_0");
					put(grammarAccess.getAddPropertyAccess().getUpperBoundAssignment_6_1_1_2(), "rule__AddProperty__UpperBoundAssignment_6_1_1_2");
					put(grammarAccess.getAddPropertyAccess().getDefaultValueAssignment_7_1(), "rule__AddProperty__DefaultValueAssignment_7_1");
					put(grammarAccess.getRenamePropertyAccess().getOwningClassNameAssignment_0(), "rule__RenameProperty__OwningClassNameAssignment_0");
					put(grammarAccess.getRenamePropertyAccess().getNameAssignment_2(), "rule__RenameProperty__NameAssignment_2");
					put(grammarAccess.getRenamePropertyAccess().getNewNameAssignment_4(), "rule__RenameProperty__NewNameAssignment_4");
					put(grammarAccess.getRemovePropertyAccess().getOwningClassNameAssignment_0(), "rule__RemoveProperty__OwningClassNameAssignment_0");
					put(grammarAccess.getRemovePropertyAccess().getNameAssignment_2(), "rule__RemoveProperty__NameAssignment_2");
					put(grammarAccess.getSetTypeAccess().getOwningClassNameAssignment_0(), "rule__SetType__OwningClassNameAssignment_0");
					put(grammarAccess.getSetTypeAccess().getNameAssignment_2(), "rule__SetType__NameAssignment_2");
					put(grammarAccess.getSetTypeAccess().getTypeAssignment_4(), "rule__SetType__TypeAssignment_4");
					put(grammarAccess.getSetOppositeAccess().getFirstClassNameAssignment_0(), "rule__SetOpposite__FirstClassNameAssignment_0");
					put(grammarAccess.getSetOppositeAccess().getFirstPropertyNameAssignment_2(), "rule__SetOpposite__FirstPropertyNameAssignment_2");
					put(grammarAccess.getSetOppositeAccess().getIsOppositeAssignment_3_0(), "rule__SetOpposite__IsOppositeAssignment_3_0");
					put(grammarAccess.getSetOppositeAccess().getSecondClassNameAssignment_4(), "rule__SetOpposite__SecondClassNameAssignment_4");
					put(grammarAccess.getSetOppositeAccess().getSecondPropertyNameAssignment_6(), "rule__SetOpposite__SecondPropertyNameAssignment_6");
					put(grammarAccess.getSetBoundsAccess().getOwningClassNameAssignment_0(), "rule__SetBounds__OwningClassNameAssignment_0");
					put(grammarAccess.getSetBoundsAccess().getNameAssignment_2(), "rule__SetBounds__NameAssignment_2");
					put(grammarAccess.getSetBoundsAccess().getUpperBoundAssignment_3_1_0(), "rule__SetBounds__UpperBoundAssignment_3_1_0");
					put(grammarAccess.getSetBoundsAccess().getLowerBoundAssignment_3_1_1_0(), "rule__SetBounds__LowerBoundAssignment_3_1_1_0");
					put(grammarAccess.getSetBoundsAccess().getUpperBoundAssignment_3_1_1_2(), "rule__SetBounds__UpperBoundAssignment_3_1_1_2");
					put(grammarAccess.getSetOrderedAccess().getOwningClassNameAssignment_0(), "rule__SetOrdered__OwningClassNameAssignment_0");
					put(grammarAccess.getSetOrderedAccess().getNameAssignment_2(), "rule__SetOrdered__NameAssignment_2");
					put(grammarAccess.getSetOrderedAccess().getIsOrderedAssignment_3_0(), "rule__SetOrdered__IsOrderedAssignment_3_0");
					put(grammarAccess.getSetUniqueAccess().getOwningClassNameAssignment_0(), "rule__SetUnique__OwningClassNameAssignment_0");
					put(grammarAccess.getSetUniqueAccess().getNameAssignment_2(), "rule__SetUnique__NameAssignment_2");
					put(grammarAccess.getSetUniqueAccess().getIsUniqueAssignment_3_0(), "rule__SetUnique__IsUniqueAssignment_3_0");
					put(grammarAccess.getCopyPropertyAccess().getTypeAssignment_1(), "rule__CopyProperty__TypeAssignment_1");
					put(grammarAccess.getCopyPropertyAccess().getOwningClassNameAssignment_2(), "rule__CopyProperty__OwningClassNameAssignment_2");
					put(grammarAccess.getCopyPropertyAccess().getNameAssignment_4(), "rule__CopyProperty__NameAssignment_4");
					put(grammarAccess.getCopyPropertyAccess().getTargetClassNameAssignment_6(), "rule__CopyProperty__TargetClassNameAssignment_6");
					put(grammarAccess.getMovePropertyAccess().getTypeAssignment_1(), "rule__MoveProperty__TypeAssignment_1");
					put(grammarAccess.getMovePropertyAccess().getOwningClassNameAssignment_2(), "rule__MoveProperty__OwningClassNameAssignment_2");
					put(grammarAccess.getMovePropertyAccess().getNameAssignment_4(), "rule__MoveProperty__NameAssignment_4");
					put(grammarAccess.getMovePropertyAccess().getTargetClassNameAssignment_6(), "rule__MoveProperty__TargetClassNameAssignment_6");
					put(grammarAccess.getExtractClassAccess().getSourceClassNameAssignment_1(), "rule__ExtractClass__SourceClassNameAssignment_1");
					put(grammarAccess.getExtractClassAccess().getExtractPropertiesNamesAssignment_4(), "rule__ExtractClass__ExtractPropertiesNamesAssignment_4");
					put(grammarAccess.getExtractClassAccess().getExtractPropertiesNamesAssignment_5_1(), "rule__ExtractClass__ExtractPropertiesNamesAssignment_5_1");
					put(grammarAccess.getExtractClassAccess().getExtractClassNameAssignment_8(), "rule__ExtractClass__ExtractClassNameAssignment_8");
					put(grammarAccess.getExtractParentAccess().getSourceClassesNameAssignment_2(), "rule__ExtractParent__SourceClassesNameAssignment_2");
					put(grammarAccess.getExtractParentAccess().getSourceClassesNameAssignment_3_1(), "rule__ExtractParent__SourceClassesNameAssignment_3_1");
					put(grammarAccess.getExtractParentAccess().getExtractPropertiesNameAssignment_7(), "rule__ExtractParent__ExtractPropertiesNameAssignment_7");
					put(grammarAccess.getExtractParentAccess().getExtractPropertiesNameAssignment_8_1(), "rule__ExtractParent__ExtractPropertiesNameAssignment_8_1");
					put(grammarAccess.getExtractParentAccess().getExtractParentNameAssignment_11(), "rule__ExtractParent__ExtractParentNameAssignment_11");
					put(grammarAccess.getAddStandardClassAccess().getUnorderedGroup_2(), "rule__AddStandardClass__UnorderedGroup_2");
					put(grammarAccess.getAddPropertyAccess().getUnorderedGroup_2(), "rule__AddProperty__UnorderedGroup_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			migdb.dsl.ops.ui.contentassist.antlr.internal.InternalOpsParser typedParser = (migdb.dsl.ops.ui.contentassist.antlr.internal.InternalOpsParser) parser;
			typedParser.entryRuleModelRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public OpsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(OpsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
