@namespace(uri="http://www.collectionspro.eu/jam/mm", prefix="mm")
package mm;

@namespace(uri="http://www.collectionspro.eu/jam/mm/rdb", prefix="mmrdb")
package rdb {
  class ModelRoot {
    val Database[+] DBgenerations;
    val operations.Operation[*]#owningModelRoot composedoperations;
  }

  class Database {
    !ordered val Schema[*] schemas;
    attr String[1] name;
  }

  class Schema {
    !ordered val Table[*]#owningSchema tables;
    !ordered val Sequence[*]#owningSchema sequences;
    !ordered val Index[*]#owningSchema indexes;
    attr String[1] name;
  }

  @OCL(inv="self.primaryKey->notEmpty() implies in self.indexes->contains(self.primaryKey)")
  class Table {
  
    @OCL(body="if self.primaryKey->isEmpty() then
						null
					else
						self.primaryKey.underlyingIndex.columns->first()
					endif
					")
    op TableColumn getPrimaryColumn();
    !ordered op TableColumn[*] getColumns();
    readonly derived ref Schema[1]#tables owningSchema;
    ref PrimaryKey primaryKey;
    !ordered val TableColumn[*] ownedColumns;
    !ordered val TableConstraint[*]#owningTable constraints;
    attr String[1] name;
  }

  class Sequence {
    readonly derived ref Schema[1]#sequences owningSchema;
    attr int cacheSize;
    attr String[1] name;
  }

  abstract class Constraint {
    attr String[1] name;
  }

  abstract class TableConstraint extends Constraint {
    readonly derived ref Table[1]#constraints owningTable;
  }

  abstract class ColumnConstraint extends Constraint {
    readonly derived ref TableColumn[1]#columnConstraints owningColumn;
  }
  
  class NotNullConstraint extends ColumnConstraint{
  }

  @OCL(inv="self.constrainedColumn.owningTable = self.owningTable)")
  @OCL(inv="self.targetTable.getPrimaryColumn()->notEmpty()")
  class ForeignKey extends TableConstraint {
    ref Table[1] targetTable;
    ref TableColumn[1] constrainedColumn;
  }

  class TableColumn {

    @OCL(body="self._owningTable")
    op Table getOwningTable();
    !ordered val ColumnConstraint[*]#owningColumn columnConstraints;
    ref Table[1] _owningTable;
    attr String[1] type;
    attr String[1] name;
    attr String [?] defaultValue;
  }
  
  @OCL(inv="let first : TableColumn = self.columnsMap->first() in
			  self.columns->forAll(col | col._owningTable = first._owningTable)")
  class Index {
    !ordered ref TableColumn[+] columns;

    @OCL(drv="self.columns->first()._owningTable")
    readonly derived ref Schema[1]#indexes owningSchema;
    attr String[1] name;
  }

  @OCL(inv="self.owningTable = self.underlyingIndex.indexedTable")
  class UniqueIndex extends TableConstraint {
    ref Index[1] underlyingIndex;
  }

  @OCL(inv="self.underlyingIndex.columns.size() = 1")
  class PrimaryKey extends UniqueIndex {
  }

  
  @namespace(uri="http://www.collectionspro.eu/jam/mm/operations", prefix="mmrdb-operations")
  package operations {
    abstract class Operation {
  	}
  
  	class ComposedTableOperation  extends Operation {
    	ordered val operations.Operation[1..*] operations;
  	}
  
    abstract class TableOperation extends Operation {
      	attr String[1] tableName;
    }

	abstract class CreateConstraintOperation extends TableOperation{
		attr String[1] constraintName;		   
	}
	
    class CreateTable extends TableOperation {
      	attr String[+] columnName;
      	attr String[+] columnType;
	  	attr String[1] primaryKeyName;
    }
  
    class RenameTable extends TableOperation {
      	attr String[1] newName;
    }

    class DeleteTable extends TableOperation {
    }

    class AddColumn extends TableOperation {
      attr String[1] columnName;
      attr String[1] columnType;
		attr String[0..1] default;
    }

    class RenameColumn extends TableOperation {
      attr String[1] columnName;
      attr String[1] newName;
    }

    class SetColumnType extends TableOperation {
      attr String[1] columnName;
      attr String[1] newType;
    }

    class DeleteColumn extends TableOperation {
      attr String[1] columnName;
    }
	
	class CreateSequence extends Operation{
		attr String [1] sequenceName;   
		attr int [?] minValue;
		attr int [?] maxValue;
		attr int [?] increment;  		
	}
	
	class DropSequence extends Operation{
	   attr String [1] sequenceName;
	}
	
	class CreateIndex extends CreateConstraintOperation {
	   attr boolean [1] isUnique;
	   attr String [+] columnNames;
	}
	
	class CreateForeignKey extends CreateConstraintOperation{
		attr String [1] columnName;
		attr String [1] refColumnName;
		attr String [1] refTableName;
	}
	
	class CreatePrimaryKey extends CreateConstraintOperation{
	   attr String [1] columnName;
	}
	
	class SetDefaultValue extends TableOperation{
		attr String [1] columnName;
		attr String [1] value;	
	}
	
	class SetNull extends CreateConstraintOperation{
		attr String [1] columnName;
		attr boolean[1] isNullable;   
	}
		
	class DropConstraint extends TableOperation{
	   attr String [1] constraintName;
	}
	
	
  }
  

  @namespace(uri="http://www.collectionspro.eu/jam/mm/rdb-dml", prefix="mmrdb-dml")
  package dml {
    class Query {

      @DVU(subsets="self.columns")
      val ColumnReference[+] columnReferences;
    }

    class ColumnReference extends TableColumn {
      ref TableColumn[1] reference;
    }

  }

}