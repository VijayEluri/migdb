import queries_rdb;
import builder_rdb; 
import builder_errors;

modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";
modeltype ERR uses "http://www.collectionspro.eu/jam/mm/errors";
library evolution_rdb;

abstract query RDB::ops::ModelOperation::
	isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean;

abstract helper RDB::ops::ModelOperation::
	apply(inout structure : RDB::Structure);


/********************************************************************************
 *								ADD OPERATIONS									*
 ********************************************************************************/
/** Returns id of transformation rdb evolution  **/
query getEvolutionRdbTransformationId():String {
	return "evolution_rdb.qvto";
}

/**
 * ADD SCHEMA
 * Operation create new database schema in structureeration model
 * @restriction : schema with @name must not exists in current structure
 */
query RDB::ops::AddSchema::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return return checkNotExistSchema(self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
}

helper RDB::ops::AddSchema::apply(inout structure : RDB::Structure) {
	structure.schemas += _schema(self.name);
	return;
}

/**
 * ADD SEQUENCE
 * we can use only one global sequence in the system. 
 * Operation is something like singleton - Sequence can be created only one times.
 * @restriction : sequence with @newDefaultValue must not exists in structureeration
 * @restriction : in the schema must not be other sequence
 */
query RDB::ops::AddSequence::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	var existSchema : Boolean := checkExistSchema(self.owningSchemaName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var notExistSequence : Boolean := checkNotExistSequence(self.owningSchemaName, self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	return existSchema and notExistSequence;
}

helper RDB::ops::AddSequence::apply(inout structure : RDB::Structure) {
	var s : RDB::Schema := structure.findSchema(self.owningSchemaName);
	s.sequence := _sequence(self.name, self.startValue);
	return;
}

/**
 * ADD INDEX
 * Create index in defined schema.
 * @restriction : in the schema must not be an index with the same @name.
 * @restriction : columns with @columnsNames must exists in table
 */
query RDB::ops::AddIndex::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	var existSchema : Boolean := checkExistSchema(self.owningSchemaName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var notExistIndex : Boolean := checkNotExistIndex(self.owningSchemaName, self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var existTable : Boolean := checkExistTable(self.owningSchemaName, self.owningTableName , structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	return existSchema and notExistIndex 
		and structure.areColumnsInTable(self.owningSchemaName, self.owningTableName, self.columnsNames);
}

helper RDB::ops::AddIndex::apply(inout structure : RDB::Structure) {
	var s : RDB::Schema := structure.findSchema(self.owningSchemaName);
	s.indexes += _index(self.name, structure.findColumns(self.owningSchemaName, self.owningTableName, self.columnsNames));
	return; 
}

/**
 * ADD TABLE
 * Create table in defined schema.
 * @restriction : in the schema must not be a table with the same @name.
 */
query RDB::ops::AddTable::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	var existSchema : Boolean := checkExistSchema(self.owningSchemaName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var notExistTable : Boolean := checkNotExistTable(self.owningSchemaName, self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	return existSchema and notExistTable;
}

helper RDB::ops::AddTable::apply(inout structure : RDB::Structure) {
	var s : RDB::Schema := structure.findSchema(self.owningSchemaName);
	s.tables += _table(self.name);
	return;
}

/**
 * ADD COLUMN
 * Create column in defined table.
 * @restriction : in the table must not be a column with the same @name.
 * @restriction : @type must exist in PrimitiveType.
 */
query RDB::ops::AddColumn::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	var existSchema : Boolean := checkExistSchema(self.owningSchemaName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var existTable : Boolean := checkExistTable(self.owningSchemaName, self.owningTableName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var notExistColumn : Boolean := checkNotExistColumn(self.owningSchemaName, self.owningTableName, self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	return existSchema and existTable and notExistColumn;
}

helper RDB::ops::AddColumn::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	t.columns += _column(self.name, self.type, self.defaultValue); 
	return;
}

/**
 * ADD UNIQUE
 * Create unique constraint on defined column.
 * @restriction : in the table must not be a constraint with the same @name.
 * @restriction : column with @columnName must exists in table
 */
query RDB::ops::AddUnique::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	var existSchema : Boolean := checkExistSchema(self.owningSchemaName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var existTable : Boolean := checkExistTable(self.owningSchemaName, self.owningTableName, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var existColumn : Boolean := checkExistColumn(self.owningSchemaName, self.owningTableName, self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	var notExistConstraint : Boolean := checkNotExistConstraint(self.owningSchemaName, self.owningTableName, self.name, structure, errorLog, operationIndex, getEvolutionRdbTransformationId());
	
	return existSchema and existTable and existColumn and notExistConstraint;
}

helper RDB::ops::AddUnique::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += _unique(self.name, structure.findColumn(self.owningSchemaName, self.owningTableName, self.constrainedColumnName));
	return;
}

/**
 * ADD PRIMARY KEY
 * Create primary key constraint on defined column.
 * @restriction : in the table must not be a constraint with the same @name.
 * @restriction : index with @underlyingIndexName must exists in schema
 * @restriction : column with @columnName must exists in table
 */
query RDB::ops::AddPrimaryKey::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return not structure.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
		and structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.constrainedColumnName);
}

helper RDB::ops::AddPrimaryKey::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += _primaryKey(self.name, structure.findColumn(self.owningSchemaName, self.owningTableName, self.constrainedColumnName));
	return;
}

/**
 * ADD FOREIGN KEY
 * Create foreign key constraint on defined column.
 * @restriction : in the table must not be a constraint with the same @name.
 * @restriction : column with @constrainedColumnName must exists in table
 * @restriction : table with @targetTableName must exists in schema.
 */
query RDB::ops::AddForeignKey::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return not structure.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	and structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.constrainedColumnName)
	and structure.isTableInSchema(self.owningSchemaName, self.targetTableName);
}

helper RDB::ops::AddForeignKey::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += _foreignKey(
						self.name, 
						structure.findTable(self.owningSchemaName, self.targetTableName),
						structure.findColumn(self.owningSchemaName, self.owningTableName, self.constrainedColumnName));
	return; 
}

/**
 * ADD NOT NULL
 * Create foreign key constraint on defined column.
 * @restriction : in the table must not be a constraint with the same @name.
 * @restriction : column with @owningColumnName must exists in table
 */
query RDB::ops::AddNotNull::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return not structure.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
		and structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.constrainedColumnName);	   
}

helper RDB::ops::AddNotNull::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += _notNull(self.name, structure.findColumn(self.owningSchemaName, self.owningTableName, self.constrainedColumnName));
	return; 
}

/********************************************************************************
 *								SET OPERATIONS									*
 ********************************************************************************/

/**
 * RENAME TABLE
 * Create new name for table.
 * @restriction : the table must exists in schema
 * @restriction : in the schema must not be a table with the same @newName.
 */
query RDB::ops::RenameTable::isValid( structure : RDB::Structure) : Boolean {
	return structure.isTableInSchema(self.owningSchemaName, self.name)
		and not structure.isTableInSchema(self.owningSchemaName, self.newName);
}

helper RDB::ops::RenameTable::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.name);
	t.name := self.newName;
	return;
}

/**
 * RENAME COLUMN
 * Create new name for column.
 * @restriction : the column must exists in table
 * @restriction : in the table must not be a column with the same @newName.
 */
query RDB::ops::RenameColumn::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
		and not structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.newName);
}

helper RDB::ops::RenameColumn::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	var c : RDB::Column := structure.findColumn(self.owningSchemaName, self.owningTableName, self.name);
	t.constraints->forEach(r) {
		if (r.oclAsType(RDB::ForeignKey).constrainedColumn.name = c.name.toLower()) then {
			r.oclAsType(RDB::ForeignKey).name := r.oclAsType(RDB::ForeignKey).name.replace("_" + self.name + "_", "_" + self.newName + "_");
		} endif;
	};
	c.name := self.newName;
	return;
}

/**
 * SET COLUMN TYPE
 * This operation replace old type of column with a new type of column
 * Column and new type must exists in actual model structureeration. 
 * @restriction : column with @name must exists in table
 */
query RDB::ops::SetColumnType::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

helper RDB::ops::SetColumnType::apply(inout structure : RDB::Structure){
	var c : RDB::Column := structure.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.type := self.newType;
	return;
}

/**
 * SET COLUMN DEFAULT VALUE
 * This operation set new default value to column
 * Column must exists in actual model structureeration. 
 * If is property isSequence set on TRUE - Sequence must exist in structureeration - this information is used only in SQL structureerator
 * In sequence case @newDefaultValue means name of sequence in model structureeration
 * @restriction : column with @owningColumnName must exists in table
 */
query RDB::ops::SetDefaultValue::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

helper RDB::ops::SetDefaultValue::apply(inout structure : RDB::Structure){
	var c : RDB::Column := structure.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.defaultValue := self.newDefaultValue;
	return;
}



/********************************************************************************
 *							 REMOVE OPERATIONS									*
 ********************************************************************************/

/**
 * REMOVE TABLE
 * This operation remove table from schema and structureeration.
 * @restriction : table with @name must exists in structureeration
 * @restriction : table must not have columns
 * @restriction : table must not have table constraints
 */
query RDB::ops::RemoveTable::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isTableInSchema(self.owningSchemaName, self.name)
		   and structure.findTable(self.owningSchemaName, self.name).columns->size() = 0
		   and structure.findTable(self.owningSchemaName, self.name).constraints->size() = 0;
}

helper RDB::ops::RemoveTable::apply(inout structure : RDB::Structure) {
	var s : RDB::Schema := structure.findSchema(self.owningSchemaName);
	s.tables := s.tables->excluding(structure.findTable(self.owningSchemaName, self.name));
	return;
}

/**
 * REMOVE COLUMN
 * This operation remove column from table and structureeration.
 * ForeignKey constraint will be remove with column. 
 * @restriction : column with @name must exists in table
 * @restriction : column mustn't be part of constraint
 */
query RDB::ops::RemoveColumn::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
		and not structure.isConstrainedColumn(self.owningSchemaName, self.owningTableName, self.name);
}

helper RDB::ops::RemoveColumn::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	var c : RDB::Column := structure.findColumn(self.owningSchemaName, self.owningTableName, self.name);
	//t.constraints->forEach(r) {
	//	if (r.oclAsType(RDB::ForeignKey).owningColumn.name = c.name.toLower()) then {
	//		t.constraints := t.constraints->excluding(r);
	//	} endif;
	//};
	t.columns := t.columns->excluding(c);
	return;
}

/**
 * REMOVE CONSTRAINT
 * This operation remove table constraint from table
 * @restriction : table constraint with @name must exists in table 
 */
query RDB::ops::RemoveConstraint::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name);
}

helper RDB::ops::RemoveConstraint::apply(inout structure : RDB::Structure) {
	var t : RDB::Table := structure.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints := t.constraints->excluding(structure.findConstraint(self.owningSchemaName, self.owningTableName, self.name));
	return;
}


/**
 * REMOVE INDEX
 * This operation remove index from schema
 * @restriction : index with @name must exists in schema 
 */
query RDB::ops::RemoveIndex::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isIndexInSchema(self.owningSchemaName, self.name);
}

helper RDB::ops::RemoveIndex::apply(inout structure : RDB::Structure) {
	var s : RDB::Schema := structure.findSchema(self.owningSchemaName);
	s.indexes := s.indexes->excluding(structure.findIndex(self.owningSchemaName, self.name));
	return;
}

/**
 * REMOVE DEFAULT VALUE
 * This operation remove default value and set value to NULL
 * Column must exists in actual model structureeration.
 * @restriction :  column with @name must exists in structureeration
 */
query RDB::ops::RemoveDefaultValue::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean { 
	return structure.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

helper RDB::ops::RemoveDefaultValue::apply(inout structure : RDB::Structure){
	var c : RDB::Column := structure.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.defaultValue := null;
	return;
}

/********************************************************************************
 *								DATA OPERATIONS									*
 ********************************************************************************/

/**
 * UPDATE ROWS
 * This operation copy data from one column to another.
 * That means update of one column in target table. 
 * Target and source column can be the same tables.
 * Update instances works in hierarchy only.
 * MergeType:
 * strict -> Can not transfer data if a tables have different number of instances (rows).
 * tolerant -> Can transfer data if source table has less number of instances (rows).
 * force -> Delete rows if there is more instancef in source table. If source table has less number
 * of instances add default value or null.
 * @restriction : column with @sourceColumnName must exists in table
 * @restriction : target column with @targetColumnName must exists in table
 * @restriction : target and source column type must be same
 */
query RDB::ops::UpdateRows::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isColumnInTable(self.owningSchemaName, self.sourceTableName, self.sourceColumnName)
		   and structure.isColumnInTable(self.owningSchemaName, self.targetTableName, self.targetColumnName)
		   and structure.isSameColumnType(self.owningSchemaName, self.sourceTableName, self.sourceColumnName, self.targetTableName, self.targetColumnName);
}

helper RDB::ops::UpdateRows::apply(inout structure : RDB::Structure){
}

/**
 * INSERT ROWS
 * This operation copy collection of columns.
 * That means insert data from source table to target table.
 * Columns in source and target table must have same name and same order.
 * @restriction : columns with @sourceColumnNames must exists in source table
 * @restriction : columns with @sourceColumnNames must exists in target table
 * @restriction : columns must have same name and column type
 */
query RDB::ops::InsertRows::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.areColumnsInTable(self.owningSchemaName, self.sourceTableName, self.sourceColumnsNames)
		   and structure.areColumnsInTable(self.owningSchemaName, self.targetTableName, self.sourceColumnsNames)
		   and structure.areSameColumnsTypes(self.owningSchemaName, self.sourceTableName, self.sourceColumnsNames, self.targetTableName);
}

helper RDB::ops::InsertRows::apply(inout structure : RDB::Structure) {

}

/**
 * GENERATE SEQUENCE NUMBERS
 * This operation structureerate new sequence numbers to defined columns.
 * @restriction : column with @columnName must exists in defined table
 * @restriction : sequence with @sequenceName must exists in schema
 */
query RDB::ops::GenerateSequenceNumbers::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isColumnInTable(self.owningSchemaName, self.tableName, self.columnName)
		   and structure.isSequenceInSchema(self.owningSchemaName,self.sequenceName);
}

helper RDB::ops::GenerateSequenceNumbers::apply(inout structure : RDB::Structure) {

}

/**
 * HAS NO OWN INSTANCES
 * This operation check if table has some own rows.
 * @restriction : table with @tableName must exists in structureeration
 * @restriction : child tables with @descendantNames must exists in structureeration
 */
query RDB::ops::HasNoOwnInstances::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isTableInSchema(self.owningSchemaName, self.tableName)
		   and structure.areTablesInSchema(self.owningSchemaName, self.descendantsNames);
}

helper RDB::ops::HasNoOwnInstances::apply(inout structure : RDB::Structure) {

}

/**
 * HAS NO INSTANCES
 * This operation check if table has any rows.
 * @restriction : table with @tableName must exists in structureeration
 */
query RDB::ops::HasNoInstances::isValid(structure : RDB::Structure, inout errorLog : ErrorLog, operationIndex : Integer) : Boolean {
	return structure.isTableInSchema(self.owningSchemaName, self.tableName);
}

helper RDB::ops::HasNoInstances::apply(inout structure : RDB::Structure) {

}


/********************************************************************************
 *								CHECKS AND LOGGING									*
 ********************************************************************************/
helper checkExistSchema(schemaName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean{
	var existSchema : Boolean := structure.containsSchema(schemaName);
	if(not existSchema)then{
		var errorMessage : String := "Schema " + schemaName + " doesn't exist";
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return existSchema;	
}

helper checkNotExistSchema(schemaName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean{
	var notExistSchema : Boolean := not (structure.containsSchema(schemaName));
	if(not notExistSchema)then{
		var errorMessage : String := "Schema " + schemaName + " exist already";
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return notExistSchema;	
}

helper checkExistTable(owningSchemaName : String, tableName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean{
	if(not structure.containsSchema(owningSchemaName))then{
		return false;
	}endif;
	var existTable : Boolean := structure.isTableInSchema(owningSchemaName, tableName);
	if(not existTable)then{
		var errorMessage : String := "Table " + tableName + " doesn't exists in schema " + owningSchemaName;
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return existTable;
}

helper checkNotExistTable(owningSchemaName : String, tableName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean{
	if(not structure.containsSchema(owningSchemaName))then{
		return false;
	}endif;
	var notExistTable : Boolean := not structure.isTableInSchema(owningSchemaName, tableName);
	if(not notExistTable)then{
		var errorMessage : String := "Table " + tableName + " exists in schema " + owningSchemaName;
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return notExistTable;
}

helper checkNotExistSequence(owningSchemaName : String, sequenceName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean{
	if(not structure.containsSchema(owningSchemaName))then{
		return false;
	}endif;
	var notExistSequence : Boolean := not structure.isSequenceInSchema(owningSchemaName, sequenceName);
	if(not notExistSequence)then{
		var errorMessage : String := "Sequence " + sequenceName + " already exists";
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return notExistSequence;
}

helper checkNotExistIndex(owningSchemaName : String, indexName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean {
	if(not structure.containsSchema(owningSchemaName))then{
		return false;
	}endif;
	var notExistIndex : Boolean := not structure.isIndexInSchema(owningSchemaName, indexName);
	if(notExistIndex)then{
		var errorMessage : String := "Index " + indexName + " already exists in schema " + owningSchemaName;
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return notExistIndex;
}

helper checkNotExistColumn(owningSchemaName : String, tableName : String, columnName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean {
	if(not structure.containsSchema(owningSchemaName) or not structure.isTableInSchema(owningSchemaName, tableName))then{
		return false;
	}endif;
	var notIsColumnInTable : Boolean := not structure.isColumnInTable(owningSchemaName, tableName, columnName);
	if(not notIsColumnInTable)then{
		var errorMessage : String := "Column is not contained in table " + tableName + " in schema " + owningSchemaName;
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return notIsColumnInTable;
}

helper checkExistColumn(owningSchemaName : String, tableName : String, columnName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean {
	if(not structure.containsSchema(owningSchemaName) or not structure.isTableInSchema(owningSchemaName, tableName))then{
		return false;
	}endif;
	var isColumnInTable : Boolean := structure.isColumnInTable(owningSchemaName, tableName, columnName);
	if(not isColumnInTable)then{
		var errorMessage : String := "Column is not contained in table " + tableName + " in schema " + owningSchemaName;
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return isColumnInTable;
}

helper checkNotExistConstraint(owningSchemaName : String, tableName : String, constraintName : String, structure : Structure, inout errorLog : ErrorLog, operationIndex : Integer, transformationId : String) : Boolean {
	if(not structure.containsSchema(owningSchemaName) or not structure.isTableInSchema(owningSchemaName, tableName))then {
		return false;
	}endif;
	var notExistConstraint : Boolean := not structure.containsConstraint(owningSchemaName, tableName, constraintName);
	if(not notExistConstraint)then{
		var errorMessage : String := "Constraint called " + constraintName + " exists";
		errorLog.errors += _evolutionError(operationIndex, errorMessage, transformationId);
	}endif;
	return notExistConstraint;	
}
