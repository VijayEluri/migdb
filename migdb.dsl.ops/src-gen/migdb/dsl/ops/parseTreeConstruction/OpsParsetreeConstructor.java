/*
* generated by Xtext
*/
package migdb.dsl.ops.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import migdb.dsl.ops.services.OpsGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class OpsParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private OpsGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModelRoot_OperationsParserRuleCall(this, this, 0, inst);
			case 1: return new Operations_OperationsAssignment(this, this, 1, inst);
			case 2: return new ModelOperation_Alternatives(this, this, 2, inst);
			case 3: return new AtomicOperation_Alternatives(this, this, 3, inst);
			case 4: return new DecomposableOperation_Alternatives(this, this, 4, inst);
			case 5: return new AddPrimitiveClass_Group(this, this, 5, inst);
			case 6: return new AddEmbeddedClass_Group(this, this, 6, inst);
			case 7: return new AddStandardClass_Group(this, this, 7, inst);
			case 8: return new RenameEntity_Group(this, this, 8, inst);
			case 9: return new SetParent_Group(this, this, 9, inst);
			case 10: return new SetAbstract_Group(this, this, 10, inst);
			case 11: return new RemoveEntity_Group(this, this, 11, inst);
			case 12: return new AddProperty_Group(this, this, 12, inst);
			case 13: return new RenameProperty_Group(this, this, 13, inst);
			case 14: return new RemoveProperty_Group(this, this, 14, inst);
			case 15: return new SetType_Group(this, this, 15, inst);
			case 16: return new SetOpposite_Group(this, this, 16, inst);
			case 17: return new SetBounds_Group(this, this, 17, inst);
			case 18: return new SetOrdered_Group(this, this, 18, inst);
			case 19: return new SetUnique_Group(this, this, 19, inst);
			case 20: return new CopyProperty_Group(this, this, 20, inst);
			case 21: return new MoveProperty_Group(this, this, 21, inst);
			case 22: return new ExtractClass_Group(this, this, 22, inst);
			case 23: return new ExtractParent_Group(this, this, 23, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule ModelRoot ****************
 *
 * ModelRoot returns app::ModelRoot:
 * 	Operations;
 *
 **/

// Operations
protected class ModelRoot_OperationsParserRuleCall extends RuleCallToken {
	
	public ModelRoot_OperationsParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelRootAccess().getOperationsParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Operations_OperationsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOperationsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Operations_OperationsAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ModelRoot ****************/


/************ begin Rule Operations ****************
 *
 * Operations returns app::Operations:
 * 	operations+=ModelOperation*;
 *
 **/

// operations+=ModelOperation*
protected class Operations_OperationsAssignment extends AssignmentToken  {
	
	public Operations_OperationsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOperationsAccess().getOperationsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModelOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelOperationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOperationsAccess().getOperationsModelOperationParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Operations_OperationsAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Operations ****************/


/************ begin Rule ModelOperation ****************
 *
 * ModelOperation returns ops::ModelOperation:
 * 	AtomicOperation | DecomposableOperation;
 *
 **/

// AtomicOperation | DecomposableOperation
protected class ModelOperation_Alternatives extends AlternativesToken {

	public ModelOperation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelOperationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModelOperation_AtomicOperationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ModelOperation_DecomposableOperationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddEmbeddedClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddPrimitiveClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddPropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddStandardClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCopyPropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExtractClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExtractParentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMovePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveEntityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemovePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRenameEntityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRenamePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAbstractRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetBoundsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetOppositeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetOrderedRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetParentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetUniqueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AtomicOperation
protected class ModelOperation_AtomicOperationParserRuleCall_0 extends RuleCallToken {
	
	public ModelOperation_AtomicOperationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelOperationAccess().getAtomicOperationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddEmbeddedClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddPrimitiveClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddPropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddStandardClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCopyPropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMovePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveEntityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemovePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRenameEntityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRenamePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAbstractRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetBoundsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetOppositeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetOrderedRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetParentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetUniqueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AtomicOperation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DecomposableOperation
protected class ModelOperation_DecomposableOperationParserRuleCall_1 extends RuleCallToken {
	
	public ModelOperation_DecomposableOperationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelOperationAccess().getDecomposableOperationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecomposableOperation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtractClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExtractParentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DecomposableOperation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ModelOperation ****************/


/************ begin Rule AtomicOperation ****************
 *
 * AtomicOperation returns ops::AtomicOperation:
 * 	AddPrimitiveClass | AddEmbeddedClass | AddStandardClass | RenameEntity | SetParent | SetAbstract | RemoveEntity |
 * 	AddProperty | RenameProperty | RemoveProperty | SetType | SetOpposite | SetBounds | SetOrdered | SetUnique |
 * 	CopyProperty | MoveProperty;
 *
 **/

// AddPrimitiveClass | AddEmbeddedClass | AddStandardClass | RenameEntity | SetParent | SetAbstract | RemoveEntity |
// AddProperty | RenameProperty | RemoveProperty | SetType | SetOpposite | SetBounds | SetOrdered | SetUnique |
// CopyProperty | MoveProperty
protected class AtomicOperation_Alternatives extends AlternativesToken {

	public AtomicOperation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicOperation_AddPrimitiveClassParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtomicOperation_AddEmbeddedClassParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AtomicOperation_AddStandardClassParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new AtomicOperation_RenameEntityParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new AtomicOperation_SetParentParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new AtomicOperation_SetAbstractParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new AtomicOperation_RemoveEntityParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new AtomicOperation_AddPropertyParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new AtomicOperation_RenamePropertyParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new AtomicOperation_RemovePropertyParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new AtomicOperation_SetTypeParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new AtomicOperation_SetOppositeParserRuleCall_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new AtomicOperation_SetBoundsParserRuleCall_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new AtomicOperation_SetOrderedParserRuleCall_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new AtomicOperation_SetUniqueParserRuleCall_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new AtomicOperation_CopyPropertyParserRuleCall_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new AtomicOperation_MovePropertyParserRuleCall_16(lastRuleCallOrigin, this, 16, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddEmbeddedClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddPrimitiveClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddPropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAddStandardClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCopyPropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMovePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveEntityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemovePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRenameEntityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRenamePropertyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAbstractRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetBoundsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetOppositeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetOrderedRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetParentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetUniqueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AddPrimitiveClass
protected class AtomicOperation_AddPrimitiveClassParserRuleCall_0 extends RuleCallToken {
	
	public AtomicOperation_AddPrimitiveClassParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getAddPrimitiveClassParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddPrimitiveClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddPrimitiveClassRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AddPrimitiveClass_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AddEmbeddedClass
protected class AtomicOperation_AddEmbeddedClassParserRuleCall_1 extends RuleCallToken {
	
	public AtomicOperation_AddEmbeddedClassParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getAddEmbeddedClassParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddEmbeddedClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddEmbeddedClassRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AddEmbeddedClass_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AddStandardClass
protected class AtomicOperation_AddStandardClassParserRuleCall_2 extends RuleCallToken {
	
	public AtomicOperation_AddStandardClassParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getAddStandardClassParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddStandardClassRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AddStandardClass_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RenameEntity
protected class AtomicOperation_RenameEntityParserRuleCall_3 extends RuleCallToken {
	
	public AtomicOperation_RenameEntityParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getRenameEntityParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameEntity_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRenameEntityRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RenameEntity_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetParent
protected class AtomicOperation_SetParentParserRuleCall_4 extends RuleCallToken {
	
	public AtomicOperation_SetParentParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetParentParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetParentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetParent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetAbstract
protected class AtomicOperation_SetAbstractParserRuleCall_5 extends RuleCallToken {
	
	public AtomicOperation_SetAbstractParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetAbstractParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAbstract_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetAbstractRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetAbstract_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RemoveEntity
protected class AtomicOperation_RemoveEntityParserRuleCall_6 extends RuleCallToken {
	
	public AtomicOperation_RemoveEntityParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getRemoveEntityParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveEntity_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRemoveEntityRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RemoveEntity_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AddProperty
protected class AtomicOperation_AddPropertyParserRuleCall_7 extends RuleCallToken {
	
	public AtomicOperation_AddPropertyParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getAddPropertyParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddPropertyRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AddProperty_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RenameProperty
protected class AtomicOperation_RenamePropertyParserRuleCall_8 extends RuleCallToken {
	
	public AtomicOperation_RenamePropertyParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getRenamePropertyParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRenamePropertyRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RenameProperty_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RemoveProperty
protected class AtomicOperation_RemovePropertyParserRuleCall_9 extends RuleCallToken {
	
	public AtomicOperation_RemovePropertyParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getRemovePropertyParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRemovePropertyRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RemoveProperty_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetType
protected class AtomicOperation_SetTypeParserRuleCall_10 extends RuleCallToken {
	
	public AtomicOperation_SetTypeParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetTypeParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetOpposite
protected class AtomicOperation_SetOppositeParserRuleCall_11 extends RuleCallToken {
	
	public AtomicOperation_SetOppositeParserRuleCall_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetOppositeParserRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetOppositeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetOpposite_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetBounds
protected class AtomicOperation_SetBoundsParserRuleCall_12 extends RuleCallToken {
	
	public AtomicOperation_SetBoundsParserRuleCall_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetBoundsParserRuleCall_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetBoundsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetBounds_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetOrdered
protected class AtomicOperation_SetOrderedParserRuleCall_13 extends RuleCallToken {
	
	public AtomicOperation_SetOrderedParserRuleCall_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetOrderedParserRuleCall_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetOrderedRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetOrdered_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetUnique
protected class AtomicOperation_SetUniqueParserRuleCall_14 extends RuleCallToken {
	
	public AtomicOperation_SetUniqueParserRuleCall_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getSetUniqueParserRuleCall_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetUniqueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetUnique_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CopyProperty
protected class AtomicOperation_CopyPropertyParserRuleCall_15 extends RuleCallToken {
	
	public AtomicOperation_CopyPropertyParserRuleCall_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getCopyPropertyParserRuleCall_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCopyPropertyRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CopyProperty_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MoveProperty
protected class AtomicOperation_MovePropertyParserRuleCall_16 extends RuleCallToken {
	
	public AtomicOperation_MovePropertyParserRuleCall_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicOperationAccess().getMovePropertyParserRuleCall_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMovePropertyRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MoveProperty_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AtomicOperation ****************/


/************ begin Rule DecomposableOperation ****************
 *
 * DecomposableOperation returns ops::DecomposableOperation:
 * 	ExtractClass | ExtractParent;
 *
 **/

// ExtractClass | ExtractParent
protected class DecomposableOperation_Alternatives extends AlternativesToken {

	public DecomposableOperation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDecomposableOperationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecomposableOperation_ExtractClassParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DecomposableOperation_ExtractParentParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtractClassRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExtractParentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExtractClass
protected class DecomposableOperation_ExtractClassParserRuleCall_0 extends RuleCallToken {
	
	public DecomposableOperation_ExtractClassParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDecomposableOperationAccess().getExtractClassParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtractClassRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExtractClass_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExtractParent
protected class DecomposableOperation_ExtractParentParserRuleCall_1 extends RuleCallToken {
	
	public DecomposableOperation_ExtractParentParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDecomposableOperationAccess().getExtractParentParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtractParentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExtractParent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule DecomposableOperation ****************/


/************ begin Rule AddPrimitiveClass ****************
 *
 * / **
 *  * Atomic Operations:
 *  * / //addPrimitiveClass(name, boolean) adds new primitive class by selected type
 * AddPrimitiveClass returns ops::AddPrimitiveClass:
 * 	name=ID "=" / *'new'* / "primitive" primitiveType=PrimitiveType;
 *
 **/

// name=ID "=" / *'new'* / "primitive" primitiveType=PrimitiveType
protected class AddPrimitiveClass_Group extends GroupToken {
	
	public AddPrimitiveClass_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddPrimitiveClassAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddPrimitiveClass_PrimitiveTypeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddPrimitiveClassRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class AddPrimitiveClass_NameAssignment_0 extends AssignmentToken  {
	
	public AddPrimitiveClass_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPrimitiveClassAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPrimitiveClassAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPrimitiveClassAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class AddPrimitiveClass_EqualsSignKeyword_1 extends KeywordToken  {
	
	public AddPrimitiveClass_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPrimitiveClassAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddPrimitiveClass_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// / *'new'* / "primitive"
protected class AddPrimitiveClass_PrimitiveKeyword_2 extends KeywordToken  {
	
	public AddPrimitiveClass_PrimitiveKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPrimitiveClassAccess().getPrimitiveKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddPrimitiveClass_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// primitiveType=PrimitiveType
protected class AddPrimitiveClass_PrimitiveTypeAssignment_3 extends AssignmentToken  {
	
	public AddPrimitiveClass_PrimitiveTypeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPrimitiveClassAccess().getPrimitiveTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddPrimitiveClass_PrimitiveKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("primitiveType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("primitiveType");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getAddPrimitiveClassAccess().getPrimitiveTypePrimitiveTypeEnumRuleCall_3_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getAddPrimitiveClassAccess().getPrimitiveTypePrimitiveTypeEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AddPrimitiveClass ****************/


/************ begin Rule AddEmbeddedClass ****************
 *
 * //addEmbeddedClass(name) adds new embedded class
 * AddEmbeddedClass returns ops::AddEmbeddedClass:
 * 	name=ID "=" / *'new'* / "embedded";
 *
 **/

// name=ID "=" / *'new'* / "embedded"
protected class AddEmbeddedClass_Group extends GroupToken {
	
	public AddEmbeddedClass_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddEmbeddedClassAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddEmbeddedClass_EmbeddedKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddEmbeddedClassRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class AddEmbeddedClass_NameAssignment_0 extends AssignmentToken  {
	
	public AddEmbeddedClass_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddEmbeddedClassAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddEmbeddedClassAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddEmbeddedClassAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class AddEmbeddedClass_EqualsSignKeyword_1 extends KeywordToken  {
	
	public AddEmbeddedClass_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddEmbeddedClassAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddEmbeddedClass_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// / *'new'* / "embedded"
protected class AddEmbeddedClass_EmbeddedKeyword_2 extends KeywordToken  {
	
	public AddEmbeddedClass_EmbeddedKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddEmbeddedClassAccess().getEmbeddedKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddEmbeddedClass_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AddEmbeddedClass ****************/


/************ begin Rule AddStandardClass ****************
 *
 * //addStandardClass(name, boolean, InheritanceType)
 * //adds StandardClass with abstract flag and given maping type in DB
 * AddStandardClass returns ops::AddStandardClass:
 * 	name=ID "=" / *'new'* / (isAbstract?="abstract" & inheritanceType=InheritanceType?)? "class";
 *
 **/

// name=ID "=" / *'new'* / (isAbstract?="abstract" & inheritanceType=InheritanceType?)? "class"
protected class AddStandardClass_Group extends GroupToken {
	
	public AddStandardClass_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_ClassKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddStandardClassRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class AddStandardClass_NameAssignment_0 extends AssignmentToken  {
	
	public AddStandardClass_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddStandardClassAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddStandardClassAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class AddStandardClass_EqualsSignKeyword_1 extends KeywordToken  {
	
	public AddStandardClass_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (isAbstract?="abstract" & inheritanceType=InheritanceType?)?
protected class AddStandardClass_UnorderedGroup_2 extends UnorderedGroupToken {
	
	public AddStandardClass_UnorderedGroup_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getUnorderedGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_InheritanceTypeAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddStandardClass_IsAbstractAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isAbstract?="abstract"
protected class AddStandardClass_IsAbstractAssignment_2_0 extends AssignmentToken  {
	
	public AddStandardClass_IsAbstractAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getIsAbstractAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isAbstract",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isAbstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAddStandardClassAccess().getIsAbstractAbstractKeyword_2_0_0();
			return obj;
		}
		return null;
	}

}

// inheritanceType=InheritanceType?
protected class AddStandardClass_InheritanceTypeAssignment_2_1 extends AssignmentToken  {
	
	public AddStandardClass_InheritanceTypeAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getInheritanceTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_IsAbstractAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inheritanceType",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inheritanceType");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getAddStandardClassAccess().getInheritanceTypeInheritanceTypeEnumRuleCall_2_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getAddStandardClassAccess().getInheritanceTypeInheritanceTypeEnumRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "class"
protected class AddStandardClass_ClassKeyword_3 extends KeywordToken  {
	
	public AddStandardClass_ClassKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddStandardClassAccess().getClassKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddStandardClass_UnorderedGroup_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddStandardClass_EqualsSignKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule AddStandardClass ****************/


/************ begin Rule RenameEntity ****************
 *
 * //renameEntity(A, B) renames entity A to B
 * RenameEntity returns ops::RenameEntity: //	'set'
 * 	name=ID "->" newName=ID;
 *
 **/

// //	'set'
// name=ID "->" newName=ID
protected class RenameEntity_Group extends GroupToken {
	
	public RenameEntity_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenameEntityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameEntity_NewNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRenameEntityRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'set'
// name=ID
protected class RenameEntity_NameAssignment_0 extends AssignmentToken  {
	
	public RenameEntity_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenameEntityAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRenameEntityAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRenameEntityAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class RenameEntity_HyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public RenameEntity_HyphenMinusGreaterThanSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenameEntityAccess().getHyphenMinusGreaterThanSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameEntity_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// newName=ID
protected class RenameEntity_NewNameAssignment_2 extends AssignmentToken  {
	
	public RenameEntity_NewNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenameEntityAccess().getNewNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameEntity_HyphenMinusGreaterThanSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("newName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("newName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRenameEntityAccess().getNewNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRenameEntityAccess().getNewNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RenameEntity ****************/


/************ begin Rule SetParent ****************
 *
 * //setParent(A, B) sets A new parent B
 * SetParent returns ops::SetParent: //	'set'
 * //	 name=ID (('child-of' parentName=ID) | 'not child-of')
 * 	name=ID ("<" parentName=ID | "!<");
 *
 **/

// //	'set'
// //	 name=ID (('child-of' parentName=ID) | 'not child-of')
// name=ID ("<" parentName=ID | "!<")
protected class SetParent_Group extends GroupToken {
	
	public SetParent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetParentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetParentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'set'
// //	 name=ID (('child-of' parentName=ID) | 'not child-of')
// name=ID
protected class SetParent_NameAssignment_0 extends AssignmentToken  {
	
	public SetParent_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetParentAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetParentAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetParentAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "<" parentName=ID | "!<"
protected class SetParent_Alternatives_1 extends AlternativesToken {

	public SetParent_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetParentAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetParent_ExclamationMarkLessThanSignKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "<" parentName=ID
protected class SetParent_Group_1_0 extends GroupToken {
	
	public SetParent_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetParentAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_ParentNameAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<"
protected class SetParent_LessThanSignKeyword_1_0_0 extends KeywordToken  {
	
	public SetParent_LessThanSignKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetParentAccess().getLessThanSignKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parentName=ID
protected class SetParent_ParentNameAssignment_1_0_1 extends AssignmentToken  {
	
	public SetParent_ParentNameAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetParentAccess().getParentNameAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_LessThanSignKeyword_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parentName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parentName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetParentAccess().getParentNameIDTerminalRuleCall_1_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetParentAccess().getParentNameIDTerminalRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// "!<"
protected class SetParent_ExclamationMarkLessThanSignKeyword_1_1 extends KeywordToken  {
	
	public SetParent_ExclamationMarkLessThanSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetParentAccess().getExclamationMarkLessThanSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetParent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SetParent ****************/


/************ begin Rule SetAbstract ****************
 *
 * //setAbstract(name, boolean) sets/unsets given class as abstract
 * SetAbstract returns ops::SetAbstract: //	'set'
 * 	name=ID (isAbstract?="abstract" | "!abstract");
 *
 **/

// //	'set'
// name=ID (isAbstract?="abstract" | "!abstract")
protected class SetAbstract_Group extends GroupToken {
	
	public SetAbstract_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetAbstractAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAbstract_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetAbstractRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'set'
// name=ID
protected class SetAbstract_NameAssignment_0 extends AssignmentToken  {
	
	public SetAbstract_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAbstractAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetAbstractAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetAbstractAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// isAbstract?="abstract" | "!abstract"
protected class SetAbstract_Alternatives_1 extends AlternativesToken {

	public SetAbstract_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetAbstractAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAbstract_IsAbstractAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetAbstract_AbstractKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isAbstract?="abstract"
protected class SetAbstract_IsAbstractAssignment_1_0 extends AssignmentToken  {
	
	public SetAbstract_IsAbstractAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAbstractAccess().getIsAbstractAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAbstract_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isAbstract",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isAbstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSetAbstractAccess().getIsAbstractAbstractKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// "!abstract"
protected class SetAbstract_AbstractKeyword_1_1 extends KeywordToken  {
	
	public SetAbstract_AbstractKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetAbstractAccess().getAbstractKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAbstract_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SetAbstract ****************/


/************ begin Rule RemoveEntity ****************
 *
 * //removeEntity(name) removes entity (GeneralClass, PrimitiveClass and all its subtypes)
 * RemoveEntity returns ops::RemoveEntity: //	'delete'
 * 	"!" name=ID;
 *
 **/

// //	'delete'
// "!" name=ID
protected class RemoveEntity_Group extends GroupToken {
	
	public RemoveEntity_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRemoveEntityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveEntity_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRemoveEntityRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'delete'
// "!"
protected class RemoveEntity_ExclamationMarkKeyword_0 extends KeywordToken  {
	
	public RemoveEntity_ExclamationMarkKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRemoveEntityAccess().getExclamationMarkKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class RemoveEntity_NameAssignment_1 extends AssignmentToken  {
	
	public RemoveEntity_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRemoveEntityAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveEntity_ExclamationMarkKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRemoveEntityAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRemoveEntityAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RemoveEntity ****************/


/************ begin Rule AddProperty ****************
 *
 * //addProperty(owningClass, propertyName, propertyType) adds property and its type to a class
 * AddProperty returns ops::AddProperty:
 * 	owningClassName=ID "+=" (("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?) name=ID ":" type=ID
 * 	("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")? ("=" defaultValue=ID)?;
 *
 **/

// owningClassName=ID "+=" (("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?) name=ID ":" type=ID
// ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")? ("=" defaultValue=ID)?
protected class AddProperty_Group extends GroupToken {
	
	public AddProperty_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddProperty_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AddProperty_TypeAssignment_5(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddPropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// owningClassName=ID
protected class AddProperty_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public AddProperty_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "+="
protected class AddProperty_PlusSignEqualsSignKeyword_1 extends KeywordToken  {
	
	public AddProperty_PlusSignEqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getPlusSignEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?
protected class AddProperty_UnorderedGroup_2 extends UnorderedGroupToken {
	
	public AddProperty_UnorderedGroup_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getUnorderedGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddProperty_Alternatives_2_0(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AddProperty_PlusSignEqualsSignKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ("!ordered" | isOrdered?="ordered")?
protected class AddProperty_Alternatives_2_0 extends AlternativesToken {

	public AddProperty_Alternatives_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getAlternatives_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_IsOrderedAssignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// isOrdered?="ordered"
protected class AddProperty_IsOrderedAssignment_2_0_1 extends AssignmentToken  {
	
	public AddProperty_IsOrderedAssignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getIsOrderedAssignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_PlusSignEqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isOrdered",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isOrdered");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAddPropertyAccess().getIsOrderedOrderedKeyword_2_0_1_0();
			return obj;
		}
		return null;
	}

}


// ("!unique" | isUnique?="unique")?
protected class AddProperty_Alternatives_2_1 extends AlternativesToken {

	public AddProperty_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_IsUniqueAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// isUnique?="unique"
protected class AddProperty_IsUniqueAssignment_2_1_1 extends AssignmentToken  {
	
	public AddProperty_IsUniqueAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getIsUniqueAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_Alternatives_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddProperty_PlusSignEqualsSignKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isUnique",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isUnique");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAddPropertyAccess().getIsUniqueUniqueKeyword_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// name=ID
protected class AddProperty_NameAssignment_3 extends AssignmentToken  {
	
	public AddProperty_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_UnorderedGroup_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class AddProperty_ColonKeyword_4 extends KeywordToken  {
	
	public AddProperty_ColonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getColonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=ID
protected class AddProperty_TypeAssignment_5 extends AssignmentToken  {
	
	public AddProperty_TypeAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getTypeAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_ColonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getTypeIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getTypeIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?
protected class AddProperty_Group_6 extends GroupToken {
	
	public AddProperty_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_RightSquareBracketKeyword_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class AddProperty_LeftSquareBracketKeyword_6_0 extends KeywordToken  {
	
	public AddProperty_LeftSquareBracketKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getLeftSquareBracketKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_TypeAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=INT | lowerBound=INT ".." upperBound=INT?
protected class AddProperty_Alternatives_6_1 extends AlternativesToken {

	public AddProperty_Alternatives_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getAlternatives_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_UpperBoundAssignment_6_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddProperty_Group_6_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// upperBound=INT
protected class AddProperty_UpperBoundAssignment_6_1_0 extends AssignmentToken  {
	
	public AddProperty_UpperBoundAssignment_6_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getUpperBoundAssignment_6_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_LeftSquareBracketKeyword_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upperBound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upperBound");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getUpperBoundINTTerminalRuleCall_6_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getUpperBoundINTTerminalRuleCall_6_1_0_0();
			return obj;
		}
		return null;
	}

}

// lowerBound=INT ".." upperBound=INT?
protected class AddProperty_Group_6_1_1 extends GroupToken {
	
	public AddProperty_Group_6_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getGroup_6_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_UpperBoundAssignment_6_1_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddProperty_FullStopFullStopKeyword_6_1_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// lowerBound=INT
protected class AddProperty_LowerBoundAssignment_6_1_1_0 extends AssignmentToken  {
	
	public AddProperty_LowerBoundAssignment_6_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getLowerBoundAssignment_6_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_LeftSquareBracketKeyword_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lowerBound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lowerBound");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getLowerBoundINTTerminalRuleCall_6_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getLowerBoundINTTerminalRuleCall_6_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// ".."
protected class AddProperty_FullStopFullStopKeyword_6_1_1_1 extends KeywordToken  {
	
	public AddProperty_FullStopFullStopKeyword_6_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getFullStopFullStopKeyword_6_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_LowerBoundAssignment_6_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=INT?
protected class AddProperty_UpperBoundAssignment_6_1_1_2 extends AssignmentToken  {
	
	public AddProperty_UpperBoundAssignment_6_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getUpperBoundAssignment_6_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_FullStopFullStopKeyword_6_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upperBound",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upperBound");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getUpperBoundINTTerminalRuleCall_6_1_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getUpperBoundINTTerminalRuleCall_6_1_1_2_0();
			return obj;
		}
		return null;
	}

}



// "]"
protected class AddProperty_RightSquareBracketKeyword_6_2 extends KeywordToken  {
	
	public AddProperty_RightSquareBracketKeyword_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getRightSquareBracketKeyword_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_Alternatives_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ("=" defaultValue=ID)?
protected class AddProperty_Group_7 extends GroupToken {
	
	public AddProperty_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_DefaultValueAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class AddProperty_EqualsSignKeyword_7_0 extends KeywordToken  {
	
	public AddProperty_EqualsSignKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getEqualsSignKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AddProperty_TypeAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// defaultValue=ID
protected class AddProperty_DefaultValueAssignment_7_1 extends AssignmentToken  {
	
	public AddProperty_DefaultValueAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddPropertyAccess().getDefaultValueAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AddProperty_EqualsSignKeyword_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defaultValue",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defaultValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddPropertyAccess().getDefaultValueIDTerminalRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddPropertyAccess().getDefaultValueIDTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule AddProperty ****************/


/************ begin Rule RenameProperty ****************
 *
 * //renamePropety(A, id, identifier) renames A's property id to identifier
 * RenameProperty returns ops::RenameProperty: //	'set'
 * 	owningClassName=ID "." name=ID "->" newName=ID;
 *
 **/

// //	'set'
// owningClassName=ID "." name=ID "->" newName=ID
protected class RenameProperty_Group extends GroupToken {
	
	public RenameProperty_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRenamePropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameProperty_NewNameAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRenamePropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'set'
// owningClassName=ID
protected class RenameProperty_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public RenameProperty_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamePropertyAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRenamePropertyAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRenamePropertyAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class RenameProperty_FullStopKeyword_1 extends KeywordToken  {
	
	public RenameProperty_FullStopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamePropertyAccess().getFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameProperty_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class RenameProperty_NameAssignment_2 extends AssignmentToken  {
	
	public RenameProperty_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamePropertyAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameProperty_FullStopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRenamePropertyAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRenamePropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class RenameProperty_HyphenMinusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public RenameProperty_HyphenMinusGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRenamePropertyAccess().getHyphenMinusGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameProperty_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// newName=ID
protected class RenameProperty_NewNameAssignment_4 extends AssignmentToken  {
	
	public RenameProperty_NewNameAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRenamePropertyAccess().getNewNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RenameProperty_HyphenMinusGreaterThanSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("newName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("newName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRenamePropertyAccess().getNewNameIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRenamePropertyAccess().getNewNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RenameProperty ****************/


/************ begin Rule RemoveProperty ****************
 *
 * //removePropety(A, id) removes A's property id
 * RemoveProperty returns ops::RemoveProperty:
 * 	owningClassName=ID "-=" name=ID;
 *
 **/

// owningClassName=ID "-=" name=ID
protected class RemoveProperty_Group extends GroupToken {
	
	public RemoveProperty_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRemovePropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProperty_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRemovePropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// owningClassName=ID
protected class RemoveProperty_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public RemoveProperty_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRemovePropertyAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRemovePropertyAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRemovePropertyAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "-="
protected class RemoveProperty_HyphenMinusEqualsSignKeyword_1 extends KeywordToken  {
	
	public RemoveProperty_HyphenMinusEqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRemovePropertyAccess().getHyphenMinusEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProperty_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class RemoveProperty_NameAssignment_2 extends AssignmentToken  {
	
	public RemoveProperty_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRemovePropertyAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProperty_HyphenMinusEqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRemovePropertyAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRemovePropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RemoveProperty ****************/


/************ begin Rule SetType ****************
 *
 * //setType(A, id, int) changes type of A's propety id to int
 * SetType returns ops::SetType: //	'set'
 * 	owningClassName=ID "." name=ID ":" type=ID;
 *
 **/

// //	'set'
// owningClassName=ID "." name=ID ":" type=ID
protected class SetType_Group extends GroupToken {
	
	public SetType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetType_TypeAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'set'
// owningClassName=ID
protected class SetType_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public SetType_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetTypeAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetTypeAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetTypeAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class SetType_FullStopKeyword_1 extends KeywordToken  {
	
	public SetType_FullStopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetTypeAccess().getFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetType_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class SetType_NameAssignment_2 extends AssignmentToken  {
	
	public SetType_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetTypeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetType_FullStopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetTypeAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetTypeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class SetType_ColonKeyword_3 extends KeywordToken  {
	
	public SetType_ColonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetTypeAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetType_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=ID
protected class SetType_TypeAssignment_4 extends AssignmentToken  {
	
	public SetType_TypeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetTypeAccess().getTypeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetType_ColonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetTypeAccess().getTypeIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetTypeAccess().getTypeIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SetType ****************/


/************ begin Rule SetOpposite ****************
 *
 * //setOpposite(A, key, B, id, true) creates link between A's key and B's id
 * //setOpposite(A, key, B, id, false) destroys link between A's key and B's id
 * SetOpposite returns ops::SetOpposite: //	'set'
 * 	firstClassName=ID "." firstPropertyName=ID (isOpposite?="<->" | "!<->") secondClassName=ID "." secondPropertyName=ID;
 *
 **/

// //	'set'
// firstClassName=ID "." firstPropertyName=ID (isOpposite?="<->" | "!<->") secondClassName=ID "." secondPropertyName=ID
protected class SetOpposite_Group extends GroupToken {
	
	public SetOpposite_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_SecondPropertyNameAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetOppositeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	'set'
// firstClassName=ID
protected class SetOpposite_FirstClassNameAssignment_0 extends AssignmentToken  {
	
	public SetOpposite_FirstClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getFirstClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("firstClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("firstClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetOppositeAccess().getFirstClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetOppositeAccess().getFirstClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class SetOpposite_FullStopKeyword_1 extends KeywordToken  {
	
	public SetOpposite_FullStopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_FirstClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// firstPropertyName=ID
protected class SetOpposite_FirstPropertyNameAssignment_2 extends AssignmentToken  {
	
	public SetOpposite_FirstPropertyNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getFirstPropertyNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_FullStopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("firstPropertyName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("firstPropertyName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetOppositeAccess().getFirstPropertyNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetOppositeAccess().getFirstPropertyNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// isOpposite?="<->" | "!<->"
protected class SetOpposite_Alternatives_3 extends AlternativesToken {

	public SetOpposite_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_IsOppositeAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetOpposite_ExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isOpposite?="<->"
protected class SetOpposite_IsOppositeAssignment_3_0 extends AssignmentToken  {
	
	public SetOpposite_IsOppositeAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getIsOppositeAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_FirstPropertyNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isOpposite",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isOpposite");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSetOppositeAccess().getIsOppositeLessThanSignHyphenMinusGreaterThanSignKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// "!<->"
protected class SetOpposite_ExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1 extends KeywordToken  {
	
	public SetOpposite_ExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_FirstPropertyNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// secondClassName=ID
protected class SetOpposite_SecondClassNameAssignment_4 extends AssignmentToken  {
	
	public SetOpposite_SecondClassNameAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getSecondClassNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetOppositeAccess().getSecondClassNameIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetOppositeAccess().getSecondClassNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class SetOpposite_FullStopKeyword_5 extends KeywordToken  {
	
	public SetOpposite_FullStopKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getFullStopKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_SecondClassNameAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// secondPropertyName=ID
protected class SetOpposite_SecondPropertyNameAssignment_6 extends AssignmentToken  {
	
	public SetOpposite_SecondPropertyNameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOppositeAccess().getSecondPropertyNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOpposite_FullStopKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondPropertyName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondPropertyName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetOppositeAccess().getSecondPropertyNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetOppositeAccess().getSecondPropertyNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SetOpposite ****************/


/************ begin Rule SetBounds ****************
 *
 * //setBounds(A, list, 0, 50) sets bounds to A's property list to 0,50 (lower, upper)
 * SetBounds returns ops::SetBounds: //set
 * 	owningClassName=ID "." name=ID ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?;
 *
 **/

// //set
// owningClassName=ID "." name=ID ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?
protected class SetBounds_Group extends GroupToken {
	
	public SetBounds_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetBounds_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetBoundsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //set
// owningClassName=ID
protected class SetBounds_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public SetBounds_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetBoundsAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetBoundsAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class SetBounds_FullStopKeyword_1 extends KeywordToken  {
	
	public SetBounds_FullStopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class SetBounds_NameAssignment_2 extends AssignmentToken  {
	
	public SetBounds_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_FullStopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetBoundsAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetBoundsAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?
protected class SetBounds_Group_3 extends GroupToken {
	
	public SetBounds_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_RightSquareBracketKeyword_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class SetBounds_LeftSquareBracketKeyword_3_0 extends KeywordToken  {
	
	public SetBounds_LeftSquareBracketKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getLeftSquareBracketKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=INT | lowerBound=INT ".." upperBound=INT?
protected class SetBounds_Alternatives_3_1 extends AlternativesToken {

	public SetBounds_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_UpperBoundAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetBounds_Group_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// upperBound=INT
protected class SetBounds_UpperBoundAssignment_3_1_0 extends AssignmentToken  {
	
	public SetBounds_UpperBoundAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getUpperBoundAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_LeftSquareBracketKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upperBound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upperBound");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetBoundsAccess().getUpperBoundINTTerminalRuleCall_3_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetBoundsAccess().getUpperBoundINTTerminalRuleCall_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// lowerBound=INT ".." upperBound=INT?
protected class SetBounds_Group_3_1_1 extends GroupToken {
	
	public SetBounds_Group_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getGroup_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_UpperBoundAssignment_3_1_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetBounds_FullStopFullStopKeyword_3_1_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// lowerBound=INT
protected class SetBounds_LowerBoundAssignment_3_1_1_0 extends AssignmentToken  {
	
	public SetBounds_LowerBoundAssignment_3_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getLowerBoundAssignment_3_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_LeftSquareBracketKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lowerBound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lowerBound");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetBoundsAccess().getLowerBoundINTTerminalRuleCall_3_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetBoundsAccess().getLowerBoundINTTerminalRuleCall_3_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// ".."
protected class SetBounds_FullStopFullStopKeyword_3_1_1_1 extends KeywordToken  {
	
	public SetBounds_FullStopFullStopKeyword_3_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getFullStopFullStopKeyword_3_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_LowerBoundAssignment_3_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=INT?
protected class SetBounds_UpperBoundAssignment_3_1_1_2 extends AssignmentToken  {
	
	public SetBounds_UpperBoundAssignment_3_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getUpperBoundAssignment_3_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_FullStopFullStopKeyword_3_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upperBound",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upperBound");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetBoundsAccess().getUpperBoundINTTerminalRuleCall_3_1_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetBoundsAccess().getUpperBoundINTTerminalRuleCall_3_1_1_2_0();
			return obj;
		}
		return null;
	}

}



// "]"
protected class SetBounds_RightSquareBracketKeyword_3_2 extends KeywordToken  {
	
	public SetBounds_RightSquareBracketKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetBoundsAccess().getRightSquareBracketKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetBounds_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SetBounds ****************/


/************ begin Rule SetOrdered ****************
 *
 * //setOrdered(A, list, true) sets A's property list as ordered
 * //setOrdered(A, list, false) sets A's property list as unordered
 * SetOrdered returns ops::SetOrdered: //set
 * 	owningClassName=ID "." name=ID (isOrdered?="ordered" | "!ordered");
 *
 **/

// //set
// owningClassName=ID "." name=ID (isOrdered?="ordered" | "!ordered")
protected class SetOrdered_Group extends GroupToken {
	
	public SetOrdered_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetOrderedRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //set
// owningClassName=ID
protected class SetOrdered_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public SetOrdered_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetOrderedAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetOrderedAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class SetOrdered_FullStopKeyword_1 extends KeywordToken  {
	
	public SetOrdered_FullStopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class SetOrdered_NameAssignment_2 extends AssignmentToken  {
	
	public SetOrdered_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_FullStopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetOrderedAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetOrderedAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// isOrdered?="ordered" | "!ordered"
protected class SetOrdered_Alternatives_3 extends AlternativesToken {

	public SetOrdered_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_IsOrderedAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetOrdered_OrderedKeyword_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isOrdered?="ordered"
protected class SetOrdered_IsOrderedAssignment_3_0 extends AssignmentToken  {
	
	public SetOrdered_IsOrderedAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getIsOrderedAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isOrdered",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isOrdered");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSetOrderedAccess().getIsOrderedOrderedKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// "!ordered"
protected class SetOrdered_OrderedKeyword_3_1 extends KeywordToken  {
	
	public SetOrdered_OrderedKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetOrderedAccess().getOrderedKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetOrdered_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SetOrdered ****************/


/************ begin Rule SetUnique ****************
 *
 * //setUnique(A, list, true) sets A's property list as unique
 * //setUnique(A, list, false) unsets unique status of A's property list
 * SetUnique returns ops::SetUnique: //set
 * 	owningClassName=ID "." name=ID (isUnique?="unique" | "!unique");
 *
 **/

// //set
// owningClassName=ID "." name=ID (isUnique?="unique" | "!unique")
protected class SetUnique_Group extends GroupToken {
	
	public SetUnique_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetUniqueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //set
// owningClassName=ID
protected class SetUnique_OwningClassNameAssignment_0 extends AssignmentToken  {
	
	public SetUnique_OwningClassNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getOwningClassNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetUniqueAccess().getOwningClassNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetUniqueAccess().getOwningClassNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class SetUnique_FullStopKeyword_1 extends KeywordToken  {
	
	public SetUnique_FullStopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getFullStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_OwningClassNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class SetUnique_NameAssignment_2 extends AssignmentToken  {
	
	public SetUnique_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_FullStopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetUniqueAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetUniqueAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// isUnique?="unique" | "!unique"
protected class SetUnique_Alternatives_3 extends AlternativesToken {

	public SetUnique_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_IsUniqueAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetUnique_UniqueKeyword_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// isUnique?="unique"
protected class SetUnique_IsUniqueAssignment_3_0 extends AssignmentToken  {
	
	public SetUnique_IsUniqueAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getIsUniqueAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isUnique",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isUnique");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSetUniqueAccess().getIsUniqueUniqueKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// "!unique"
protected class SetUnique_UniqueKeyword_3_1 extends KeywordToken  {
	
	public SetUnique_UniqueKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetUniqueAccess().getUniqueKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetUnique_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SetUnique ****************/


/************ begin Rule CopyProperty ****************
 *
 * //copyPropety(A, id, B, MergeType) copies A's property id to B by selected MergeType
 * CopyProperty returns ops::CopyProperty:
 * 	"copy" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID;
 *
 **/

// "copy" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID
protected class CopyProperty_Group extends GroupToken {
	
	public CopyProperty_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_TargetClassNameAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCopyPropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "copy"
protected class CopyProperty_CopyKeyword_0 extends KeywordToken  {
	
	public CopyProperty_CopyKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getCopyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=MergeType
protected class CopyProperty_TypeAssignment_1 extends AssignmentToken  {
	
	public CopyProperty_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_CopyKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getCopyPropertyAccess().getTypeMergeTypeEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getCopyPropertyAccess().getTypeMergeTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// owningClassName=ID
protected class CopyProperty_OwningClassNameAssignment_2 extends AssignmentToken  {
	
	public CopyProperty_OwningClassNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getOwningClassNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCopyPropertyAccess().getOwningClassNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCopyPropertyAccess().getOwningClassNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class CopyProperty_FullStopKeyword_3 extends KeywordToken  {
	
	public CopyProperty_FullStopKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getFullStopKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_OwningClassNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class CopyProperty_NameAssignment_4 extends AssignmentToken  {
	
	public CopyProperty_NameAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_FullStopKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCopyPropertyAccess().getNameIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCopyPropertyAccess().getNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class CopyProperty_HyphenMinusGreaterThanSignKeyword_5 extends KeywordToken  {
	
	public CopyProperty_HyphenMinusGreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getHyphenMinusGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_NameAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// targetClassName=ID
protected class CopyProperty_TargetClassNameAssignment_6 extends AssignmentToken  {
	
	public CopyProperty_TargetClassNameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCopyPropertyAccess().getTargetClassNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CopyProperty_HyphenMinusGreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targetClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targetClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCopyPropertyAccess().getTargetClassNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCopyPropertyAccess().getTargetClassNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule CopyProperty ****************/


/************ begin Rule MoveProperty ****************
 *
 * //movePropety(A, id, B, MergeType) moves (and deletes) A's property id to B by selected MergeType
 * MoveProperty returns ops::MoveProperty:
 * 	"move" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID;
 *
 **/

// "move" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID
protected class MoveProperty_Group extends GroupToken {
	
	public MoveProperty_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_TargetClassNameAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMovePropertyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "move"
protected class MoveProperty_MoveKeyword_0 extends KeywordToken  {
	
	public MoveProperty_MoveKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getMoveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=MergeType
protected class MoveProperty_TypeAssignment_1 extends AssignmentToken  {
	
	public MoveProperty_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_MoveKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getMovePropertyAccess().getTypeMergeTypeEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getMovePropertyAccess().getTypeMergeTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// owningClassName=ID
protected class MoveProperty_OwningClassNameAssignment_2 extends AssignmentToken  {
	
	public MoveProperty_OwningClassNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getOwningClassNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("owningClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("owningClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMovePropertyAccess().getOwningClassNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMovePropertyAccess().getOwningClassNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class MoveProperty_FullStopKeyword_3 extends KeywordToken  {
	
	public MoveProperty_FullStopKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getFullStopKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_OwningClassNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class MoveProperty_NameAssignment_4 extends AssignmentToken  {
	
	public MoveProperty_NameAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_FullStopKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMovePropertyAccess().getNameIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMovePropertyAccess().getNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class MoveProperty_HyphenMinusGreaterThanSignKeyword_5 extends KeywordToken  {
	
	public MoveProperty_HyphenMinusGreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getHyphenMinusGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_NameAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// targetClassName=ID
protected class MoveProperty_TargetClassNameAssignment_6 extends AssignmentToken  {
	
	public MoveProperty_TargetClassNameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMovePropertyAccess().getTargetClassNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoveProperty_HyphenMinusGreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targetClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targetClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMovePropertyAccess().getTargetClassNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMovePropertyAccess().getTargetClassNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MoveProperty ****************/


/************ begin Rule ExtractClass ****************
 *
 * / **
 *  * Decomposable Operations:
 *  * / //extractClass(A, {id, name}, B) creates B and moves A's properties {id, name} to created B
 * ExtractClass returns ops::ExtractClass:
 * 	"extract" sourceClassName=ID "." "[" extractPropertiesNames+=ID ("," extractPropertiesNames+=ID)* "]" "->"
 * 	extractClassName=ID;
 *
 **/

// "extract" sourceClassName=ID "." "[" extractPropertiesNames+=ID ("," extractPropertiesNames+=ID)* "]" "->"
// extractClassName=ID
protected class ExtractClass_Group extends GroupToken {
	
	public ExtractClass_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_ExtractClassNameAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtractClassRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "extract"
protected class ExtractClass_ExtractKeyword_0 extends KeywordToken  {
	
	public ExtractClass_ExtractKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getExtractKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// sourceClassName=ID
protected class ExtractClass_SourceClassNameAssignment_1 extends AssignmentToken  {
	
	public ExtractClass_SourceClassNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getSourceClassNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_ExtractKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractClassAccess().getSourceClassNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractClassAccess().getSourceClassNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class ExtractClass_FullStopKeyword_2 extends KeywordToken  {
	
	public ExtractClass_FullStopKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getFullStopKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_SourceClassNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class ExtractClass_LeftSquareBracketKeyword_3 extends KeywordToken  {
	
	public ExtractClass_LeftSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getLeftSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_FullStopKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extractPropertiesNames+=ID
protected class ExtractClass_ExtractPropertiesNamesAssignment_4 extends AssignmentToken  {
	
	public ExtractClass_ExtractPropertiesNamesAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getExtractPropertiesNamesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_LeftSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extractPropertiesNames",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extractPropertiesNames");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractClassAccess().getExtractPropertiesNamesIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractClassAccess().getExtractPropertiesNamesIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("," extractPropertiesNames+=ID)*
protected class ExtractClass_Group_5 extends GroupToken {
	
	public ExtractClass_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_ExtractPropertiesNamesAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ExtractClass_CommaKeyword_5_0 extends KeywordToken  {
	
	public ExtractClass_CommaKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getCommaKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtractClass_ExtractPropertiesNamesAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// extractPropertiesNames+=ID
protected class ExtractClass_ExtractPropertiesNamesAssignment_5_1 extends AssignmentToken  {
	
	public ExtractClass_ExtractPropertiesNamesAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getExtractPropertiesNamesAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_CommaKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extractPropertiesNames",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extractPropertiesNames");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractClassAccess().getExtractPropertiesNamesIDTerminalRuleCall_5_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractClassAccess().getExtractPropertiesNamesIDTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class ExtractClass_RightSquareBracketKeyword_6 extends KeywordToken  {
	
	public ExtractClass_RightSquareBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getRightSquareBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtractClass_ExtractPropertiesNamesAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "->"
protected class ExtractClass_HyphenMinusGreaterThanSignKeyword_7 extends KeywordToken  {
	
	public ExtractClass_HyphenMinusGreaterThanSignKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getHyphenMinusGreaterThanSignKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_RightSquareBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extractClassName=ID
protected class ExtractClass_ExtractClassNameAssignment_8 extends AssignmentToken  {
	
	public ExtractClass_ExtractClassNameAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractClassAccess().getExtractClassNameAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractClass_HyphenMinusGreaterThanSignKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extractClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extractClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractClassAccess().getExtractClassNameIDTerminalRuleCall_8_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractClassAccess().getExtractClassNameIDTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ExtractClass ****************/


/************ begin Rule ExtractParent ****************
 *
 * //extractParent({A, B}, {id, name}, C)
 * // creates C, sets C as parent of A and B and moves A's and B's properties {id, name} to C
 * ExtractParent returns ops::ExtractParent:
 * 	"extract" "[" sourceClassesName+=ID ("," sourceClassesName+=ID)* "]" "." "[" extractPropertiesName+=ID (","
 * 	extractPropertiesName+=ID)* "]" "->" extractParentName=ID;
 *
 **/

// "extract" "[" sourceClassesName+=ID ("," sourceClassesName+=ID)* "]" "." "[" extractPropertiesName+=ID (","
// extractPropertiesName+=ID)* "]" "->" extractParentName=ID
protected class ExtractParent_Group extends GroupToken {
	
	public ExtractParent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_ExtractParentNameAssignment_11(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtractParentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "extract"
protected class ExtractParent_ExtractKeyword_0 extends KeywordToken  {
	
	public ExtractParent_ExtractKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getExtractKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "["
protected class ExtractParent_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public ExtractParent_LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_ExtractKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sourceClassesName+=ID
protected class ExtractParent_SourceClassesNameAssignment_2 extends AssignmentToken  {
	
	public ExtractParent_SourceClassesNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getSourceClassesNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_LeftSquareBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceClassesName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceClassesName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractParentAccess().getSourceClassesNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractParentAccess().getSourceClassesNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("," sourceClassesName+=ID)*
protected class ExtractParent_Group_3 extends GroupToken {
	
	public ExtractParent_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_SourceClassesNameAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ExtractParent_CommaKeyword_3_0 extends KeywordToken  {
	
	public ExtractParent_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtractParent_SourceClassesNameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// sourceClassesName+=ID
protected class ExtractParent_SourceClassesNameAssignment_3_1 extends AssignmentToken  {
	
	public ExtractParent_SourceClassesNameAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getSourceClassesNameAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_CommaKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceClassesName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceClassesName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractParentAccess().getSourceClassesNameIDTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractParentAccess().getSourceClassesNameIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class ExtractParent_RightSquareBracketKeyword_4 extends KeywordToken  {
	
	public ExtractParent_RightSquareBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getRightSquareBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtractParent_SourceClassesNameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "."
protected class ExtractParent_FullStopKeyword_5 extends KeywordToken  {
	
	public ExtractParent_FullStopKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getFullStopKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_RightSquareBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class ExtractParent_LeftSquareBracketKeyword_6 extends KeywordToken  {
	
	public ExtractParent_LeftSquareBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getLeftSquareBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_FullStopKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extractPropertiesName+=ID
protected class ExtractParent_ExtractPropertiesNameAssignment_7 extends AssignmentToken  {
	
	public ExtractParent_ExtractPropertiesNameAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getExtractPropertiesNameAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_LeftSquareBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extractPropertiesName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extractPropertiesName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractParentAccess().getExtractPropertiesNameIDTerminalRuleCall_7_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractParentAccess().getExtractPropertiesNameIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ("," extractPropertiesName+=ID)*
protected class ExtractParent_Group_8 extends GroupToken {
	
	public ExtractParent_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_ExtractPropertiesNameAssignment_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ExtractParent_CommaKeyword_8_0 extends KeywordToken  {
	
	public ExtractParent_CommaKeyword_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getCommaKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtractParent_ExtractPropertiesNameAssignment_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// extractPropertiesName+=ID
protected class ExtractParent_ExtractPropertiesNameAssignment_8_1 extends AssignmentToken  {
	
	public ExtractParent_ExtractPropertiesNameAssignment_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getExtractPropertiesNameAssignment_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_CommaKeyword_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extractPropertiesName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extractPropertiesName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractParentAccess().getExtractPropertiesNameIDTerminalRuleCall_8_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractParentAccess().getExtractPropertiesNameIDTerminalRuleCall_8_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class ExtractParent_RightSquareBracketKeyword_9 extends KeywordToken  {
	
	public ExtractParent_RightSquareBracketKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getRightSquareBracketKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExtractParent_ExtractPropertiesNameAssignment_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "->"
protected class ExtractParent_HyphenMinusGreaterThanSignKeyword_10 extends KeywordToken  {
	
	public ExtractParent_HyphenMinusGreaterThanSignKeyword_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getHyphenMinusGreaterThanSignKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_RightSquareBracketKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extractParentName=ID
protected class ExtractParent_ExtractParentNameAssignment_11 extends AssignmentToken  {
	
	public ExtractParent_ExtractParentNameAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtractParentAccess().getExtractParentNameAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtractParent_HyphenMinusGreaterThanSignKeyword_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extractParentName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extractParentName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtractParentAccess().getExtractParentNameIDTerminalRuleCall_11_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtractParentAccess().getExtractParentNameIDTerminalRuleCall_11_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ExtractParent ****************/


}
