/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
import queries_app_link;
import queries_rdb_link;
//import builder_app_link;
import builder_rdb_link;
 
modeltype APP uses app('http://www.collectionspro.eu/jam/mm/app');
modeltype RDB uses rdb('http://www.collectionspro.eu/jam/mm/rdb');


library MIGDB_ORM;

// a mapping of a given operation
abstract helper APP::ops::ModelOperation::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation);
	
/* ++++++++++ OPERATIONS ++++++++++++++++++++ */


helper APP::ops::AddPrimitiveClass::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	return OrderedSet{};
	// this operation is not mapped to RDB
}

helper APP::ops::AddEmbeddedClass::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	return OrderedSet{};
	// this operation is not mapped to RDB
}

//TODO add TPC and SINGLE TABLE CASES
helper APP::ops::AddClass::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	// addition of a table to the schema
	var operations: OrderedSet(RDB::ops::ModelOperation) = OrderedSet{};
	operations += _addTable(getDefaultSchemaName(), self.name.toLower());
	
	// addition of a column to the table
	operations += _addColumn(getDefaultSchemaName(), self.name.toLower(), "id_" + self.name.toLower(), getAppDefaultIdTypeName());
	
	// addition of an index to the schema
	operations += _addIndex(getDefaultSchemaName(), self.name.toLower(), "IX_" + self.name.toLower() + "_id_" + self.name.toLower(), OrderedSet {"id_" + self.name.toLower()});
		
	// addition of a primary key to the table
	operations += _addPrimaryKey(getDefaultSchemaName(), self.name.toLower(), "id_" + self.name.toLower(), "PK_" + self.name.toLower());
	return operations;
}

//TODO rewrite
/**helper APP::ops::AddProperty::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	var operations: OrderedSet(RDB::ops::ModelOperation);
	
	if(appStructure.containsPrimitiveClass(self.type))then{
		operations := self.primitivePropertyToRdb(appStructure);
	} else {
	if(appStructure.findEntity(self.name).oclIsKindOf(EmbeddedClass))then{
		operations := self.embeddedPropertyToRdb(appStructure);
	} else {
	if(appStructure.co)then {
		operations := self.complexPropertyToRdb(appStructure);
//	} else if(){
//		operations := self.notNullToRdb(appStructure);
//	}else if(){
//		operations := self.collectionToRdb(appStructure);
	}endif;
	}endif;
	}endif;
}

helper APP::ops::AddProperty::primitivePropertyToRdb(appStructure : APP::Structure)
{
	// adds a column of a primitve type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, appGen.findPrimitiveTypeInRdb(self.type));
}

helper APP::ops::AddProperty::embeddedPropertyToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { appGen.isEmbeddedClassInGeneration(self.type); }
{
	// for each property from an embedded class
	appGen.findEmbeddedClass(self.type).properties->forEach(p) {
		// adds a column of a primitve type to a table
		rdbRoot.operations += appGen.AddColumnOfPrimitiveType(p, appGen.findPrimitiveTypeInRdb(p.type.name));
	};
}

mapping APP::ops::AddProperty::complexPropertyToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { appGen.isClassInGeneration(self.type) and self.upperBound <> -1; }
{
	// adds a column of an integer type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, "int");
	// adds a foreign key to a table
	rdbRoot.operations += appGen.AddForeignKeyToColumn(self);
}

mapping APP::ops::AddProperty::notNullToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { self.lowerBound = 1 }
{
	// adds a not null constraint to a column
	rdbRoot.operations += appGen.AddNotNullConstraintToColumn(self);
}

mapping APP::Property::primitivePropertyToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { appGen.isPrimitiveClassInGeneration(self.type.name); }
{
	// adds a column of a primitve type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, appGen.findPrimitiveTypeInRdb(self.type.name));
}

mapping APP::Property::complexPropertyToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { appGen.isClassInGeneration(self.type.name) and self.upperBound <> -1; }
{
	// adds a column of an integer type to a table
	rdbRoot.operations += appGen.AddColumnOfPrimitiveType(self, "int");
	// adds a foreign key to a table
	rdbRoot.operations += appGen.AddForeignKeyToColumn(self);
}

mapping APP::Property::notNullToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { self.lowerBound = 1 }
{
	// adds a not null constraint to a column
	rdbRoot.operations += appGen.AddNotNullConstraintToColumn(self);
}

mapping APP::ops::AddProperty::collectionToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { self.upperBound = -1 }
{
	self.xmap generalCollectionToRdb(appGen, rdbRoot);
	self.xmap orderedCollectionToRdb(appGen, rdbRoot);
}

// 0..1 * {unique?}
mapping APP::ops::AddProperty::generalCollectionToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { true; }
{
	// addition of a column to the table
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := getDefaultSchemaName();
		owningTableName := self.type.toLower();
		name := self.owningClassName.toLower() + "_id";
		type := "int";
	};
	
	// addition of a foreign key to the table
	rdbRoot.operations += object RDB::ops::AddForeignKey {
		owningSchemaName := getDefaultSchemaName();
		owningTableName := self.type.toLower();
		name := "FK_" + self.owningClassName.toLower() + "_id_" + self.owningClassName.toLower();
		targetTableName := self.owningClassName.toLower();
		constrainedColumnName := self.owningClassName.toLower();
	};
}

// 0..1 * {ordered, unique?}
mapping APP::ops::AddProperty::orderedCollectionToRdb(appStructure : APP::Structure, inout rdbRoot : RDB::ModelRoot)
when { self.isOrdered }
{
	// addition of a column to the table
	rdbRoot.operations += object RDB::ops::AddColumn {
		owningSchemaName := getDefaultSchemaName();
		owningTableName := self.type.toLower();
		name := "ord_" + self.owningClassName.toLower();
		type := "int";
	};
	
	// addition of an index to the schema
	rdbRoot.operations += object RDB::ops::AddIndex {
		owningSchemaName := getDefaultSchemaName();
		owningTableName := self.type.toLower();
		name := "UX_" + self.type.toLower() + "_ord_" + self.owningClassName.toLower();
		columnsNames := OrderedSet {"ord_" + self.owningClassName.toLower()};
	};
	
	// addition of an unique constraint to the table
	rdbRoot.operations += object RDB::ops::AddUnique {
		owningSchemaName := getDefaultSchemaName();
		owningTableName := self.type.toLower();
		name := "UK_" + self.type.toLower() + "_ord_" + self.owningClassName.toLower();
		//underlyingIndexName := "UX_" + self.type.toLower() + "_ord_" + self.owningClassName.toLower();
	};
}
**/

helper APP::ops::RenameProperty::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	var targetTableName : String := "";
	return OrderedSet {_renameColumn(getDefaultSchemaName(), targetTableName.toLower(), self.name.toLower(), 
	self.newName.toLower() )};
}

helper APP::ops::RemoveProperty::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation){
	var targetTableName : String := null;
	return OrderedSet{_removeColumn(getDefaultSchemaName(), targetTableName.toLower(), self.name)};
}

helper APP::ops::SetAbstract::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation){
	return OrderedSet{object RDB::ops::HasNoOwnInstances {
		owningSchemaName := getDefaultSchemaName();
		tableName := self.name.toLower();
		//descendantsNames := appGen.findDescendants(self.name);
		}
	}
}

/*helper APP::ops::SetParent::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation){
	var cls : StandardClass := appStructure.findStandardClass(self.name);
	var ops : OrderedSet(RDB::ops::ModelOperation) := null;
	if(cls.hasJoinedInheritanceType())then{
		ops := self.mapJoined(appStructure);
	} endif;
	return ops;
}*/

// inheritanceType = joined
/**helper APP::ops::SetParent::mapJoined(appStructure : APP::Structure) :OrderedSet(RDB::ops::ModelOperation){
	var operations : OrderedSet(RDB::ops::ModelOperation) := null;
	if (not self.properties->isEmpty()) then {
		operations += object RDB::ops::InsertInstances {
			owningSchemaName := getDefaultSchemaName();
			sourceTableName := self.name.toLower();
			targetTableName := self.parentName.toLower();
			sourceColumnsNames := "id_" + self.name.toLower();
			sourceColumnsNames += self.properties->toLower();
			targetColumnsNames := "id_" + self.parentName.toLower();
			targetColumnsNames += self.properties->toLower();			
		};
		
		self.properties->forEach(pName) {
			operations += object RDB::ops::RemoveColumn {
				owningSchemaName := getDefaultSchemaName();
				owningTableName := self.name.toLower();
				name := pName.toLower();
			};
		};
	} endif;

	var targets : OrderedSet(String);
		targets += self.parentName.toLower();
		targets += appGen.findAncestors(self.parentName);
			
/*		if (appGen.hasAnyColumns(targets)) then {
			rdbRoot.operations += object RDB::ops::HasNoInstances {
				owningSchemaName := getDefaultSchemaName();
				tableName := self.name.toLower();			
			};
		} else {
			rdbRoot.operations += object RDB::ops::AddInstances {
				owningSchemaName := getDefaultSchemaName();
				sourceTableName := self.name.toLower();
				targetTableNames := targets;
			};
		} endif; */
/*		
		operations += _renameColumn(getDefaultSchemaName(),self.name.toLower(), "id_" + self.name.toLower(), "id_" + targets->last());
}*/

helper APP::ops::MoveProperty::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	var operations : OrderedSet(RDB::ops::ModelOperation) := OrderedSet{_renameColumn (getDefaultSchemaName(), self.owningClassName.toLower(), self.name, self.name + "_old")};
	
	operations += _addColumn(getDefaultSchemaName(), self.targetClassName.toLower(), self.name, "boolean");
	operations += object RDB::ops::CopyInstances {
		owningSchemaName := getDefaultSchemaName();
		owningTableName := self.owningClassName.toLower();
		sourceColumnName := self.name + '_old';
		targetTableName := self.targetClassName.toLower();
		targetColumnName := self.name;
		type := appStructure.mergeTypeInAppToMergeTypeInRdb(self.type);
	};
	
	operations += _removeColumn (getDefaultSchemaName(), self.owningClassName.toLower(), self.name + "_old");
	return operations;
}

helper APP::ops::ExtractClass::toRdb(appStructure : APP::Structure) : OrderedSet(RDB::ops::ModelOperation) {
	var operations : OrderedSet(RDB::ops::ModelOperation) := OrderedSet{ _addTable(getDefaultSchemaName(), self.extractClassName.toLower())};
	operations += _addColumn(getDefaultSchemaName(), self.extractClassName.toLower(),"id_" + self.extractClassName.toLower(), getAppDefaultIdTypeName());
	operations += _addIndex (getDefaultSchemaName(), self.extractClassName.toLower(), "IX_" + self.extractClassName.toLower() + "_id_" + self.extractClassName.toLower(),
	OrderedSet {"id_" + self.extractClassName.toLower()});
	operations += _addPrimaryKey(getDefaultSchemaName(), self.extractClassName.toLower(), "id_" + self.extractClassName.toLower(), "PK_" + self.extractClassName.toLower());
	operations += _addColumn(getDefaultSchemaName(), self.sourceClassName.toLower(), self.extractClassName.toLower(), getAppDefaultIdTypeName());
	operations += object RDB::ops::GenerateSequenceNumbers {
		owningSchemaName := getDefaultSchemaName();
		tableName := self.sourceClassName.toLower();
		columnName := self.extractClassName.toLower();
		sequenceName := "seq_global";
	};

/**		
	self.extractPropertiesNames->forEach(pName) {
	var p : APP::Property := appGen.findProperty(self.extractClassName, pName);
		
		p.xmap primitivePropertyToRdb(appGen, rdbRoot);
		p.xmap complexPropertyToRdb(appGen, rdbRoot);
		p.xmap notNullToRdb(appGen, rdbRoot); 		
		
	};
**/	
	operations += object RDB::ops::InsertInstances {
		owningSchemaName := getDefaultSchemaName();
		sourceTableName := self.sourceClassName.toLower();
		targetTableName := self.extractClassName.toLower();
		sourceColumnsNames := self.extractClassName.toLower();
		sourceColumnsNames += self.extractPropertiesNames.toLower();
		targetColumnsNames := "id_" + self.extractClassName.toLower();
		targetColumnsNames += self.extractPropertiesNames.toLower();
	};
	
	self.extractPropertiesNames->forEach(pName) {		
		operations += _removeColumn (getDefaultSchemaName(), self.sourceClassName.toLower(), pName.toLower());
	};
	
	operations += _addForeignKey(getDefaultSchemaName(), self.sourceClassName.toLower(), self.extractClassName.toLower(), 
	"FK_" + self.extractClassName.toLower() + "_id_" + self.extractClassName.toLower(), self.extractClassName.toLower());
//	 object RDB::ops::AddForeignKey {
//		owningSchemaName := getDefaultSchemaName();
//		owningTableName := self.sourceClassName.toLower();
//		name := "FK_" + self.extractClassName.toLower() + "_id_" + self.extractClassName.toLower();
//		targetTableName := self.extractClassName.toLower();
//		constrainedColumnName := self.extractClassName.toLower();
//	};	
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

query APP::Structure::findPrimitiveTypeInRdb(pName : String) : String {
	var primitiveType : APP::PrimitiveType :=  self.findPrimitiveClass(pName).primitiveType;
	switch {
		case (primitiveType = APP::PrimitiveType::boolean) return "boolean";
		case (primitiveType = APP::PrimitiveType::char) return "char";
		case (primitiveType = APP::PrimitiveType::int) return "int";
	};
	return null;
}

query APP::Structure::findMergeTypeInApp(pName : String) : APP::PrimitiveType {
	return self.findEntity(pName).oclAsType(APP::PrimitiveClass).primitiveType;
}

query APP::Structure::mergeTypeInAppToMergeTypeInRdb(type : APP::ops::MergeType) : RDB::ops::MergeType {
	switch {
		case (type = APP::ops::MergeType::strict) return RDB::ops::MergeType::strict;
		case (type = APP::ops::MergeType::force) return RDB::ops::MergeType::force;
		case (type = APP::ops::MergeType::tolerant) return RDB::ops::MergeType::tolerant;
	};
	return null;
}

query getDefaultSchemaName() : String {
	return getDefaultSchemaName();
}
