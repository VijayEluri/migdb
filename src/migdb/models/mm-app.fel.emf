@namespace(uri="http://www.collectionspro.eu/jam/mm", prefix="mm")
package mm;

@namespace(uri="http://www.collectionspro.eu/jam/mm/reduced-jam", prefix="reduced")
package reduced {
  class ModelRoot {
    val ModelGeneration[+]#modelRoot modelGenerations;
    val operations.ModelOperation[*]#modelRoot operations;
  }

  class ModelGeneration {
    readonly derived ref ModelRoot[1]#modelGenerations modelRoot;
    attr boolean[1] isMissing = false;
    !ordered val AbstractClass[*]#owningModel classes;
  }

  class AbstractClass {
    readonly derived ref ModelGeneration[1]#classes owningModel;
    attr String[1] name;
  }

  class PrimitiveClass extends AbstractClass {
    attr PrimitiveType[1] primitiveType;
  }

  class Class extends AbstractClass {
    ref Class parent;
    attr boolean isAbstract = false;
    attr boolean isEmbedded = false;
    attr String tableName;
    attr InheritanceType[1] inheritanceType;
    !ordered val Property[*]#owningClass properties;
  }

  enum InheritanceType {
    __not_defined = 0;
    singleTable = 1;
    tablePerClass = 2;
    joined = 3;
  }

  enum PrimitiveType {
    boolean = 0;
    char = 1;
    int = 2;
  }

  class Property {
    readonly derived ref Class[1]#properties owningClass;
    attr String[1] name;
    ref AbstractClass[1] type;
    attr String defaultValue;
    ref Property oppositeProperty;
    attr int lowerBound = 0;
    attr int upperBound = 1;
    attr boolean isOrdered = false;
    attr boolean isUnique = false;
    attr boolean isID = false;
    !unique attr String columnName;
    attr String columnNamePattern;
    attr String sequenceName;
  }

  @namespace(uri="http://www.collectionspro.eu/jam/mm/model-ops", prefix="model-ops")
  package operations {
    abstract class ModelOperation {
      readonly derived ref ModelRoot[1]#operations modelRoot;
    }

    class AddClass extends ModelOperation {
      attr String[1] name;
      attr String parent;
      attr boolean isAbstract;
      attr boolean isEmbedded;
      attr String tableName;
      attr InheritanceType[1] inheritanceType;
    }

    class AddPrimitiveClass extends ModelOperation {
      attr String[1] name;
      attr PrimitiveType[1] primitiveType;
    }

    class RenameClass extends ModelOperation {
      attr String[1] name;
      attr String[1] newName;
    }

    class SetParent extends ModelOperation {
      attr String[1] name;
      attr String[1] parentName;
    }

    class SetAbstract extends ModelOperation {
      attr String[1] name;
      attr boolean[1] isAbstract;
    }

    class SetEmbedded extends ModelOperation {
      attr String[1] name;
      attr boolean[1] isEmbedded;
    }

    class RemoveClass extends ModelOperation {
      attr String[1] name;
    }

    class AddProperty extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] type;
      attr String defaultValue;
      attr int lowerBound;
      attr int upperBound;
      attr boolean isOrdered;
      attr boolean isUnique;
      attr String columnName;
      attr String columnNamePattern;
      attr String sequenceName;
    }

    class RenameProperty extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] newName;
    }

    class SetType extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] type;
    }

    class SetOpposite extends ModelOperation {
      attr String[1] firstClassName;
      attr String[1] firstPropertyName;
      attr String[1] secondClassName;
      attr String[1] secondPropertyName;
      attr boolean[1] isOpposite;
    }

    class SetBoundries extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr int[1] lowerBound;
      attr int[1] upperBound;
    }

    class SetOrdered extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr boolean[1] isOrdered;
    }

    class SetUnique extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr boolean[1] isUnique;
    }

    class RemoveProperty extends ModelOperation {
      attr String[1] owningClassName;
      attr String[1] name;
    }

    class CopyProperty extends ModelOperation {
      readonly attr String[1] owningClassName;
      attr String[1] propertyName;
      attr String[1] targetClassName;
      attr boolean[1] endInOwerload;
      attr boolean[1] addValueNull;
    }

    class MoveProperty extends ModelOperation {
      readonly attr String[1] owningClassName;
      attr String[1] propertyName;
      attr String[1] targetClassName;
      attr boolean[1] endInOwerload;
      attr boolean[1] addValueNull;
    }

  }

}

