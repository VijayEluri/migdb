/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
library ValidatorDB;

import queries.QueriesDB;

modeltype RDB uses 'mm-db';

query RDB::rdb::ModelRoot::isModelValid():Boolean{
	var valid : Boolean := true;
	self->modelGenerations->schemas->forEach(schema){
		if(not schema.hasUniqueName())then{
			log( "Model invalid - " + schema.repr() + " collision in schema names" );
			valid := false;
		}endif;	
	};
	self->modelGenerations->schemas->tables->forEach(table){
		if(not table.hasUniqueName())then{
			log("Model invalid - " + table.repr() + " duplicit table name");
			valid := false;
		}endif;
		if(beginsWithDigit(table.name))then{
			log("Model invalid - " + table.repr() + " begins with digit");
		}endif;
	};
	
	
	
	return valid;
}

query beginsWithDigit( name : String):Boolean{
	var firstChar: String  := name.substring(0,1) ;
	if(firstChar = "0" or firstChar = "1" or firstChar = "2" or firstChar = "3" or firstChar = "4"
		or firstChar = "5" or firstChar = "6" or firstChar = "7" or firstChar = "8" or firstChar = "9")then{
		return true;
	}endif;
	return false;
}

query RDB::rdb::Schema::hasUniqueName() : Boolean{
	return self.owningModel->schemas->exist(schema | schema.name = self.name and schema <> self);
}

query RDB::rdb::Table::hasUniqueName() : Boolean{
	return not self.owningSchema->tables->exists(table | table.name = self.name and table <> self);
}

