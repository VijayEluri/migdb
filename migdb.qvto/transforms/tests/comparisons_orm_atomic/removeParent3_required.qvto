import builder_rdb;
import queries_rdb;

modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";

transformation removeParent3_required(out inoutModel : RDB);

main() {
	var publicSchemaName : String := getDefaultSchemaName();
	var childTableName : String := "tab";
	var parentTableName : String := "parent";
	var idChildTableName : String := "id_tab";
	var idParentTableName : String := "id_parent";
	var parencyFkName : String := "par_" + childTableName;
	var equalityCondition : String := idParentTableName + " IN (SELECT " + idChildTableName + " FROM " +
	               publicSchemaName + "." + childTableName + ")";
	var pkChildName : String := "pk_" + childTableName;
	var distributedColumnName : String := "age";
	var distributedColumnType : RDB::PrimitiveType := RDB::PrimitiveType::int;
	var idType : RDB::PrimitiveType := RDB::PrimitiveType::int;
	var orderingType : RDB::PrimitiveType := RDB::PrimitiveType::int;
	var newCollectionName : String := "col_" + childTableName + "_" + distributedColumnName;
	var oldCollectionName : String := "col_" + parentTableName + "_" + distributedColumnName;
	var sourceColumns : OrderedSet(String) := OrderedSet{
													idParentTableName,
													distributedColumnName,
													getDbOrderingColumnName()};
	var targetColumns : OrderedSet(String) := OrderedSet{
													idChildTableName,
													distributedColumnName,
													getDbOrderingColumnName()};												
	var orderingColumnName : String := getDbOrderingColumnName();
	var uxOrdName : String := "ux_" + newCollectionName + "_ord";
	var uxName : String := "ux_" + childTableName + "_" + distributedColumnName;
	var uxOrdColumnNames : OrderedSet(String) := OrderedSet{
														idChildTableName,
														orderingColumnName};
	var uxColumnNames : OrderedSet(String) := OrderedSet{
														idChildTableName,
														distributedColumnName};
	var addNewCollectionTable : RDB::ops::ModelOperation := _addTable(
																	publicSchemaName,
																	newCollectionName);
	var addIdChildColumnToColectTab : RDB::ops::ModelOperation := _addColumn(
																		publicSchemaName,
																		newCollectionName,
																		idChildTableName,
																		idType);
	var addDataColumnToColectTab : RDB::ops::ModelOperation := _addColumn(
																		publicSchemaName,
																		newCollectionName,
																		distributedColumnName,
																		distributedColumnType);
	var addOrderingColumn : RDB::ops::ModelOperation := _addColumn(
																publicSchemaName,
																newCollectionName,
																orderingColumnName,
																orderingType);
	var insertNewColectRows : RDB::ops::ModelOperation := _insertRows(
																	publicSchemaName,
																	oldCollectionName,
																	sourceColumns,
																	newCollectionName,
																	targetColumns,
																	equalityCondition);
	var deleteOldColectRows : RDB::ops::ModelOperation := _deleteRows(
																	publicSchemaName,
																	oldCollectionName,
																	equalityCondition);
	var addUxConstraint : RDB::ops::ModelOperation := _addUnique(
																publicSchemaName,
																newCollectionName,
																uxColumnNames,
																uxName);																
	var removeParencyFk : RDB::ops::ModelOperation := _removeConstraint(
																publicSchemaName,
																childTableName,
																parencyFkName);
	var cleanParentTable : RDB::ops::ModelOperation := _deleteRows(
																publicSchemaName,
																parentTableName,
																equalityCondition);
	var addOrderingConstraint : RDB::ops::ModelOperation := _addUnique(
																	publicSchemaName,
																	newCollectionName,
																	uxOrdColumnNames,
																	uxOrdName);
	var ops : OrderedSet(RDB::ops::ModelOperation):= OrderedSet{
															addNewCollectionTable,
															addIdChildColumnToColectTab,
															addDataColumnToColectTab,
															addOrderingColumn,
															insertNewColectRows,
															deleteOldColectRows,
															addUxConstraint,
															removeParencyFk, 
															cleanParentTable,
															addOrderingConstraint};
	var model : RDB::ModelRoot := _rdbOperations(ops);	 
}
