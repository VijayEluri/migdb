/*
 * The MIT License
 * 
 * Copyright (c) 2010-2014 MigDB team [https://github.com/migdb/migdb/wiki]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
library queries_diff;

modeltype APP uses 'http://www.collectionspro.eu/jam/mm/app';

helper addMatch(inout diff : Diff, sourceClass : StandardClass, targetClass : StandardClass, _relation : APP::diff::ClassRelation) : APP::diff::ClassPair{

	var classPair : APP::diff::ClassPair;
	if(_relation = APP::diff::ClassRelation::extractClass)then{
		 classPair := object app::diff::ExtractClassPair{
														source := sourceClass;
														reflection := targetClass;
														relation := _relation;
		}; 
	}else{
		classPair := object app::diff::ClassPair{
												source := sourceClass;
												reflection := targetClass;
												relation := _relation;
		};
	}endif;
	diff.classPairs+= classPair; 
	return classPair;
}

helper addMatch(inout diff : Diff, sourceProperty : MultipliableProperty, targetProperty : MultipliableProperty, _relation : APP::diff::PropertyRelation) : APP::diff::PropertyPair{
	var propertyPair : APP::diff::PropertyPair := object app::diff::PropertyPair{
																	source := sourceProperty;
																	reflection := targetProperty;
																	relation := _relation;
	};
	diff.propertyPairs+= propertyPair;
	return propertyPair;
}

query Diff::getSourceEqualPair(equationSource : StandardClass) : APP::diff::ClassPair{
	return self.classPairs->selectOne(equalPair | equalPair.source = equationSource);
}

query Diff::getReflectionEqualPair(equationReflection : StandardClass) : APP::diff::ClassPair{
	return self.classPairs->selectOne(equalPair | equalPair.source = equationReflection);
}

helper addPropertyPair(inout classPair : APP::diff::ClassPair, inout propertyPair : APP::diff::PropertyPair){
	classPair.underlyingPairs += propertyPair;
	propertyPair.owningClassPair := classPair;
	return;
}
