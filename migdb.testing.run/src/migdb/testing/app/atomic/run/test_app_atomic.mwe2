module migb.testing.rdb.atomic.run.test_app_atomic

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.mwe.*


import org.eclipse.xtext.mwe.SlotEntry
import org.eclipse.xtext.mwe.ResourceLoadingSlotEntry
import org.eclipse.xtext.mwe.Validator
import org.eclipse.xtext.mwe.NameBasedFilter

import org.eclipse.emf.mwe.utils.Writer
import org.eclipse.emf.mwe.utils.Reader

import eu.collectionspro.mwe.*
import migdb.generator.*


Workflow{
/***** DEFINE META-MODELS *****/	
/**/
	bean=org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri=".."
		registerGeneratedEPackage = "mm.app.AppPackage"
	}
	
	bean=org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri=".."
		registerGeneratedEPackage = "mm.errors.ErrorsPackage"
	}

/***** CLEAN DIRECTORIES [XMI] *****/		
/**/	
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "output-tests/test_app_atomic/"
	}

		
/**/
	component = QVTOExecutor {
		transformationFile = "../migdb.qvto/transforms/tests/operations/app/addClass1.qvto"
		outputSlot = "in_ops"
	}
	component = QVTOExecutor {
		transformationFile = "../migdb.qvto/transforms/tests/structures/app/structure_int.qvto"
		outputSlot = "in_str"
	}

	component = QVTOExecutor {
		transformationFile = "../migdb.qvto/transforms/main/evolution_app_run.qvto"
		inputSlot = "in_str"
		inputSlot = "in_ops"
		outputSlot = "out_str"
		outputSlot = "errors"
	}
	
	component = Writer {
		modelSlot = "errors"
		uri = "output-tests/errors/errors1.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
	
}