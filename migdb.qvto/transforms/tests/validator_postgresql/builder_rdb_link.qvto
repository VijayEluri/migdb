modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";
library builder_rdb;

helper addSchema(_name : String) : RDB::operations::AddSchema {
	return object RDB::operations::AddSchema {
		name := _name;
	}
}

helper addSequence(_owningSchemaName : String, _name : String, _startValue : Integer) : RDB::operations::AddSequence {
	return object RDB::operations::AddSequence {
		owningSchemaName :=_owningSchemaName ;
		name := _name;
		startValue := _startValue;
	};
}

/********************************************
 *				BUILD MODEL			 	*
 ********************************************/
helper _rdbRoot( inout _generations : OrderedSet(rdb::ModelGeneration)) : RDB::ModelRoot{
	return object ModelRoot {
		modelGenerations := _generations;
	};
}
 
helper _rdbRoot( inout _generations : OrderedSet(rdb::ModelGeneration), _operations : OrderedSet(rdb::operations::ModelOperation)) : RDB::ModelRoot{
	var root : RDB::ModelRoot := _rdbRoot(_generations);
	root.operations := _operations;
	return root;
}

helper _rdbGeneration (inout _schemas : OrderedSet(Schema)) : rdb::ModelGeneration{
	return object rdb::ModelGeneration{
		isMissing := false;
		schemas := _schemas;
	};	
}

helper _rdbGeneration(_isMissing : Boolean, _schemas : OrderedSet(Schema)) : rdb::ModelGeneration{
	var generation : rdb::ModelGeneration := _rdbGeneration(_schemas);
	generation.isMissing := _isMissing;
	return generation;
}


helper _schema( _tables : OrderedSet(rdb::Table)) : rdb::Schema{
	return object rdb::Schema{
		name := "public";
		tables := _tables;
	};
}

helper _schema(_name : String, _tables : OrderedSet(rdb::Table)) : rdb::Schema{
	var schema : rdb::Schema := _schema(_tables);
	schema.name := _name;
	return schema;
}

helper _schema(_name : String, _tables : OrderedSet(rdb::Table), _sequences : OrderedSet(rdb::Sequence), _indexes : OrderedSet(rdb::Index)) : rdb::Schema{
	var schema := _schema(_name, _tables);
	schema.sequences := _sequences;
	schema.indexes := _indexes;
	return schema;
}

helper _table(_name : String, _columns : OrderedSet(Column)) : Table {	
 	return object Table {
 		name := _name;
 		columns := _columns;
 	};
 }
 
 
 helper _table(_name : String, _columns : OrderedSet(Column), _constraints : OrderedSet(TableConstraint) ) : Table {	
 	var tab : Table := _table(_name, _columns);
 	tab.constraints := _constraints;
 	return tab;
 }
 
 helper _index(_name : String, _columns : OrderedSet(Column)) : Index {
 	return object Index {
 		name := _name;
 		columns := _columns;
 	};
 }
 
 helper _primaryKey(_name : String, _underlineIndex : Index) : PrimaryKey {
 	return object PrimaryKey {
 		name := _name;
 		underlyingIndex := _underlineIndex;
 	};
 }
 
 helper _foreignKey(_name : String, _table : Table, _constrainedColumn : Column) : ForeignKey {
 	return object ForeignKey {
 		name := _name;
 		targetTable := _table;
 		constrainedColumn := _constrainedColumn;
 	};
 }
 
 helper _column(_name : String, _type : PrimitiveType) : Column {
 	return object Column {
 		name := _name;
 		type := _type;
 	};
 }
 
 helper _sequence(_name : String, _startValue : Integer) : RDB::Sequence {
 	return object RDB::Sequence {
 		name := _name;
 		startValue := _startValue;
 	};
 }
 
 helper _notNullConstraint(_name : String) : RDB::NotNullConstraint{
 	return object NotNullConstraint{
 		name := _name;
	};
 }