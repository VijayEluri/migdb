modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";
library builder_rdb;

helper _addSchema(_name : String) : RDB::ops::AddSchema {
	return object RDB::ops::AddSchema {
		name := _name;
	}
}

helper _addSequence(_owningSchemaName : String, _name : String, _startValue : Integer) : RDB::ops::AddSequence {
	return object RDB::ops::AddSequence {
		owningSchemaName :=_owningSchemaName ;
		name := _name;
		startValue := _startValue;
	};
}

helper _addTable(_owningSchemaName : String, _name : String) : RDB::ops::AddTable {
	return object RDB::ops::AddTable {
		owningSchemaName := _owningSchemaName;
		name := _name;
	};
}

helper _addIndex(_owningSchemaName : String, _owningTableName : String, _name : String, _columnsNames : Set(String)) : RDB::ops::AddIndex{
	return object RDB::ops::AddIndex {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		name := _name;
		columnsNames := _columnsNames;
	};
}

helper _addColumn(_owningSchemaName : String, _owningTableName : String, _name : String, _type : String) : RDB::ops::AddColumn{
	return object RDB::ops::AddColumn {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		name := _name;
		type := _type;
	};
}

helper _addUnique(_owningSchemaName : String, _owningTableName : String, _constrainedColumnName : String, _name : String) : RDB::ops::AddUnique{
	return object RDB::ops::AddUnique {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		constrainedColumnName := _constrainedColumnName;
		name := _name;
		
	};
}

helper _addPrimaryKey(_owningSchemaName : String, _owningTableName : String, _constraineColumnName : String, _name : String) : RDB::ops::AddPrimaryKey{
	return object RDB::ops::AddPrimaryKey {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		constrainedColumnName := _constraineColumnName;
		name := _name;
	};
}

helper _addForeignKey(_owningSchemaName : String, _owningTableName : String, _constraineColumnName : String, _name : String, _targerTableName : String) : RDB::ops::AddForeignKey{
	return object RDB::ops::AddForeignKey {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		constrainedColumnName := _constraineColumnName;
		name := _name;
		targetTableName := _targerTableName;
	};
}

helper _addNotNull(_owningSchemaName : String, _owningTableName : String, _constraineColumnName : String, _name : String) : RDB::ops::AddNotNull{
	return object RDB::ops::AddNotNull {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		constrainedColumnName := _constraineColumnName;
		name := _name;
	};
}

helper _renameTable(_owningSchemaName : String, _name : String, _newName : String) : RDB::ops::RenameTable{
	return object RDB::ops::RenameTable {
		owningSchemaName := _owningSchemaName;
		name := _name;
		newName := _newName;
	};
}

helper _renameColumn(_owningSchemaName : String, _owningTableName : String, _name : String, _newName : String) : RDB::ops::RenameColumn{
	return object RDB::ops::RenameColumn {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		name := _name;
		newName := _newName;
	};
}

helper _setColumnType(_owningSchemaName : String, _owningTableName : String, _owningColumnName : String, _newType : String, _oldType : String) : RDB::ops::SetColumnType{
	return object RDB::ops::SetColumnType {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		owningColumnName := _owningColumnName;
		newType := _newType;
		oldType := _oldType;
	};
}

helper _setDefaultValue(_owningSchemaName : String, _owningTableName : String, _owningColumnName : String, _newDefaultValue : String) : RDB::ops::SetDefaultValue{
	return object RDB::ops::SetDefaultValue {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		owningColumnName := _owningColumnName;
		newDefaultValue := _newDefaultValue;
	};
}

helper _removeTable(_owningSchemaName : String, _name : String) : RDB::ops::RemoveTable {
	return object RDB::ops::RemoveTable {
		owningSchemaName := _owningSchemaName;
		name := _name;
	};
}

helper _removeColumn(_owningSchemaName : String, _owningTableName : String, _name : String) : RDB::ops::RemoveColumn{
	return object RDB::ops::RemoveColumn {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		name := _name;
	};
}

helper _removeConstraint(_owningSchemaName : String, _owningTableName : String, _name : String) : RDB::ops::RemoveConstraint{
	return object RDB::ops::RemoveConstraint {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		name := _name;
	};
}

helper _removeIndex(_owningSchemaName : String, _name : String) : RDB::ops::RemoveIndex {
	return object RDB::ops::RemoveIndex {
		owningSchemaName := _owningSchemaName;
		name := _name;
	};
}

helper _removeDefaultValue(_owningSchemaName : String, _owningTableName : String, _owningColumnName : String) : RDB::ops::RemoveDefaultValue{
	return object RDB::ops::RemoveDefaultValue {
		owningSchemaName := _owningSchemaName;
		owningTableName := _owningTableName;
		owningColumnName := _owningColumnName;
	};
}

helper _removeSequence(_owningSchemaName : String, _sequenceName : String) : RDB::ops::RemoveSequence{
	return object RDB::ops::RemoveSequence {
		owningSchemaName := _owningSchemaName;
		name := _sequenceName;
	};
}


/********************************************
 *				BUILD MODEL			 	*
 ********************************************/
helper _rdbStructure(inout _schemas : Set(Schema)) : RDB::Structure{
	return object Structure{
		schemas := _schemas;
	};
}

helper _schema( _name : String) : RDB::Schema{
	return object RDB::Schema{
		name := _name;
	};
}

helper _schema( _tables : OrderedSet(RDB::Table)) : RDB::Schema{
	return object RDB::Schema{
		name := "public";
		tables := _tables;
	};
}

helper _schema( _name : String, _sequence : RDB::Sequence) : RDB::Schema{
	var schema : RDB::Schema := _schema(_name);
	schema.sequence := _sequence;
	return schema;
}

helper _schema(_name : String, _tables : OrderedSet(RDB::Table)) : RDB::Schema{
	var schema : RDB::Schema := _schema(_tables);
	schema.name := _name;
	return schema;
}

helper _schema(_name : String, _tables : OrderedSet(RDB::Table), _sequence : RDB::Sequence) : RDB::Schema{
	var schema : RDB::Schema := _schema(_name, _tables);
	schema.sequence := _sequence;
	return schema;
}

helper _schema(_name : String, _tables : OrderedSet(RDB::Table), _sequence : RDB::Sequence, _indexes : OrderedSet(RDB::Index)) : RDB::Schema{
	var schema := _schema(_name, _tables, _sequence);
	schema.indexes := _indexes;
	return schema;
}

helper _table(_name : String) : Table {	
 	return object Table {
 		name := _name;
 	};
 }

helper _table(_name : String, _columns : OrderedSet(Column)) : Table {
	var table := _table(_name);
	table.columns := _columns;
	return table;
 }
 
 
 helper _table(_name : String, _columns : OrderedSet(Column), _constraints : OrderedSet(Constraint) ) : Table {	
 	var table : Table := _table(_name, _columns);
 	table.constraints := _constraints;
 	return table;
 }
 
 helper _index(_name : String, _columns : OrderedSet(Column)) : Index {
 	return object Index {
 		name := _name;
 		columns := _columns;
 	};
 }
 
 helper _primaryKey(_name : String, _constrainedColumn : Column) : PrimaryKey {
 	return object PrimaryKey {
 		name := _name;
 		constrainedColumn := _constrainedColumn;
 	};
 }
 
 helper _foreignKey(_name : String, _targetTable : Table, _constrainedColumn : Column) : ForeignKey {
 	return object ForeignKey {
 		name := _name;
 		targetTable := _targetTable;
 		constrainedColumn := _constrainedColumn;
 	};
 }
 
 helper _column(_name : String, _type : PrimitiveType) : Column {
 	return object Column {
 		name := _name;
 		type := _type;
 	};
 }
 
  helper _column(_name : String, _type : PrimitiveType, _defaultValue : String) : Column {
 	return object Column {
 		name := _name;
 		type := _type;
 		defaultValue := _defaultValue;
 	};
 }
 
 helper _sequence(_name : String, _startValue : Integer) : RDB::Sequence {
 	return object RDB::Sequence {
 		name := _name;
 		startValue := _startValue;
 	};
 }
 
  helper _unique(_name : String, _constrainedColumn : Column) : RDB::Unique{
 	return object Unique{
 		name := _name;
 		constrainedColumn := _constrainedColumn;
	};
 }
 
 helper _notNull(_name : String, _constrainedColumn : Column) : RDB::NotNull{
 	return object NotNull{
 		name := _name;
 		constrainedColumn := _constrainedColumn;
	};
 }