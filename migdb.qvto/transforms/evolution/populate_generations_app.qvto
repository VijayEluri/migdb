/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

modeltype APP uses app('http://www.collectionspro.eu/jam/mm/app');

transformation APP_To_Rdb(in inModel : APP, out outModel : APP);
main() {
	assert(inModel.rootObjects()->size() = 1);
	assert(inModel.rootObjects()->forAll(oclIsKindOf(APP::ModelRoot)));
	
	log("transformation started...");
	
	inModel.rootObjects().deepclone();

	var root : APP::ModelRoot = outModel.rootObjects()![APP::ModelRoot];
	var gen0 : APP::ModelGeneration = root.modelGenerations->first();
	
	root.operations->forEach(op) {
		log("gen0 " + gen0.repr());
		log("root " + root.repr());
		log("	iterating over operation " + op.repr());
		if (op.isValid(gen0)) then {
			log("	operation is valid " + op.repr());
			op.xmap apply(gen0);
		} else {
			log("	operation is invalid " + op.repr());
		} endif;
	};
	
	root.operations := root.operations->reject(true);
}

// kontrola validity operace
abstract query APP::operations::ModelOperation::
	isValid(gen : APP::ModelGeneration) : Boolean;

// namapovani dane operace
abstract mapping APP::operations::ModelOperation::
	apply(inout gen : APP::ModelGeneration);


/* ++++++++++ ADD OPERATIONS ++++++++++++++++++++ */

query APP::operations::AddClass::isValid(gen : APP::ModelGeneration) : Boolean {
	return not gen.isEntityInGeneration(self.name);
}

// pridani standardni tridy do generace / slozeno z AddEmptyClass a AddProperty
mapping APP::operations::AddClass::apply(inout gen : APP::ModelGeneration) {	
	
	object APP::operations::AddEmptyClass {
		name := self.name;
		isAbstract := self.isAbstract;
		inheritanceType := self.inheritanceType;
	}.xmap apply(gen);
	
	object APP::operations::AddProperty {
		owningClassName := self.name;
		name := "id";
		type := "Integer"; // gen0 musi obsahovat primitivni tridu Integer
		lowerBound := 1;
		upperBound := 1;
		isID := true;
	}.xmap apply(gen);
}

query APP::operations::AddEmptyClass::isValid(gen : APP::ModelGeneration) : Boolean {
	return not gen.isEntityInGeneration(self.name);
}

// pridani prazdne tridy do generace
mapping APP::operations::AddEmptyClass::apply(inout gen : APP::ModelGeneration) {
	gen.classes += object APP::Class {
		name := self.name;
		isAbstract := self.isAbstract;
		inheritanceType := self.inheritanceType;
	};
}

query APP::operations::AddPrimitiveClass::isValid(gen : APP::ModelGeneration) : Boolean {
	return not gen.isEntityInGeneration(self.name);
}

// pridani primitivni tridy do generace
mapping APP::operations::AddPrimitiveClass::apply(inout gen : APP::ModelGeneration) {
	gen.classes += object APP::PrimitiveClass {
		name := self.name;
		primitiveType := self.primitiveType;
	};
}

query APP::operations::AddEmbeddedClass::isValid(gen : APP::ModelGeneration) : Boolean {
	return not gen.isEntityInGeneration(self.name);
}

// pridani vestavene tridy do generace
mapping APP::operations::AddEmbeddedClass::apply(inout gen : APP::ModelGeneration) {
	gen.classes += object APP::EmbeddedClass {
		name := self.name;
	};
}

query APP::operations::AddProperty::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isPropertyInAbstractClass(self.owningClassName, self.name)
		   and gen.isEntityInGeneration(self.type)
		   and (self.lowerBound <= self.upperBound or (self.upperBound = -1 and self.lowerBound > self.upperBound));
}

// pridani atributu do tridy
mapping APP::operations::AddProperty::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
		
	c.properties += object APP::Property {
		name := self.name;
		type := gen.findEntity(self.type);
		defaultValue := self.defaultValue;
		lowerBound := self.lowerBound;
		upperBound := self.upperBound;
		isOrdered := self.isOrdered; // ma smysl jen pro upperBound = -1
		isUnique := self.isUnique; // my smysl jen pro upperBound = -1
		isID := self.isID;
		sequenceName := self.sequenceName;
	};
}


/* ++++++++++ SET OPERATIONS FOR CLASSES ++++++++++++++++++++ */

query APP::operations::SetOpposite::isValid(gen : APP::ModelGeneration) : Boolean {
	var pre : Boolean := 
	// tridy existuji v dane generaci
		gen.isAbstractClassInGeneration(self.firstClassName)
		and gen.isAbstractClassInGeneration(self.secondClassName)
    // atributy existuji v danych tridach
		and gen.findAbstractClass(self.firstClassName).oclAsType(APP::Class).isPropertyInClass(self.firstPropertyName)
		and gen.findAbstractClass(self.secondClassName).oclAsType(APP::Class).isPropertyInClass(self.secondPropertyName);
	if (self.isOpposite = true) then {
		return pre
		// nejedna se o oboustranne navigabilni asociaci
			and gen.findAbstractClass(self.firstClassName).oclAsType(APP::Class).findProperty(self.firstPropertyName).oppositeProperty = null
			and gen.findAbstractClass(self.secondClassName).oclAsType(APP::Class).findProperty(self.secondPropertyName).oppositeProperty = null;
	} else {
		return pre
		// jedna se o oboustranne navigabilni asociaci
			and gen.findAbstractClass(self.firstClassName).oclAsType(APP::Class).findProperty(self.firstPropertyName).oppositeProperty.name = self.secondPropertyName
			and gen.findAbstractClass(self.secondClassName).oclAsType(APP::Class).findProperty(self.secondPropertyName).oppositeProperty.name = self.firstPropertyName;
	} endif;
	
	// nedosazitelny stav
	return null;
}

mapping APP::operations::SetOpposite::apply(inout gen : APP::ModelGeneration) {
	var p1 : APP::Property := gen.findAbstractClass(self.firstClassName).oclAsType(APP::Class).findProperty(self.firstPropertyName);
	var p2 : APP::Property := gen.findAbstractClass(self.secondClassName).oclAsType(APP::Class).findProperty(self.secondPropertyName);
	if (self.isOpposite = true) then {
		p1.oppositeProperty := p2;
		p2.oppositeProperty := p1;
	} else {
		p1.oppositeProperty := null;
		p2.oppositeProperty := null;
	} endif;	
}

query APP::operations::SetAbstract::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.name);
}

mapping APP::operations::SetAbstract::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.name).oclAsType(APP::Class);
	c.isAbstract := self.isAbstract;
}

/**
 * SETPARENT
 * Nastaveni predka vybrane tride. Je nutne overit, zda obe tridy existuji v generaci.
 * Dale musime overit, zda novym spojenim nevytvorime kruh v hierarchii.
 * @param String name : jmeno tridy, ktere chceme dat noveho predka   
 * @param String parentName : jmeno noveho predka
 */
query APP::operations::SetParent::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.name)
		   and gen.isAbstractClassInGeneration(self.parentName);
		   //and not gen.findAbstractClass(self.parentName).oclAsType(APP::Class).isDescendantOf(self.name);
}

mapping APP::operations::SetParent::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.name).oclAsType(APP::Class);
	c.parent := gen.findAbstractClass(self.parentName).oclAsType(APP::Class);	
	// Je nutne po pridani tridy do hierarchie overit, zda ma sloupec ID a pokud ano, tak jej smazat
	if (c.properties->exists(isID = true)) then {
		c.properties := c.properties->excluding(c.properties->selectOne(isID = true));
	}endif;
}

/* ++++++++++ SET OPERATIONS FOR PROPERTIES ++++++++++++++++++++ */

query APP::operations::SetType::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.owningClassName)
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.name)
		   and gen.isAbstractClassInGeneration(self.type);
}

mapping APP::operations::SetType::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
	var p : APP::Property := c.findProperty(self.name);
	p.type := gen.findAbstractClass(self.type); // null
}

query APP::operations::SetBoundries::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.owningClassName)
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.name)
		   // overi, zda-li jsou hranice nastaveny smysluplne
		   and (self.lowerBound <= self.upperBound or (self.upperBound = -1 and self.lowerBound > self.upperBound))
}

// nastavi hranice atributu
mapping APP::operations::SetBoundries::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
	var p : APP::Property := c.findProperty(self.name);
	// nastavi dolni hranici atributu
	p.lowerBound := self.lowerBound;
	// nastavi horni hranici atributu
	p.upperBound := self.upperBound;
}

query APP::operations::SetOrdered::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.owningClassName)
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.name);
}

mapping APP::operations::SetOrdered::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
	var p : APP::Property := c.findProperty(self.name);
	p.isOrdered := self.isOrdered;
}

query APP::operations::SetUnique::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.owningClassName)
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.name);
}

mapping APP::operations::SetUnique::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
	var p : APP::Property := c.findProperty(self.name);
	p.isUnique := self.isUnique;
}


/* ++++++++++ EDIT OPERATIONS ++++++++++++++++++++ */

query APP::operations::RenameEntity::isValid(gen : APP::ModelGeneration) : Boolean {
	// trida s nazvem @name existuje v generaci
	return gen.isAbstractClassInGeneration(self.name)
	// trida s nazvem @newName neexistuje v generaci
		   and not gen.isAbstractClassInGeneration(self.newName);
}

mapping APP::operations::RenameEntity::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Entity := gen.findAbstractClass(self.name);
	// zmena hodnoty atributu name
	c.name := self.newName;
}

query APP::operations::RenameProperty::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isAbstractClassInGeneration(self.owningClassName)
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.name)
		   and not gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.newName);
}

mapping APP::operations::RenameProperty::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
	var p : APP::Property := c.findProperty(self.name);
	p.name := self.newName;
}

/* ++++++++++ REMOVE OPERATIONS ++++++++++++++++++++ */

/**
 * REMOVEENTITY
 * Operace pro odstraneni entity z generace [Class, PrimitiveClass, EmbeddedClass]
 * Podle typu entity se lisi testovaci query pred smazanim.
 * @param String name : jmeno tridy, kterou chceme smazat
 */
query APP::operations::RemoveEntity::isValid(gen : APP::ModelGeneration) : Boolean {
	var e : APP::Entity := gen.findAbstractClass(self.name);
	// entita existuje v generaci
	var exists : Boolean := gen.isAbstractClassInGeneration(self.name);
	// na tridu se neodkazuje zadna jina trida
	var odkaz : Boolean := not gen.classes->oclAsType(APP::Class).properties->exists(type = self);
	if (e.oclIsKindOf(APP::Class)) then {
		return exists and odkaz
			// tridi neobsahuje zadne atributy
	       	   and (gen.findAbstractClass(self.name).oclAsType(APP::Class).properties->isEmpty()
			// nebo obsahuje prave jeden s vlastnosti 'id'
	       		    or gen.findAbstractClass(self.name).oclAsType(APP::Class).properties->forAll(isID = true))
			// trida neni v hierarchii
		       and not gen.classes->oclAsType(APP::Class)->exists(parent.name = self.name);
	} endif;
	if(e.oclIsKindOf(APP::PrimitiveClass)) then { return exists and odkaz; } endif; 
	
	// Typ entity je Embedded
	return exists and odkaz and gen.findAbstractClass(self.name).oclAsType(APP::Class).properties->isEmpty();
}

// odstrani tridu z dane generace
mapping APP::operations::RemoveEntity::apply(inout gen : APP::ModelGeneration) {
	// odstraneni tridy
	gen.classes := gen.classes->excluding(gen.findAbstractClass(self.name));
}

query APP::operations::RemoveProperty::isValid(gen : APP::ModelGeneration) : Boolean {
    // atribut existuje v dane tride
	return gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).isPropertyInClass(self.name)
	// atribut nema vlastnost 'id'
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).findProperty(self.name).isID = false
	// neexistuje asociace z jine tridy
		   and gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class).findProperty(self.name).oppositeProperty = null;
}

// odstrani atribut z dane tridy
mapping APP::operations::RemoveProperty::apply(inout gen : APP::ModelGeneration) {
	var c : APP::Class := gen.findAbstractClass(self.owningClassName).oclAsType(APP::Class);
	// odstraneni atributu
	c.properties := c.properties->excluding(c.findProperty(self.name));
}

/* ++++++++++ COMPLEX OPERATIONS ++++++++++++++++++++ */

query APP::operations::CopyProperty::isValid(gen : APP::ModelGeneration) : Boolean {
	return gen.isPropertyInAbstractClass(self.owningClassName, self.name) 
		   and gen.isClassInGeneration(self.targetClassName)
		   and not gen.isPropertyInAbstractClass(self.targetClassName, self.name)
		   and (gen.isInHierarchy(self.owningClassName, self.targetClassName)
		   		or gen.isInHierarchy(self.targetClassName, self.owningClassName));
}

mapping APP::operations::CopyProperty::apply(inout gen : APP::ModelGeneration){
	var c : APP::AbstractClass := gen.findAbstractClass(self.targetClassName);
	var p : APP::Property := gen.findPropertyInAbstractClass(self.owningClassName, self.name);
	
	c.properties += object APP::Property {
		name := p.name;
		type := p.type;
		defaultValue := p.defaultValue;
		lowerBound := p.lowerBound;
		upperBound := p.upperBound;
		isOrdered := p.isOrdered;
		isUnique := p.isUnique;
	};
}

query APP::operations::MoveProperty::isValid(gen : APP::ModelGeneration) : Boolean{
	return gen.isPropertyInAbstractClass(self.owningClassName, self.name) 
		   and gen.isClassInGeneration(self.targetClassName)
		   and not gen.isPropertyInAbstractClass(self.targetClassName, self.name)
		   and (gen.isInHierarchy(self.owningClassName, self.targetClassName)
		   		or gen.isInHierarchy(self.targetClassName, self.owningClassName));
}


mapping APP::operations::MoveProperty::apply(inout gen : APP::ModelGeneration){
	var t : APP::AbstractClass := gen.findAbstractClass(self.targetClassName);
	var o : APP::AbstractClass := gen.findAbstractClass(self.owningClassName);
	var p : APP::Property := gen.findPropertyInAbstractClass(self.owningClassName, self.name);
	
	t.properties += object APP::Property {
		name := p.name;
		type := p.type;
		defaultValue := p.defaultValue;
		lowerBound := p.lowerBound;
		upperBound := p.upperBound;
		isOrdered := p.isOrdered;
		isUnique := p.isUnique;
	};
	
	o.properties := o.properties->excluding(p);
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

query APP::ModelGeneration::isEntityInGeneration(eName : String) : Boolean {
	return self.classes->exists(name = eName);
}

query APP::ModelGeneration::findEntity(eName : String) : APP::Entity {
	return self.classes![name = eName];
}

query APP::ModelGeneration::isPrimitiveClassInGeneration(cName : String) : Boolean {
	return self.isEntityInGeneration(cName).oclIsTypeOf(APP::PrimitiveClass);
}

query APP::ModelGeneration::findPrimitiveClass(cName : String) : APP::PrimitiveClass {
	return self.findEntity(cName).oclAsType(APP::PrimitiveClass);
}

query APP::ModelGeneration::isAbstractClassInGeneration(cName : String) : Boolean {
	return self.isEntityInGeneration(cName).oclIsTypeOf(APP::AbstractClass);
}

query APP::ModelGeneration::findAbstractClass(cName : String) : APP::AbstractClass {
	return self.findEntity(cName).oclAsType(APP::AbstractClass);
}

query APP::ModelGeneration::isPropertyInAbstractClass(cName : String, pName : String) : Boolean {
	return self.findAbstractClass(cName).properties->exists(name = pName);
}

query APP::ModelGeneration::findPropertyInAbstractClass(cName : String, pName : String) : APP::Property {
	return self.findAbstractClass(cName).properties![name = pName];
}






// overi, zda-li v generaci existuje standardni trida s danym jmenem
query APP::ModelGeneration::isClassInGeneration(cName : String) : Boolean {
	return self.classes.oclAsType(APP::Class)->exists(name = cName);
}




// overi, zda-li ve tride existuje atribut daneho jmena
query APP::Class::isPropertyInClass(pName : String) : Boolean {
	return self.properties->exists(name = pName);
}

// vrati atribut danaho jmena
query APP::Class::findProperty(pName : String) : APP::Property {
	return self.properties->selectOne(name = pName);
}


// overime, zda-li je trida potomkem tridy cName
query APP::Class::isDescendantOf(cName : String) : Boolean {
	if (self.parent <> null and self.parent.name = cName) then return true
	else return self.parent.isDescendantOf(cName) endif;
	return false;
}

// overi, zda-li je trida sClass rodicem tridy fClass
query APP::ModelGeneration::isInHierarchy(fClass : String, sClass : String) : Boolean {
	var ourClass : APP::Class := self.findAbstractClass(fClass).oclAsType(APP::Class);
	if(ourClass <> null) then {
		if (ourClass.parent <> null and ourClass.parent = sClass) then {
			return true;
		} endif;
		if (ourClass.parent <> null) then {
			return self.isInHierarchy(ourClass.parent.name, sClass);
		} endif;
	}endif;
	return false;
}

// overi, zda-li v hierarchii existuje atribut se stejnem nazvem
query APP::ModelGeneration::isPropertyInHierarchy(cName : String, pName : String) : Boolean {
	// pro kazdy atribut se stejnym nazvem...
	self.classes->oclAsType(APP::Class).properties->forEach(p | p.name = pName) {
		// ...overime, zda-li se tridy, kterym tyto atributy nalezi, nachazi ve stejne hierarchii
		if (self.isInHierarchy(cName, p.owningClass.name) = true or self.isInHierarchy(p.owningClass.name, cName) = true) then {
			return true;
		} endif;
	};
	return false;
}
