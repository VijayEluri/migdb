modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";

transformation buildRDB(inout inoutModel : RDB);

main() {
	var columnIdCountry : RDB::Column := object RDB::Column {
		name := "id";
		type := PrimitiveType::int;
	};
	
	var indexCountry : RDB::Index := object RDB::Index {
		name := "IX_country_id";
		columns := Set{columnIdCountry};
	};
	
	var pkCountry : RDB::PrimaryKey := object RDB::PrimaryKey {
		name := "PK_country";
		underlyingIndex := indexCountry;
	};

	var columnNameCountry : RDB::Column := object RDB::Column {
		name := "name";
		type := PrimitiveType::char;
	};

	var tableCountry : RDB::Table := object RDB::Table {
		name := "country";
		columns := Set{columnIdCountry, columnNameCountry};
		constraints := Set{pkCountry};
	};

	var columnIdParty : RDB::Column := object RDB::Column {
		name := "id";
		type := PrimitiveType::int;
	};
	
	var indexParty : RDB::Index := object RDB::Index {
		name := "IX_party_id";
		columns := Set{columnIdParty};
	};
	
	var pkParty : RDB::PrimaryKey := object RDB::PrimaryKey {
		name := "PK_party";
		underlyingIndex := indexParty;
	};
	
	var columnCity : RDB::Column := object RDB::Column {
		name := "city";
		type := PrimitiveType::char;
	};	
	
	var columnStreet : RDB::Column := object RDB::Column {
		name := "street";
		type := PrimitiveType::char;
	};
	
	var columnZip : RDB::Column := object RDB::Column {
		name := "zip";
		type := PrimitiveType::int;
	};	
	
	var fkZip : RDB::ForeignKey := object RDB::ForeignKey {
		name := "FK_party_country";
		targetTable := tableCountry;
		constrainedColumn := columnZip;
	};

	var tableParty : RDB::Table := object RDB::Table {
		name := "party";
		columns := Set{columnIdParty, columnStreet, columnCity, columnZip};
		constraints := Set{pkParty, fkZip};
	};
	
	var columnIdLegalPerson : RDB::Column := object RDB::Column {
		name := "id";
		type := PrimitiveType::int;
	};
	
	var indexLegalPerson : RDB::Index := object RDB::Index {
		name := "IX_legalperson_id";
		columns := Set{columnIdParty};
	};
	
	var pkLegalPerson : RDB::PrimaryKey := object RDB::PrimaryKey {
		name := "PK_legalperson";
		underlyingIndex := indexLegalPerson;
	};
	
	var columnRegNo : RDB::Column := object RDB::Column {
		name := "regNo";
		type := PrimitiveType::int;
	};	
	
	var columnBusName : RDB::Column := object RDB::Column {
		name := "busName";
		type := PrimitiveType::char;
	};	
	
	var tableLegalPerson : RDB::Table := object RDB::Table {
		name := "legalperson";
		columns := Set{columnIdLegalPerson, columnRegNo, columnBusName};
		constraints := Set{pkLegalPerson};
	};
	
	var columnIdNaturalPerson : RDB::Column := object RDB::Column {
		name := "id";
		type := PrimitiveType::int;
	};
	
	var indexNaturalPerson : RDB::Index := object RDB::Index {
		name := "IX_naturalperson_id";
		columns := Set{columnIdNaturalPerson};
	};
	
	var pkNaturalPerson : RDB::PrimaryKey := object RDB::PrimaryKey {
		name := "PK_naturalperson";
		underlyingIndex := indexNaturalPerson;
	};
	
	var columnName : RDB::Column := object RDB::Column {
		name := "name";
		type := PrimitiveType::char;
	};	
	
	var columnSurname : RDB::Column := object RDB::Column {
		name := "surname";
		type := PrimitiveType::char;
	};		
	
	var tableNaturalPerson : RDB::Table := object RDB::Table {
		name := "naturalperson";
		columns := Set{columnIdNaturalPerson, columnName, columnSurname};
		constraints := Set{pkNaturalPerson};
	};		
	
	var schema : RDB::Schema := object RDB::Schema {
		name := "public";
		tables := Set{tableCountry, tableParty, tableLegalPerson, tableNaturalPerson};
		sequences := Set{ object RDB::Sequence{name := "seq_global"; startValue := 1;}};
		indexes:= Set{indexCountry, indexParty, indexLegalPerson, indexNaturalPerson};
	};
	
	var model : RDB::ModelRoot := object ModelRoot {
		modelGenerations += object ModelGeneration {
			isMissing := false;
			schemas += Set{schema};
		};
	 };

}
