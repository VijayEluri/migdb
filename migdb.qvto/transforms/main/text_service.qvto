library text_service;

/*
	This file provides String constants and methods to manipulate with Strings. It is independent 
	to any metamodel. Methods connected with database metamodel contains Db word.
*/

/**
	Returns discriminator column constant 
**/
query getDbDiscriminatorColumnName() : String{
	return "discriminator";
}

/**
	Translate identifier from app into db. Upper characters are transformed into lower chars,
 	words are divided by character '_'
**/
query String :: translate() : String{
	var dbName : String := self.at(1).toLower();
	var i : Integer := 2; 
	while(self.size() >= i){
		if(self.at(i).toLower() != self.at(i))then{
			dbName := dbName + "_" + self.at(i).toLower();
		}else{
			dbName := dbName + self.at(i);
		}endif;
		i:= i + 1;
	};
	return dbName;
}

/** returns column name for ordered collections **/ 
query getDbOrderingColumnName() : String {
	return "ordering";
}

query getIdName(className : String) : String{
	return getIdPrefix() + className;
}

query getIdPrefix() : String{
	return "id";
}

query getDbIdPrefix() : String{
	return "id_";
}

query getDbIdColumnName(tableName : String) : String{
	return getDbIdPrefix() + tableName;
}

/** Helper query for String manipulation **/
query String::at(index : Integer) : String{
	return self.substring(index,index);
}

query getDbFkParentPrefix() : String{
	return getDbFkPrefix() + "parent_";
}

query getDbUniquePrefix() : String{
	return "ux_";
}

query getDbOrderedPrefix() : String{
	return "ordered_";
}

query getDbPkPrefix() : String{
	return "pk_";
}

query getDbFkPrefix() : String{
	return "fk_";	
}

query getDbCollectionPrefix() : String{
	return "col_";
}

/**
	There can be only one ordering column in table so tableName is also identifier for each 
unique ordering constraint
**/
query getDbOrderingConstraintName(tableName : String ) : String{
	return getDbUniquePrefix() + getDbOrderedPrefix() + tableName;
}

// 
query getDbPrimaryKeyName(tableName : String) : String{
	return getDbPkPrefix() + tableName;
}