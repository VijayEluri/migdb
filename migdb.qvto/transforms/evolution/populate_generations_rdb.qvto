modeltype RDB uses rdb('http://www.collectionspro.eu/jam/mm/rdb');

transformation DB_To_Rdb(in inModel : RDB, out outModel : RDB);
main() {
	assert(inModel.rootObjects()->size() = 1);
	assert(inModel.rootObjects()->forAll(oclIsKindOf(RDB::ModelRoot)));

	log("transformation started...");

	inModel.rootObjects().deepclone();

	var root : RDB::ModelRoot = outModel.rootObjects()![RDB::ModelRoot];
	var gen0 : RDB::ModelGeneration = root.modelGenerations->first();

	root.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(gen0)) then {
			log("	operation is valid " + op.repr());
			op.xmap apply(gen0);
		} else {
			log("	operation is invalid " + op.repr());
			break;
		} endif;
	};

	// root.operations := root.operations->reject(true);
}

abstract query RDB::operations::ModelOperation::
	isValid(gen : RDB::ModelGeneration) : Boolean;

abstract mapping RDB::operations::ModelOperation::
	apply(inout gen : RDB::ModelGeneration);


/********************************************************************************
 *								ADD OPERATIONS									*
 ********************************************************************************/


/**
 * ADD SCHEMA
 * Operation create new database schema in generation model
 * @restriction : schema with @name must not exists in generation
 */
query RDB::operations::AddSchema::isValid(gen : RDB::ModelGeneration) : Boolean {
	return not gen.isSchemaInGeneration(self.name);
}

mapping RDB::operations::AddSchema::apply(inout gen : RDB::ModelGeneration) {
	gen.schemas += object RDB::Schema {
		name := self.name;
	}
}

/**
 * ADD SEQUENCE
 * we can use only one global sequence in the system. 
 * Operation is something like singleton - Sequence can be created only one times.
 * @restriction : sequence with @newDefaultValue must not exists in generation
 * @restriction : in the schema must not be other sequence
 */
query RDB::operations::AddSequence::isValid(gen : RDB::ModelGeneration) : Boolean {
	return not gen.isSequenceInSchema(self.owningSchemaName, self.name) 
	       and gen.findSchema(self.owningSchemaName)->sequences->size() = 0;
}

mapping RDB::operations::AddSequence::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.sequences += object RDB::Sequence {
		name := self.name;
		startValue := self.startValue;
	}
}

/**
 * ADD INDEX
 * Create index in defined schema.
 * @restriction : in the schema must not be an index with the same @name.
 * @restriction : columns with @columnsNames must exists in table
 */
query RDB::operations::AddIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
	return not gen.isIndexInSchema(self.owningSchemaName, self.name)
		   and gen.areColumnsInTable(self.owningSchemaName, self.owningTableName, self.columnsNames);
}

mapping RDB::operations::AddIndex::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.indexes += object RDB::Index {
		name := self.name;		
		columns += gen.findColumns(self.owningSchemaName, self.owningTableName, self.columnsNames);
	}
}

/**
 * ADD TABLE
 * Create table in defined schema.
 * @restriction : in the schema must not be a table with the same @name.
 */
query RDB::operations::AddTable::isValid(gen : RDB::ModelGeneration) : Boolean {
	return not gen.isTableInSchema(self.owningSchemaName, self.name);
}

mapping RDB::operations::AddTable::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.tables += object RDB::Table {
		name := self.name;
	};
}

query RDB::operations::AddColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dane tabulce neexistuje sloupec stejneho nazvu
	return not gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name);
}

// prida sloupec do tabulky
mapping RDB::operations::AddColumn::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.columns += object RDB::Column {
		name := self.name;
		type := self.type;
		defaultValue := self.defaultValue;
	}
}

/**
 * ADD UNIQUE INDEX
 * Create unique constraint on defined column.
 * @restriction : in the table must not be a constraint with the same @name.
 * @restriction : index with @underlyingIndexName must exists in schema
 * @restriction : column with @columnName must exists in table
 */
query RDB::operations::AddUniqueIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
		   and gen.isIndexInSchema(self.owningSchemaName, self.underlyingIndexName)
		   and gen.areColumnsInTable(self.owningSchemaName, self.owningTableName, self.columnsNames);
}

mapping RDB::operations::AddUniqueIndex::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::UniqueIndex {
		name := self.name;
		underlyingIndex := gen.findIndex(self.owningSchemaName, self.underlyingIndexName);
	}
}

query RDB::operations::AddPrimaryKey::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezeni stejneho nazvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v danem schematu existuje dany index
	and gen.isIndexInSchema(self.owningSchemaName, self.underlyingIndexName)
	// v dane tabulce existuje dany sloupec
	and gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.columnName);
}

// prida omezeni 'PrimaryKey' pro tabulku
mapping RDB::operations::AddPrimaryKey::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::PrimaryKey {
		name := self.name;
		underlyingIndex := gen.findIndex(self.owningSchemaName, self.underlyingIndexName);
	}
}

query RDB::operations::AddForeignKey::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezeni stejneho nazvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v cilove tabulce existuje dany sloupce
	and gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.constrainedColumnName);
}

// prida omezeni 'ForeignKey' pro tabulku
mapping RDB::operations::AddForeignKey::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::ForeignKey {
		name := self.name;
		targetTable := gen.findTable(self.owningSchemaName, self.targetTableName);
		constrainedColumn := gen.findColumn(self.owningSchemaName, self.targetTableName, self.constrainedColumnName);
	}
}

query RDB::operations::AddNotNullConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
	return not gen.isConstraintForColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name);	   
}

// prida omezeni 'NotNull' pro sloupec
mapping RDB::operations::AddNotNullConstraint::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.constraints += object RDB::NotNullConstraint {
		name := self.name;
	}
}

/********************************************************************************
 *								SET OPERATIONS									*
 ********************************************************************************/

query RDB::operations::RenameTable::isValid( gen : RDB::ModelGeneration) : Boolean {
	// tabulka s nazvem @name existuje ve schematu
	return gen.isTableInSchema(self.owningSchemaName, self.name)
	// tabulka s nazvem @newName neexistuje ve schematu
		   and not gen.isTableInSchema(self.owningSchemaName, self.newName);
}

mapping RDB::operations::RenameTable::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.name);
	// zmena hodnoty atributu name
	t.name := self.newName;
}

query RDB::operations::RenameColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
	// sloupec s nazvem @name existuje v tabulce
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
	// sloupec s nazvem @newName neexistuje v tabulce
		   and not gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.newName);
}

mapping RDB::operations::RenameColumn::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.name);
	// zmena hodnoty atributu name
	c.name := self.newName;
}

/**
 * SET COLUMN TYPE
 * This operation replace old type of column with a new type of column
 * Column and new type must exists in actual model generation. 
 * @restriction : column with @name must exists in table
 */
query RDB::operations::SetColumnType::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

mapping RDB::operations::SetColumnType::apply(inout gen : RDB::ModelGeneration){
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.type := self.newType;
}

/**
 * SET COLUMN DEFAULT VALUE
 * This operation set new default value to column
 * Column must exists in actual model generation. 
 * If is property isSequence set on TRUE - Sequence must exist in generation - this information is used only in SQL generator
 * In sequence case @newDefaultValue means name of sequence in model generation
 * @restriction : column with @owningColumnName must exists in table
 */
query RDB::operations::SetColumnDefaultValue::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

mapping RDB::operations::SetColumnDefaultValue::apply(inout gen : RDB::ModelGeneration){
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.defaultValue := self.newDefaultValue;
}

query RDB::operations::UpdateColumnConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName).constraints->size() > 0;	
}
	
mapping RDB::operations::UpdateColumnConstraint::apply(inout gen : RDB::ModelGeneration) {
	
}



/********************************************************************************
 *							 REMOVE OPERATIONS									*
 ********************************************************************************/

/**
 * REMOVE TABLE
 * This operation remove table from schema and generation.
 * @restriction : table with @name must exists in generation
 * @restriction : table must not have columns
 * @restriction : table must not have table constraints
 */
query RDB::operations::RemoveTable::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isTableInSchema(self.owningSchemaName, self.name)
		   and gen.findTable(self.owningSchemaName, self.name).columns->size() = 0
		   and gen.findTable(self.owningSchemaName, self.name).constraints->size() = 0;
}

mapping RDB::operations::RemoveTable::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.tables := s.tables->excluding(gen.findTable(self.owningSchemaName, self.name));
}

query RDB::operations::RemoveColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
    // sloupec existuje v dane tabulce
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje tabulkove omezeni 'Unique'
		   and not gen.isUnique(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje tabulkove omezeni 'PrimaryKey'
		   and not gen.isPrimaryKey(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje tabulkove omezeni 'ForeignKey'
		   //and not gen.isForeignKey(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje sloupcove omezeni 'NotNull'
		   //and not gen.isNotNull(self.owningSchemaName, self.owningTableName, self.name);
}

// odstrani atribut z dane tridy
mapping RDB::operations::RemoveColumn::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.name);
	t.constraints->forEach(r) {
		if (r.oclAsType(RDB::ForeignKey).constrainedColumn = c.name) then {
				t.constraints := t.constraints->excluding(r);
		} endif;
	};
	// odstraneni sloupce
	t.columns := t.columns->excluding(c);
}

query RDB::operations::RemoveTableConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
    // omezeni existuje pro danou tabulku
	return gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name);
}

// odstrani omezeni pro danou tabulku
mapping RDB::operations::RemoveTableConstraint::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	// odstraneni omezeni
	t.constraints := t.constraints->excluding(gen.findTableConstraint(self.owningSchemaName, self.owningTableName, self.name));
}

query RDB::operations::RemoveColumnConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
    // omezeni existuje pro dany sloupec
	return gen.isConstraintForColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name);
}

// odstrani omezeni pro dany sloupec
mapping RDB::operations::RemoveColumnConstraint::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	// odstraneni omezeni
	c.constraints := c.constraints->excluding(gen.findColumnConstraint(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name));
}

query RDB::operations::RemoveIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
    // index existuje v danem schematu
	return gen.isIndexInSchema(self.owningSchemaName, self.name);
}

// odstrani index z daneho schematu
mapping RDB::operations::RemoveIndex::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	// odstraneni indexu
	s.indexes := s.indexes->excluding(gen.findIndex(self.owningSchemaName, self.name));
}

/**
 * REMOVE DEFAULT VALUE
 * This operation remove default value and set value to NULL
 * Column must exists in actual model generation.
 * @restriction :  column with @name must exists in generation
 */
query RDB::operations::RemoveDefaultValue::isValid(gen : RDB::ModelGeneration) : Boolean { 
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

mapping RDB::operations::RemoveDefaultValue::apply(inout gen : RDB::ModelGeneration){
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.defaultValue := null;
}

/********************************************************************************
 *								DATA OPERATIONS									*
 ********************************************************************************/

/**
 * COPY INSTANCES
 * This operation copy data from one column to another. 
 * Target and source column can be in the same table.
 * MergeType:
 * strict -> Can not transfer data if a tables have different number of instances (rows).
 * force -> Delete rows if there is more instancef in source table. If source table has less number
 * of instances add default value or null.
 * @restriction : column with @sourceColumnName must exists in table
 * @restriction : target column with @targetColumnName must exists in table
 * @restriction : target and source column type must be same
 */
query RDB::operations::CopyInstances::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.sourceColumnName)
		   and gen.isColumnInTable(self.owningSchemaName, self.targetTableName, self.targetColumnName)
		   and gen.isSameColumnType(self.owningSchemaName, self.owningTableName, self.sourceColumnName, self.targetTableName, self.targetColumnName);
}

mapping RDB::operations::CopyInstances::apply(inout gen : RDB::ModelGeneration){
}

/**
 * INSERT INSTANCES
 * This operation copy data from collection of columns.
 * @restriction : columns with @sourceColumnNames must exists in source table
 * @restriction : columns with @targetColumnNames must exists in target table
 * @restriction : columns must have same name and column type
 */
query RDB::operations::InsertInstances::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.areColumnsInTable(self.owningSchemaName, self.sourceTableName, self.sourceColumnsNames)
		   and gen.areColumnsInTable(self.owningSchemaName, self.targetTableName, self.targetColumnsNames)
		   and gen.areSameColumnsTypes(self.owningSchemaName, self.sourceTableName, self.sourceColumnsNames, self.targetTableName, self.targetColumnsNames);
}

mapping RDB::operations::InsertInstances::apply(inout gen : RDB::ModelGeneration) {

}

/**
 * HAS NO OWN INSTANCES
 * This operation check if table has some own rows.
 * @restriction : table with @tableName must exists in generation
 * @restriction : child tables with @descendantNames must exists in generation
 */
query RDB::operations::HasNoOwnInstances::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isTableInSchema(self.owningSchemaName, self.tableName)
		   and gen.areTablesInSchema(self.owningSchemaName, self.descendantsNames);
}

mapping RDB::operations::HasNoOwnInstances::apply(inout gen : RDB::ModelGeneration) {

}

/**
 * HAS NO INSTANCES
 * This operation check if table has any rows.
 * @restriction : table with @tableName must exists in generation
 */
query RDB::operations::HasNoInstances::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isTableInSchema(self.owningSchemaName, self.tableName);
}

mapping RDB::operations::HasNoInstances::apply(inout gen : RDB::ModelGeneration) {

}

/**
 * ADD INSTANCES
 * This operation add defined number of rows to defined tables.
 * @restriction : table with @sourceTableName must exists in generation
 * @restriction : target tables with @name must exists in generation
 */
query RDB::operations::AddInstances::isValid(gen : RDB::ModelGeneration) : Boolean {
	return gen.isTableInSchema(self.owningSchemaName, self.sourceTableName)
		   and gen.areTablesInSchema(self.owningSchemaName, self.targetTableNames);
}

mapping RDB::operations::AddInstances::apply(inout gen : RDB::ModelGeneration){
}


/********************************************************************************
 *									QUERIES										*
 ********************************************************************************/

// overi, zda-li existuje schema v generaci
query RDB::ModelGeneration::isSchemaInGeneration(sName : String) : Boolean {
	return self.schemas->exists(name = sName);
}

// vrati schema z generace
query RDB::ModelGeneration::findSchema(sName : String) : RDB::Schema {
	return self.schemas->selectOne(name = sName);
}

// overi, zda-li existuje sekvence ve schematu
query RDB::ModelGeneration::isSequenceInSchema(sName : String, qName : String) : Boolean {
	return self.findSchema(sName).sequences->exists(name = qName);
}

// vrati sequenci z generace
query RDB::ModelGeneration::findSequence(sName : String, qName : String) : RDB::Sequence {
	return self.findSchema(sName).sequences->selectOne(name = qName);
}

// overi, zda-li existuje index ve schematu
query RDB::ModelGeneration::isIndexInSchema(sName : String, iName : String) : Boolean {
	return self.findSchema(sName).indexes->exists(name = iName);
}

// vrati index ze schema
query RDB::ModelGeneration::findIndex(sName : String, iName : String) : RDB::Index {
	return self.findSchema(sName).indexes->selectOne(name = iName);
}

// overi, zda-li existuje tabulka ve schematu
query RDB::ModelGeneration::isTableInSchema(sName : String, tName : String) : Boolean {
	return self.findSchema(sName).tables->exists(name = tName);
}

// overi, zda-li existuji tabulky ve schematu
query RDB::ModelGeneration::areTablesInSchema(sName : String, tNames : OrderedSet(String)) : Boolean {
	return tNames->forAll(name | self.isTableInSchema(sName, name));
//	var b : Boolean := true;
//	tNames->forEach(tName) {
//		b := b and self.isTableInSchema(sName, tName);
//	};
//	return b;
}

// vrati tabulku ze schematu
query RDB::ModelGeneration::findTable(sName : String, tName : String) : RDB::Table {
	return self.findSchema(sName).tables->selectOne(name = tName);
}

/**
 * IS COLUMN IN TABLE
 * Query tested the existence of the given column in the table.
 */
query RDB::ModelGeneration::isColumnInTable(sName : String, tName : String, cName : String) : Boolean {
	return self.findTable(sName, tName).columns->exists(name = cName);
}

/**
 * ARE COLUMNS IN TABLE
 * Query tested the existence of the given columns in the table.
 */
query RDB::ModelGeneration::areColumnsInTable(sName : String, tName : String, cNames : OrderedSet(String)) : Boolean {
	return cNames->forAll(name | self.isColumnInTable(sName, tName, name));
}

// vrati sloupec z tabulky
query RDB::ModelGeneration::findColumn(sName : String, tName : String, cName : String) : RDB::Column {
	return self.findTable(sName, tName).columns->selectOne(name = cName);
}

// vrati serazenou mnozinu sloupcu z tabulky
query RDB::ModelGeneration::findColumns(sName : String, tName : String, cNames : OrderedSet(String)) : OrderedSet(RDB::Column) {
	var columns : OrderedSet(RDB::Column);
	cNames->forEach(cName) {
		columns += self.findColumn(sName, tName, cName);
	};
	return columns;
}

// overi, zda-li existuje omezeni pro tabulku
query RDB::ModelGeneration::isConstraintForTable(sName : String, tName : String, rName : String) : Boolean {
	return self.findTable(sName, tName).constraints->exists(name = rName);
}

// overi, zda-li existuje omezeni pro sloupec 
query RDB::ModelGeneration::isConstraintForColumn(sName : String, tName : String, cName : String, rName : String) : Boolean {
	return self.findColumn(sName, tName, cName).constraints->exists(name = rName);
}

// vrati omezeni dane tabulky
query RDB::ModelGeneration::findTableConstraint(sName : String, tName : String, rName : String) : RDB::TableConstraint {
	return self.findTable(sName, tName).constraints->selectOne(name = rName);
}

// vrati omezeni daneho sloupce
query RDB::ModelGeneration::findColumnConstraint(sName : String, tName : String, cName : String, rName : String) : RDB::ColumnConstraint {
	return self.findColumn(sName, tName, cName).constraints->selectOne(name = rName);
}

// overi, zda-li existuje pro sloupec tabulkove omezeni 'Unique'
query RDB::ModelGeneration::isUnique(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'Unique'
	self.findTable(sName, tName).constraints.oclAsType(RDB::UniqueIndex)->forEach(r) {
		return r.underlyingIndex.columns->exists(name = cName);
	};
	return false;
}

// overi, zda-li existuje pro sloupce tabulkove omezeni 'PrimaryKey'
query RDB::ModelGeneration::isPrimaryKey(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'PrimaryKey'
	self.findTable(sName, tName).constraints.oclAsType(RDB::PrimaryKey)->forEach(r) {
		return r.underlyingIndex.columns->exists(name = cName);
	};
	return false;
}

// overi, zda-li existuje pro sloupec tabulkove omezeni 'ForeignKey'
query RDB::ModelGeneration::isForeignKey(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'ForeignKey'
	self.findTable(sName, tName).constraints.oclAsType(RDB::ForeignKey)->forEach(r) {
		return r.constrainedColumn.name = cName;
	};
	return false;
}

// overi, zda-li existuje pro sloupec sloupcove omezeni 'Not Null'
query RDB::ModelGeneration::isNotNull(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'NotNull'
	self.findTable(sName, tName).constraints.oclAsType(RDB::NotNullConstraint)->forEach(r) {
		return r.owningColumn.name = cName;
	};
	return false;
}

// overi, zda primitivni typ existuje (true - exituje, false - neexistuje)
query RDB::ModelGeneration::isPrimitiveType(type : String) : Boolean {
	// je treba prohledat enum, zda se v nem nachazi nas hledany prvek
	return not (self.createPrimitiveType(type) = null);
}

// prirazeni primitivni hodnoty podle vstupniho stringu
query RDB::ModelGeneration::createPrimitiveType (type : String) : RDB::PrimitiveType {
	switch {
		case (type = "boolean") return RDB::PrimitiveType::boolean;
		case (type = "char") return RDB::PrimitiveType::char;
		case (type = "int") return RDB::PrimitiveType::int;
		case (type = "float") return RDB::PrimitiveType::float;
	};
	return null;
}

query RDB::ModelGeneration::isSameColumnName(sName : String, tNameA : String, cNameA : String, tNameB : String, cNameB : String) : Boolean {
	return self.findColumn(sName, tNameA, cNameA).name = self.findColumn(sName, tNameB, cNameB).name;
}

/**
 * COLUMN TYPE
 * Querries test type of columns. 
 */
query RDB::ModelGeneration::isSameColumnType (sName : String, tNameA : String, cNameA : String, tNameB : String, cNameB : String) : Boolean {
	return self.findColumn(sName, tNameA, cNameA).type = self.findColumn(sName, tNameB, cNameB).type;
}

query RDB::ModelGeneration::areSameColumnsTypes (sName : String, tNameA : String, cNameA : OrderedSet(String), tNameB : String, cNameB : OrderedSet(String)) : Boolean {
	var b : Boolean := true;
	cNameA->forEach(nameA){
		cNameB->forEach(nameB){
			if(self.isSameColumnName(sName, tNameA, nameA, tNameB, nameB) 
				and not self.isSameColumnType(sName, tNameA, nameA, tNameB, nameB)) then {
				b := false;
			} endif;
		};
	};
	return b;
}