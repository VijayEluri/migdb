import builder_rdb;
import queries_rdb;

modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";

transformation removeParent5_required(out inoutModel : RDB);

main() {
	var publicSchemaName : String := getDefaultSchemaName();
	var childTableName : String := "tab";
	var parentTableName : String := "parent";
	var idChildTableName : String := "id_tab";
	var idParentTableName : String := "id_parent";
	var parencyFkName : String := "par_" + childTableName;
	var equalityCondition : String := parentTableName + "." + idParentTableName + " = " + 
											childTableName + "." + idChildTableName;
	var complementCondition : String := parentTableName + "." + idParentTableName + " NOT in " + 
											childTableName + "." + idChildTableName; 										
	var pkChildName : String := "pk_" + childTableName;
	var distributedColumnName : String := "age";
	var distributedColumnType : RDB::PrimitiveType := RDB::PrimitiveType::int;
	var idType : RDB::PrimitiveType := RDB::PrimitiveType::int;
	var typeTableName : String := "type";
	var idTypeTableName : String := "id_" + typeTableName;
	var orderingColumnName : String := "ordering";
	var orderingColumnType : RDB::PrimitiveType := RDB::PrimitiveType::int;
	var oldAssociationTableName : String := parentTableName + "_" + distributedColumnName;
	var newAssociationTableName : String := childTableName + "_" + distributedColumnName;
	var ordUxName : String := "ux_" + newAssociationTableName + "_ord";
	var uxName : String := "ux_" + newAssociationTableName;
	var fkRefChildName : String := "fk_" + newAssociationTableName + "_" + childTableName;
	var fkRefTypeName : String := "fk_" + newAssociationTableName + "_" + typeTableName;	
	var sourceColumnNames : OrderedSet(String) := OrderedSet{
														idParentTableName,
														idTypeTableName};
	var insertedColumnNames : OrderedSet(String) := OrderedSet{
														idChildTableName,
														idTypeTableName};
	var orderedColunNames : OrderedSet(String) := OrderedSet{
														idChildTableName,
														idTypeTableName,
														orderingColumnName};													 													
	var addAssociationTable : RDB::ops::ModelOperation := _addTable(
																publicSchemaName,
																newAssociationTableName);
	var addIdTargetColumn : RDB::ops::ModelOperation := _addColumn(
																publicSchemaName,
																newAssociationTableName,
																idChildTableName,
																idType);
	var addIdTypeColumn : RDB::ops::ModelOperation := _addColumn(
																publicSchemaName,
																newAssociationTableName,
																idTypeTableName,
																idType);															
	var insertDataNewCollection : RDB::ops::ModelOperation := _insertRows(
																		publicSchemaName,
																		oldAssociationTableName,
																		sourceColumnNames,
																		newAssociationTableName,
																		insertedColumnNames,
																		equalityCondition);
	var addFkChild : RDB::ops::ModelOperation := _addForeignKey(
															publicSchemaName,
															newAssociationTableName,
															idChildTableName,
															fkRefChildName,
															childTableName);
	var addFkType : RDB::ops::ModelOperation := _addForeignKey(
															publicSchemaName,
															newAssociationTableName,
															idTypeTableName,
															fkRefTypeName,
															typeTableName);															
	var deleteParentData : RDB::ops::ModelOperation := _deleteRows(
																publicSchemaName,
																oldAssociationTableName,
																complementCondition);
	var addOrderingColumn : RDB::ops::ModelOperation := _addColumn(
																publicSchemaName,
																newAssociationTableName,
																orderingColumnName,
																orderingColumnType);
	var addOrderingUx : RDB::ops::ModelOperation := _addUnique(
															publicSchemaName,
															newAssociationTableName,
															orderedColunNames,
															ordUxName);
	var addUx : RDB::ops::ModelOperation := _addUnique(
													publicSchemaName,
													newAssociationTableName,
													insertedColumnNames,
													uxName);																												 																														
	var removeParencyFk : RDB::ops::ModelOperation := _removeConstraint(
																publicSchemaName,
																childTableName,
																parencyFkName);
	var cleanParentTable : RDB::ops::ModelOperation := _deleteRows(
																publicSchemaName,
																parentTableName,
																equalityCondition);
	var ops : OrderedSet(RDB::ops::ModelOperation):= OrderedSet{
															//association table part
															addAssociationTable,
															addIdTargetColumn,
															addIdTypeColumn,
															insertDataNewCollection,
															addFkChild,
															addFkType,
															deleteParentData,
															addOrderingColumn,
															addOrderingUx,
															addUx,
															//standard part	
															removeParencyFk, 
															cleanParentTable};
	var model : RDB::ModelRoot := _rdbOperations(ops);	 
}