/*
* generated by Xtext
*/

package migdb.dsl.ops.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OpsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelRoot");
		private final RuleCall cOperationsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ModelRoot returns app::ModelRoot:
		//	Operations;
		public ParserRule getRule() { return rule; }

		//Operations
		public RuleCall getOperationsParserRuleCall() { return cOperationsParserRuleCall; }
	}

	public class OperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operations");
		private final Assignment cOperationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationsModelOperationParserRuleCall_0 = (RuleCall)cOperationsAssignment.eContents().get(0);
		
		//Operations returns app::Operations:
		//	operations+=ModelOperation*;
		public ParserRule getRule() { return rule; }

		//operations+=ModelOperation*
		public Assignment getOperationsAssignment() { return cOperationsAssignment; }

		//ModelOperation
		public RuleCall getOperationsModelOperationParserRuleCall_0() { return cOperationsModelOperationParserRuleCall_0; }
	}

	public class ModelOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecomposableOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelOperation returns ops::ModelOperation:
		//	AtomicOperation | DecomposableOperation;
		public ParserRule getRule() { return rule; }

		//AtomicOperation | DecomposableOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicOperation
		public RuleCall getAtomicOperationParserRuleCall_0() { return cAtomicOperationParserRuleCall_0; }

		//DecomposableOperation
		public RuleCall getDecomposableOperationParserRuleCall_1() { return cDecomposableOperationParserRuleCall_1; }
	}

	public class AtomicOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddPrimitiveClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddEmbeddedClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddStandardClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRenameEntityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSetParentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSetAbstractParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRemoveEntityParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAddPropertyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRenamePropertyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRemovePropertyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSetTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSetOppositeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSetBoundsParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSetOrderedParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cSetUniqueParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cCopyPropertyParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cMovePropertyParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//AtomicOperation returns ops::AtomicOperation:
		//	AddPrimitiveClass | AddEmbeddedClass | AddStandardClass | RenameEntity | SetParent | SetAbstract | RemoveEntity |
		//	AddProperty | RenameProperty | RemoveProperty | SetType | SetOpposite | SetBounds | SetOrdered | SetUnique |
		//	CopyProperty | MoveProperty;
		public ParserRule getRule() { return rule; }

		//AddPrimitiveClass | AddEmbeddedClass | AddStandardClass | RenameEntity | SetParent | SetAbstract | RemoveEntity |
		//AddProperty | RenameProperty | RemoveProperty | SetType | SetOpposite | SetBounds | SetOrdered | SetUnique |
		//CopyProperty | MoveProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//AddPrimitiveClass
		public RuleCall getAddPrimitiveClassParserRuleCall_0() { return cAddPrimitiveClassParserRuleCall_0; }

		//AddEmbeddedClass
		public RuleCall getAddEmbeddedClassParserRuleCall_1() { return cAddEmbeddedClassParserRuleCall_1; }

		//AddStandardClass
		public RuleCall getAddStandardClassParserRuleCall_2() { return cAddStandardClassParserRuleCall_2; }

		//RenameEntity
		public RuleCall getRenameEntityParserRuleCall_3() { return cRenameEntityParserRuleCall_3; }

		//SetParent
		public RuleCall getSetParentParserRuleCall_4() { return cSetParentParserRuleCall_4; }

		//SetAbstract
		public RuleCall getSetAbstractParserRuleCall_5() { return cSetAbstractParserRuleCall_5; }

		//RemoveEntity
		public RuleCall getRemoveEntityParserRuleCall_6() { return cRemoveEntityParserRuleCall_6; }

		//AddProperty
		public RuleCall getAddPropertyParserRuleCall_7() { return cAddPropertyParserRuleCall_7; }

		//RenameProperty
		public RuleCall getRenamePropertyParserRuleCall_8() { return cRenamePropertyParserRuleCall_8; }

		//RemoveProperty
		public RuleCall getRemovePropertyParserRuleCall_9() { return cRemovePropertyParserRuleCall_9; }

		//SetType
		public RuleCall getSetTypeParserRuleCall_10() { return cSetTypeParserRuleCall_10; }

		//SetOpposite
		public RuleCall getSetOppositeParserRuleCall_11() { return cSetOppositeParserRuleCall_11; }

		//SetBounds
		public RuleCall getSetBoundsParserRuleCall_12() { return cSetBoundsParserRuleCall_12; }

		//SetOrdered
		public RuleCall getSetOrderedParserRuleCall_13() { return cSetOrderedParserRuleCall_13; }

		//SetUnique
		public RuleCall getSetUniqueParserRuleCall_14() { return cSetUniqueParserRuleCall_14; }

		//CopyProperty
		public RuleCall getCopyPropertyParserRuleCall_15() { return cCopyPropertyParserRuleCall_15; }

		//MoveProperty
		public RuleCall getMovePropertyParserRuleCall_16() { return cMovePropertyParserRuleCall_16; }
	}

	public class DecomposableOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecomposableOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExtractClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtractParentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DecomposableOperation returns ops::DecomposableOperation:
		//	ExtractClass | ExtractParent;
		public ParserRule getRule() { return rule; }

		//ExtractClass | ExtractParent
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExtractClass
		public RuleCall getExtractClassParserRuleCall_0() { return cExtractClassParserRuleCall_0; }

		//ExtractParent
		public RuleCall getExtractParentParserRuleCall_1() { return cExtractParentParserRuleCall_1; }
	}

	public class AddPrimitiveClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddPrimitiveClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPrimitiveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrimitiveTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrimitiveTypePrimitiveTypeEnumRuleCall_3_0 = (RuleCall)cPrimitiveTypeAssignment_3.eContents().get(0);
		
		/// **
		// * Atomic Operations:
		// * / //addPrimitiveClass(name, boolean) adds new primitive class by selected type
		//AddPrimitiveClass returns ops::AddPrimitiveClass:
		//	name=ID "=" / *'new'* / "primitive" primitiveType=PrimitiveType;
		public ParserRule getRule() { return rule; }

		//name=ID "=" / *'new'* / "primitive" primitiveType=PrimitiveType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		/// *'new'* / "primitive"
		public Keyword getPrimitiveKeyword_2() { return cPrimitiveKeyword_2; }

		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_3() { return cPrimitiveTypeAssignment_3; }

		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeEnumRuleCall_3_0() { return cPrimitiveTypePrimitiveTypeEnumRuleCall_3_0; }
	}

	public class AddEmbeddedClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddEmbeddedClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEmbeddedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////addEmbeddedClass(name) adds new embedded class
		//AddEmbeddedClass returns ops::AddEmbeddedClass:
		//	name=ID "=" / *'new'* / "embedded";
		public ParserRule getRule() { return rule; }

		//name=ID "=" / *'new'* / "embedded"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		/// *'new'* / "embedded"
		public Keyword getEmbeddedKeyword_2() { return cEmbeddedKeyword_2; }
	}

	public class AddStandardClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddStandardClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cIsAbstractAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_2_0_0 = (Keyword)cIsAbstractAssignment_2_0.eContents().get(0);
		private final Assignment cInheritanceTypeAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cInheritanceTypeInheritanceTypeEnumRuleCall_2_1_0 = (RuleCall)cInheritanceTypeAssignment_2_1.eContents().get(0);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////addStandardClass(name, boolean, InheritanceType)
		////adds StandardClass with abstract flag and given maping type in DB
		//AddStandardClass returns ops::AddStandardClass:
		//	name=ID "=" / *'new'* / (isAbstract?="abstract" & inheritanceType=InheritanceType?)? "class";
		public ParserRule getRule() { return rule; }

		//name=ID "=" / *'new'* / (isAbstract?="abstract" & inheritanceType=InheritanceType?)? "class"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(isAbstract?="abstract" & inheritanceType=InheritanceType?)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//isAbstract?="abstract"
		public Assignment getIsAbstractAssignment_2_0() { return cIsAbstractAssignment_2_0; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_2_0_0() { return cIsAbstractAbstractKeyword_2_0_0; }

		//inheritanceType=InheritanceType?
		public Assignment getInheritanceTypeAssignment_2_1() { return cInheritanceTypeAssignment_2_1; }

		//InheritanceType
		public RuleCall getInheritanceTypeInheritanceTypeEnumRuleCall_2_1_0() { return cInheritanceTypeInheritanceTypeEnumRuleCall_2_1_0; }

		//"class"
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }
	}

	public class RenameEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameIDTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		////renameEntity(A, B) renames entity A to B
		//RenameEntity returns ops::RenameEntity: //	'set'
		//	name=ID "->" newName=ID;
		public ParserRule getRule() { return rule; }

		////	'set'
		//name=ID "->" newName=ID
		public Group getGroup() { return cGroup; }

		////	'set'
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//newName=ID
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_2_0() { return cNewNameIDTerminalRuleCall_2_0; }
	}

	public class SetParentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetParent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParentNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParentNameIDTerminalRuleCall_1_0_1_0 = (RuleCall)cParentNameAssignment_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkLessThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		////setParent(A, B) sets A new parent B
		//SetParent returns ops::SetParent: //	'set'
		////	 name=ID (('child-of' parentName=ID) | 'not child-of')
		//	name=ID ("<" parentName=ID | "!<");
		public ParserRule getRule() { return rule; }

		////	'set'
		////	 name=ID (('child-of' parentName=ID) | 'not child-of')
		//name=ID ("<" parentName=ID | "!<")
		public Group getGroup() { return cGroup; }

		////	'set'
		////	 name=ID (('child-of' parentName=ID) | 'not child-of')
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"<" parentName=ID | "!<"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"<" parentName=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0() { return cLessThanSignKeyword_1_0_0; }

		//parentName=ID
		public Assignment getParentNameAssignment_1_0_1() { return cParentNameAssignment_1_0_1; }

		//ID
		public RuleCall getParentNameIDTerminalRuleCall_1_0_1_0() { return cParentNameIDTerminalRuleCall_1_0_1_0; }

		//"!<"
		public Keyword getExclamationMarkLessThanSignKeyword_1_1() { return cExclamationMarkLessThanSignKeyword_1_1; }
	}

	public class SetAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetAbstract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsAbstractAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_1_0_0 = (Keyword)cIsAbstractAssignment_1_0.eContents().get(0);
		private final Keyword cAbstractKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		////setAbstract(name, boolean) sets/unsets given class as abstract
		//SetAbstract returns ops::SetAbstract: //	'set'
		//	name=ID (isAbstract?="abstract" | "!abstract");
		public ParserRule getRule() { return rule; }

		////	'set'
		//name=ID (isAbstract?="abstract" | "!abstract")
		public Group getGroup() { return cGroup; }

		////	'set'
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//isAbstract?="abstract" | "!abstract"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isAbstract?="abstract"
		public Assignment getIsAbstractAssignment_1_0() { return cIsAbstractAssignment_1_0; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_1_0_0() { return cIsAbstractAbstractKeyword_1_0_0; }

		//"!abstract"
		public Keyword getAbstractKeyword_1_1() { return cAbstractKeyword_1_1; }
	}

	public class RemoveEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////removeEntity(name) removes entity (GeneralClass, PrimitiveClass and all its subtypes)
		//RemoveEntity returns ops::RemoveEntity: //	'delete'
		//	"!" name=ID;
		public ParserRule getRule() { return rule; }

		////	'delete'
		//"!" name=ID
		public Group getGroup() { return cGroup; }

		////	'delete'
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AddPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cOrderedKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Assignment cIsOrderedAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final Keyword cIsOrderedOrderedKeyword_2_0_1_0 = (Keyword)cIsOrderedAssignment_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cUniqueKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Assignment cIsUniqueAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final Keyword cIsUniqueUniqueKeyword_2_1_1_0 = (Keyword)cIsUniqueAssignment_2_1_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeIDTerminalRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cUpperBoundAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cUpperBoundINTTerminalRuleCall_6_1_0_0 = (RuleCall)cUpperBoundAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cAlternatives_6_1.eContents().get(1);
		private final Assignment cLowerBoundAssignment_6_1_1_0 = (Assignment)cGroup_6_1_1.eContents().get(0);
		private final RuleCall cLowerBoundINTTerminalRuleCall_6_1_1_0_0 = (RuleCall)cLowerBoundAssignment_6_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_6_1_1_1 = (Keyword)cGroup_6_1_1.eContents().get(1);
		private final Assignment cUpperBoundAssignment_6_1_1_2 = (Assignment)cGroup_6_1_1.eContents().get(2);
		private final RuleCall cUpperBoundINTTerminalRuleCall_6_1_1_2_0 = (RuleCall)cUpperBoundAssignment_6_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDefaultValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDefaultValueIDTerminalRuleCall_7_1_0 = (RuleCall)cDefaultValueAssignment_7_1.eContents().get(0);
		
		////addProperty(owningClass, propertyName, propertyType) adds property and its type to a class
		//AddProperty returns ops::AddProperty:
		//	owningClassName=ID "+=" (("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?) name=ID ":" type=ID
		//	("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")? ("=" defaultValue=ID)?;
		public ParserRule getRule() { return rule; }

		//owningClassName=ID "+=" (("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?) name=ID ":" type=ID
		//("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")? ("=" defaultValue=ID)?
		public Group getGroup() { return cGroup; }

		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("!ordered" | isOrdered?="ordered")?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"!ordered"
		public Keyword getOrderedKeyword_2_0_0() { return cOrderedKeyword_2_0_0; }

		//isOrdered?="ordered"
		public Assignment getIsOrderedAssignment_2_0_1() { return cIsOrderedAssignment_2_0_1; }

		//"ordered"
		public Keyword getIsOrderedOrderedKeyword_2_0_1_0() { return cIsOrderedOrderedKeyword_2_0_1_0; }

		//("!unique" | isUnique?="unique")?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"!unique"
		public Keyword getUniqueKeyword_2_1_0() { return cUniqueKeyword_2_1_0; }

		//isUnique?="unique"
		public Assignment getIsUniqueAssignment_2_1_1() { return cIsUniqueAssignment_2_1_1; }

		//"unique"
		public Keyword getIsUniqueUniqueKeyword_2_1_1_0() { return cIsUniqueUniqueKeyword_2_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=ID
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_5_0() { return cTypeIDTerminalRuleCall_5_0; }

		//("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//upperBound=INT | lowerBound=INT ".." upperBound=INT?
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//upperBound=INT
		public Assignment getUpperBoundAssignment_6_1_0() { return cUpperBoundAssignment_6_1_0; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_6_1_0_0() { return cUpperBoundINTTerminalRuleCall_6_1_0_0; }

		//lowerBound=INT ".." upperBound=INT?
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//lowerBound=INT
		public Assignment getLowerBoundAssignment_6_1_1_0() { return cLowerBoundAssignment_6_1_1_0; }

		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_6_1_1_0_0() { return cLowerBoundINTTerminalRuleCall_6_1_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_6_1_1_1() { return cFullStopFullStopKeyword_6_1_1_1; }

		//upperBound=INT?
		public Assignment getUpperBoundAssignment_6_1_1_2() { return cUpperBoundAssignment_6_1_1_2; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_6_1_1_2_0() { return cUpperBoundINTTerminalRuleCall_6_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }

		//("=" defaultValue=ID)?
		public Group getGroup_7() { return cGroup_7; }

		//"="
		public Keyword getEqualsSignKeyword_7_0() { return cEqualsSignKeyword_7_0; }

		//defaultValue=ID
		public Assignment getDefaultValueAssignment_7_1() { return cDefaultValueAssignment_7_1; }

		//ID
		public RuleCall getDefaultValueIDTerminalRuleCall_7_1_0() { return cDefaultValueIDTerminalRuleCall_7_1_0; }
	}

	public class RenamePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNewNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNewNameIDTerminalRuleCall_4_0 = (RuleCall)cNewNameAssignment_4.eContents().get(0);
		
		////renamePropety(A, id, identifier) renames A's property id to identifier
		//RenameProperty returns ops::RenameProperty: //	'set'
		//	owningClassName=ID "." name=ID "->" newName=ID;
		public ParserRule getRule() { return rule; }

		////	'set'
		//owningClassName=ID "." name=ID "->" newName=ID
		public Group getGroup() { return cGroup; }

		////	'set'
		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//newName=ID
		public Assignment getNewNameAssignment_4() { return cNewNameAssignment_4; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_4_0() { return cNewNameIDTerminalRuleCall_4_0; }
	}

	public class RemovePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////removePropety(A, id) removes A's property id
		//RemoveProperty returns ops::RemoveProperty:
		//	owningClassName=ID "-=" name=ID;
		public ParserRule getRule() { return rule; }

		//owningClassName=ID "-=" name=ID
		public Group getGroup() { return cGroup; }

		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeIDTerminalRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		////setType(A, id, int) changes type of A's propety id to int
		//SetType returns ops::SetType: //	'set'
		//	owningClassName=ID "." name=ID ":" type=ID;
		public ParserRule getRule() { return rule; }

		////	'set'
		//owningClassName=ID "." name=ID ":" type=ID
		public Group getGroup() { return cGroup; }

		////	'set'
		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=ID
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_4_0() { return cTypeIDTerminalRuleCall_4_0; }
	}

	public class SetOppositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetOpposite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstClassNameIDTerminalRuleCall_0_0 = (RuleCall)cFirstClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstPropertyNameIDTerminalRuleCall_2_0 = (RuleCall)cFirstPropertyNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIsOppositeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cIsOppositeLessThanSignHyphenMinusGreaterThanSignKeyword_3_0_0 = (Keyword)cIsOppositeAssignment_3_0.eContents().get(0);
		private final Keyword cExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cSecondClassNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondClassNameIDTerminalRuleCall_4_0 = (RuleCall)cSecondClassNameAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSecondPropertyNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSecondPropertyNameIDTerminalRuleCall_6_0 = (RuleCall)cSecondPropertyNameAssignment_6.eContents().get(0);
		
		////setOpposite(A, key, B, id, true) creates link between A's key and B's id
		////setOpposite(A, key, B, id, false) destroys link between A's key and B's id
		//SetOpposite returns ops::SetOpposite: //	'set'
		//	firstClassName=ID "." firstPropertyName=ID (isOpposite?="<->" | "!<->") secondClassName=ID "." secondPropertyName=ID;
		public ParserRule getRule() { return rule; }

		////	'set'
		//firstClassName=ID "." firstPropertyName=ID (isOpposite?="<->" | "!<->") secondClassName=ID "." secondPropertyName=ID
		public Group getGroup() { return cGroup; }

		////	'set'
		//firstClassName=ID
		public Assignment getFirstClassNameAssignment_0() { return cFirstClassNameAssignment_0; }

		//ID
		public RuleCall getFirstClassNameIDTerminalRuleCall_0_0() { return cFirstClassNameIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//firstPropertyName=ID
		public Assignment getFirstPropertyNameAssignment_2() { return cFirstPropertyNameAssignment_2; }

		//ID
		public RuleCall getFirstPropertyNameIDTerminalRuleCall_2_0() { return cFirstPropertyNameIDTerminalRuleCall_2_0; }

		//isOpposite?="<->" | "!<->"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//isOpposite?="<->"
		public Assignment getIsOppositeAssignment_3_0() { return cIsOppositeAssignment_3_0; }

		//"<->"
		public Keyword getIsOppositeLessThanSignHyphenMinusGreaterThanSignKeyword_3_0_0() { return cIsOppositeLessThanSignHyphenMinusGreaterThanSignKeyword_3_0_0; }

		//"!<->"
		public Keyword getExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1() { return cExclamationMarkLessThanSignHyphenMinusGreaterThanSignKeyword_3_1; }

		//secondClassName=ID
		public Assignment getSecondClassNameAssignment_4() { return cSecondClassNameAssignment_4; }

		//ID
		public RuleCall getSecondClassNameIDTerminalRuleCall_4_0() { return cSecondClassNameIDTerminalRuleCall_4_0; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//secondPropertyName=ID
		public Assignment getSecondPropertyNameAssignment_6() { return cSecondPropertyNameAssignment_6; }

		//ID
		public RuleCall getSecondPropertyNameIDTerminalRuleCall_6_0() { return cSecondPropertyNameIDTerminalRuleCall_6_0; }
	}

	public class SetBoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetBounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cUpperBoundAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cUpperBoundINTTerminalRuleCall_3_1_0_0 = (RuleCall)cUpperBoundAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cLowerBoundAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cLowerBoundINTTerminalRuleCall_3_1_1_0_0 = (RuleCall)cLowerBoundAssignment_3_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cUpperBoundAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final RuleCall cUpperBoundINTTerminalRuleCall_3_1_1_2_0 = (RuleCall)cUpperBoundAssignment_3_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////setBounds(A, list, 0, 50) sets bounds to A's property list to 0,50 (lower, upper)
		//SetBounds returns ops::SetBounds: //set
		//	owningClassName=ID "." name=ID ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?;
		public ParserRule getRule() { return rule; }

		////set
		//owningClassName=ID "." name=ID ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?
		public Group getGroup() { return cGroup; }

		////set
		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//upperBound=INT | lowerBound=INT ".." upperBound=INT?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//upperBound=INT
		public Assignment getUpperBoundAssignment_3_1_0() { return cUpperBoundAssignment_3_1_0; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_3_1_0_0() { return cUpperBoundINTTerminalRuleCall_3_1_0_0; }

		//lowerBound=INT ".." upperBound=INT?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//lowerBound=INT
		public Assignment getLowerBoundAssignment_3_1_1_0() { return cLowerBoundAssignment_3_1_1_0; }

		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_3_1_1_0_0() { return cLowerBoundINTTerminalRuleCall_3_1_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_1_1_1() { return cFullStopFullStopKeyword_3_1_1_1; }

		//upperBound=INT?
		public Assignment getUpperBoundAssignment_3_1_1_2() { return cUpperBoundAssignment_3_1_1_2; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_3_1_1_2_0() { return cUpperBoundINTTerminalRuleCall_3_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class SetOrderedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetOrdered");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIsOrderedAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cIsOrderedOrderedKeyword_3_0_0 = (Keyword)cIsOrderedAssignment_3_0.eContents().get(0);
		private final Keyword cOrderedKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		////setOrdered(A, list, true) sets A's property list as ordered
		////setOrdered(A, list, false) sets A's property list as unordered
		//SetOrdered returns ops::SetOrdered: //set
		//	owningClassName=ID "." name=ID (isOrdered?="ordered" | "!ordered");
		public ParserRule getRule() { return rule; }

		////set
		//owningClassName=ID "." name=ID (isOrdered?="ordered" | "!ordered")
		public Group getGroup() { return cGroup; }

		////set
		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//isOrdered?="ordered" | "!ordered"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//isOrdered?="ordered"
		public Assignment getIsOrderedAssignment_3_0() { return cIsOrderedAssignment_3_0; }

		//"ordered"
		public Keyword getIsOrderedOrderedKeyword_3_0_0() { return cIsOrderedOrderedKeyword_3_0_0; }

		//"!ordered"
		public Keyword getOrderedKeyword_3_1() { return cOrderedKeyword_3_1; }
	}

	public class SetUniqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetUnique");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwningClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_0_0 = (RuleCall)cOwningClassNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIsUniqueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cIsUniqueUniqueKeyword_3_0_0 = (Keyword)cIsUniqueAssignment_3_0.eContents().get(0);
		private final Keyword cUniqueKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		////setUnique(A, list, true) sets A's property list as unique
		////setUnique(A, list, false) unsets unique status of A's property list
		//SetUnique returns ops::SetUnique: //set
		//	owningClassName=ID "." name=ID (isUnique?="unique" | "!unique");
		public ParserRule getRule() { return rule; }

		////set
		//owningClassName=ID "." name=ID (isUnique?="unique" | "!unique")
		public Group getGroup() { return cGroup; }

		////set
		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_0() { return cOwningClassNameAssignment_0; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_0_0() { return cOwningClassNameIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//isUnique?="unique" | "!unique"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//isUnique?="unique"
		public Assignment getIsUniqueAssignment_3_0() { return cIsUniqueAssignment_3_0; }

		//"unique"
		public Keyword getIsUniqueUniqueKeyword_3_0_0() { return cIsUniqueUniqueKeyword_3_0_0; }

		//"!unique"
		public Keyword getUniqueKeyword_3_1() { return cUniqueKeyword_3_1; }
	}

	public class CopyPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CopyProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMergeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cOwningClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_2_0 = (RuleCall)cOwningClassNameAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetClassNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetClassNameIDTerminalRuleCall_6_0 = (RuleCall)cTargetClassNameAssignment_6.eContents().get(0);
		
		////copyPropety(A, id, B, MergeType) copies A's property id to B by selected MergeType
		//CopyProperty returns ops::CopyProperty:
		//	"copy" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID;
		public ParserRule getRule() { return rule; }

		//"copy" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID
		public Group getGroup() { return cGroup; }

		//"copy"
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }

		//type=MergeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//MergeType
		public RuleCall getTypeMergeTypeEnumRuleCall_1_0() { return cTypeMergeTypeEnumRuleCall_1_0; }

		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_2() { return cOwningClassNameAssignment_2; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_2_0() { return cOwningClassNameIDTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//targetClassName=ID
		public Assignment getTargetClassNameAssignment_6() { return cTargetClassNameAssignment_6; }

		//ID
		public RuleCall getTargetClassNameIDTerminalRuleCall_6_0() { return cTargetClassNameIDTerminalRuleCall_6_0; }
	}

	public class MovePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MoveProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMergeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cOwningClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwningClassNameIDTerminalRuleCall_2_0 = (RuleCall)cOwningClassNameAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetClassNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetClassNameIDTerminalRuleCall_6_0 = (RuleCall)cTargetClassNameAssignment_6.eContents().get(0);
		
		////movePropety(A, id, B, MergeType) moves (and deletes) A's property id to B by selected MergeType
		//MoveProperty returns ops::MoveProperty:
		//	"move" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID;
		public ParserRule getRule() { return rule; }

		//"move" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID
		public Group getGroup() { return cGroup; }

		//"move"
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }

		//type=MergeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//MergeType
		public RuleCall getTypeMergeTypeEnumRuleCall_1_0() { return cTypeMergeTypeEnumRuleCall_1_0; }

		//owningClassName=ID
		public Assignment getOwningClassNameAssignment_2() { return cOwningClassNameAssignment_2; }

		//ID
		public RuleCall getOwningClassNameIDTerminalRuleCall_2_0() { return cOwningClassNameIDTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//targetClassName=ID
		public Assignment getTargetClassNameAssignment_6() { return cTargetClassNameAssignment_6; }

		//ID
		public RuleCall getTargetClassNameIDTerminalRuleCall_6_0() { return cTargetClassNameIDTerminalRuleCall_6_0; }
	}

	public class ExtractClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceClassNameIDTerminalRuleCall_1_0 = (RuleCall)cSourceClassNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExtractPropertiesNamesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtractPropertiesNamesIDTerminalRuleCall_4_0 = (RuleCall)cExtractPropertiesNamesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExtractPropertiesNamesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExtractPropertiesNamesIDTerminalRuleCall_5_1_0 = (RuleCall)cExtractPropertiesNamesAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExtractClassNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExtractClassNameIDTerminalRuleCall_8_0 = (RuleCall)cExtractClassNameAssignment_8.eContents().get(0);
		
		/// **
		// * Decomposable Operations:
		// * / //extractClass(A, {id, name}, B) creates B and moves A's properties {id, name} to created B
		//ExtractClass returns ops::ExtractClass:
		//	"extract" sourceClassName=ID "." "[" extractPropertiesNames+=ID ("," extractPropertiesNames+=ID)* "]" "->"
		//	extractClassName=ID;
		public ParserRule getRule() { return rule; }

		//"extract" sourceClassName=ID "." "[" extractPropertiesNames+=ID ("," extractPropertiesNames+=ID)* "]" "->"
		//extractClassName=ID
		public Group getGroup() { return cGroup; }

		//"extract"
		public Keyword getExtractKeyword_0() { return cExtractKeyword_0; }

		//sourceClassName=ID
		public Assignment getSourceClassNameAssignment_1() { return cSourceClassNameAssignment_1; }

		//ID
		public RuleCall getSourceClassNameIDTerminalRuleCall_1_0() { return cSourceClassNameIDTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//extractPropertiesNames+=ID
		public Assignment getExtractPropertiesNamesAssignment_4() { return cExtractPropertiesNamesAssignment_4; }

		//ID
		public RuleCall getExtractPropertiesNamesIDTerminalRuleCall_4_0() { return cExtractPropertiesNamesIDTerminalRuleCall_4_0; }

		//("," extractPropertiesNames+=ID)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//extractPropertiesNames+=ID
		public Assignment getExtractPropertiesNamesAssignment_5_1() { return cExtractPropertiesNamesAssignment_5_1; }

		//ID
		public RuleCall getExtractPropertiesNamesIDTerminalRuleCall_5_1_0() { return cExtractPropertiesNamesIDTerminalRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }

		//extractClassName=ID
		public Assignment getExtractClassNameAssignment_8() { return cExtractClassNameAssignment_8; }

		//ID
		public RuleCall getExtractClassNameIDTerminalRuleCall_8_0() { return cExtractClassNameIDTerminalRuleCall_8_0; }
	}

	public class ExtractParentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractParent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceClassesNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceClassesNameIDTerminalRuleCall_2_0 = (RuleCall)cSourceClassesNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceClassesNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceClassesNameIDTerminalRuleCall_3_1_0 = (RuleCall)cSourceClassesNameAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExtractPropertiesNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExtractPropertiesNameIDTerminalRuleCall_7_0 = (RuleCall)cExtractPropertiesNameAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cExtractPropertiesNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cExtractPropertiesNameIDTerminalRuleCall_8_1_0 = (RuleCall)cExtractPropertiesNameAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cExtractParentNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExtractParentNameIDTerminalRuleCall_11_0 = (RuleCall)cExtractParentNameAssignment_11.eContents().get(0);
		
		////extractParent({A, B}, {id, name}, C)
		//// creates C, sets C as parent of A and B and moves A's and B's properties {id, name} to C
		//ExtractParent returns ops::ExtractParent:
		//	"extract" "[" sourceClassesName+=ID ("," sourceClassesName+=ID)* "]" "." "[" extractPropertiesName+=ID (","
		//	extractPropertiesName+=ID)* "]" "->" extractParentName=ID;
		public ParserRule getRule() { return rule; }

		//"extract" "[" sourceClassesName+=ID ("," sourceClassesName+=ID)* "]" "." "[" extractPropertiesName+=ID (","
		//extractPropertiesName+=ID)* "]" "->" extractParentName=ID
		public Group getGroup() { return cGroup; }

		//"extract"
		public Keyword getExtractKeyword_0() { return cExtractKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//sourceClassesName+=ID
		public Assignment getSourceClassesNameAssignment_2() { return cSourceClassesNameAssignment_2; }

		//ID
		public RuleCall getSourceClassesNameIDTerminalRuleCall_2_0() { return cSourceClassesNameIDTerminalRuleCall_2_0; }

		//("," sourceClassesName+=ID)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//sourceClassesName+=ID
		public Assignment getSourceClassesNameAssignment_3_1() { return cSourceClassesNameAssignment_3_1; }

		//ID
		public RuleCall getSourceClassesNameIDTerminalRuleCall_3_1_0() { return cSourceClassesNameIDTerminalRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//extractPropertiesName+=ID
		public Assignment getExtractPropertiesNameAssignment_7() { return cExtractPropertiesNameAssignment_7; }

		//ID
		public RuleCall getExtractPropertiesNameIDTerminalRuleCall_7_0() { return cExtractPropertiesNameIDTerminalRuleCall_7_0; }

		//("," extractPropertiesName+=ID)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//extractPropertiesName+=ID
		public Assignment getExtractPropertiesNameAssignment_8_1() { return cExtractPropertiesNameAssignment_8_1; }

		//ID
		public RuleCall getExtractPropertiesNameIDTerminalRuleCall_8_1_0() { return cExtractPropertiesNameIDTerminalRuleCall_8_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_10() { return cHyphenMinusGreaterThanSignKeyword_10; }

		//extractParentName=ID
		public Assignment getExtractParentNameAssignment_11() { return cExtractParentNameAssignment_11; }

		//ID
		public RuleCall getExtractParentNameIDTerminalRuleCall_11_0() { return cExtractParentNameIDTerminalRuleCall_11_0; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	public class MergeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MergeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStrictEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStrictStrictKeyword_0_0 = (Keyword)cStrictEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cForceEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cForceForceKeyword_1_0 = (Keyword)cForceEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTolerantEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTolerantTolerantKeyword_2_0 = (Keyword)cTolerantEnumLiteralDeclaration_2.eContents().get(0);
		
		/// **
		// * / enum MergeType returns ops::MergeType:
		//	strict | force | tolerant;
		public EnumRule getRule() { return rule; }

		//strict | force | tolerant
		public Alternatives getAlternatives() { return cAlternatives; }

		//strict
		public EnumLiteralDeclaration getStrictEnumLiteralDeclaration_0() { return cStrictEnumLiteralDeclaration_0; }

		//"strict"
		public Keyword getStrictStrictKeyword_0_0() { return cStrictStrictKeyword_0_0; }

		//force
		public EnumLiteralDeclaration getForceEnumLiteralDeclaration_1() { return cForceEnumLiteralDeclaration_1; }

		//"force"
		public Keyword getForceForceKeyword_1_0() { return cForceForceKeyword_1_0; }

		//tolerant
		public EnumLiteralDeclaration getTolerantEnumLiteralDeclaration_2() { return cTolerantEnumLiteralDeclaration_2; }

		//"tolerant"
		public Keyword getTolerantTolerantKeyword_2_0() { return cTolerantTolerantKeyword_2_0; }
	}

	public class PrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCharCharKeyword_1_0 = (Keyword)cCharEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntIntKeyword_2_0 = (Keyword)cIntEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PrimitiveType returns app::PrimitiveType:
		//	boolean | char | int;
		public EnumRule getRule() { return rule; }

		//boolean | char | int
		public Alternatives getAlternatives() { return cAlternatives; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }

		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_1() { return cCharEnumLiteralDeclaration_1; }

		//"char"
		public Keyword getCharCharKeyword_1_0() { return cCharCharKeyword_1_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_2() { return cIntEnumLiteralDeclaration_2; }

		//"int"
		public Keyword getIntIntKeyword_2_0() { return cIntIntKeyword_2_0; }
	}

	public class InheritanceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InheritanceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJoinedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJoinedJoinedKeyword_0_0 = (Keyword)cJoinedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTablePerClassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTablePerClassTablePerClassKeyword_1_0 = (Keyword)cTablePerClassEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSingleTableEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSingleTableSingleTableKeyword_2_0 = (Keyword)cSingleTableEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InheritanceType returns app::InheritanceType:
		//	joined | tablePerClass | singleTable;
		public EnumRule getRule() { return rule; }

		//joined | tablePerClass | singleTable
		public Alternatives getAlternatives() { return cAlternatives; }

		//joined
		public EnumLiteralDeclaration getJoinedEnumLiteralDeclaration_0() { return cJoinedEnumLiteralDeclaration_0; }

		//"joined"
		public Keyword getJoinedJoinedKeyword_0_0() { return cJoinedJoinedKeyword_0_0; }

		//tablePerClass
		public EnumLiteralDeclaration getTablePerClassEnumLiteralDeclaration_1() { return cTablePerClassEnumLiteralDeclaration_1; }

		//"tablePerClass"
		public Keyword getTablePerClassTablePerClassKeyword_1_0() { return cTablePerClassTablePerClassKeyword_1_0; }

		//singleTable
		public EnumLiteralDeclaration getSingleTableEnumLiteralDeclaration_2() { return cSingleTableEnumLiteralDeclaration_2; }

		//"singleTable"
		public Keyword getSingleTableSingleTableKeyword_2_0() { return cSingleTableSingleTableKeyword_2_0; }
	}
	
	private ModelRootElements pModelRoot;
	private OperationsElements pOperations;
	private ModelOperationElements pModelOperation;
	private AtomicOperationElements pAtomicOperation;
	private DecomposableOperationElements pDecomposableOperation;
	private AddPrimitiveClassElements pAddPrimitiveClass;
	private AddEmbeddedClassElements pAddEmbeddedClass;
	private AddStandardClassElements pAddStandardClass;
	private RenameEntityElements pRenameEntity;
	private SetParentElements pSetParent;
	private SetAbstractElements pSetAbstract;
	private RemoveEntityElements pRemoveEntity;
	private AddPropertyElements pAddProperty;
	private RenamePropertyElements pRenameProperty;
	private RemovePropertyElements pRemoveProperty;
	private SetTypeElements pSetType;
	private SetOppositeElements pSetOpposite;
	private SetBoundsElements pSetBounds;
	private SetOrderedElements pSetOrdered;
	private SetUniqueElements pSetUnique;
	private CopyPropertyElements pCopyProperty;
	private MovePropertyElements pMoveProperty;
	private ExtractClassElements pExtractClass;
	private ExtractParentElements pExtractParent;
	private MergeTypeElements unknownRuleMergeType;
	private PrimitiveTypeElements unknownRulePrimitiveType;
	private InheritanceTypeElements unknownRuleInheritanceType;
	private EBooleanElements pEBoolean;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OpsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ModelRoot returns app::ModelRoot:
	//	Operations;
	public ModelRootElements getModelRootAccess() {
		return (pModelRoot != null) ? pModelRoot : (pModelRoot = new ModelRootElements());
	}
	
	public ParserRule getModelRootRule() {
		return getModelRootAccess().getRule();
	}

	//Operations returns app::Operations:
	//	operations+=ModelOperation*;
	public OperationsElements getOperationsAccess() {
		return (pOperations != null) ? pOperations : (pOperations = new OperationsElements());
	}
	
	public ParserRule getOperationsRule() {
		return getOperationsAccess().getRule();
	}

	//ModelOperation returns ops::ModelOperation:
	//	AtomicOperation | DecomposableOperation;
	public ModelOperationElements getModelOperationAccess() {
		return (pModelOperation != null) ? pModelOperation : (pModelOperation = new ModelOperationElements());
	}
	
	public ParserRule getModelOperationRule() {
		return getModelOperationAccess().getRule();
	}

	//AtomicOperation returns ops::AtomicOperation:
	//	AddPrimitiveClass | AddEmbeddedClass | AddStandardClass | RenameEntity | SetParent | SetAbstract | RemoveEntity |
	//	AddProperty | RenameProperty | RemoveProperty | SetType | SetOpposite | SetBounds | SetOrdered | SetUnique |
	//	CopyProperty | MoveProperty;
	public AtomicOperationElements getAtomicOperationAccess() {
		return (pAtomicOperation != null) ? pAtomicOperation : (pAtomicOperation = new AtomicOperationElements());
	}
	
	public ParserRule getAtomicOperationRule() {
		return getAtomicOperationAccess().getRule();
	}

	//DecomposableOperation returns ops::DecomposableOperation:
	//	ExtractClass | ExtractParent;
	public DecomposableOperationElements getDecomposableOperationAccess() {
		return (pDecomposableOperation != null) ? pDecomposableOperation : (pDecomposableOperation = new DecomposableOperationElements());
	}
	
	public ParserRule getDecomposableOperationRule() {
		return getDecomposableOperationAccess().getRule();
	}

	/// **
	// * Atomic Operations:
	// * / //addPrimitiveClass(name, boolean) adds new primitive class by selected type
	//AddPrimitiveClass returns ops::AddPrimitiveClass:
	//	name=ID "=" / *'new'* / "primitive" primitiveType=PrimitiveType;
	public AddPrimitiveClassElements getAddPrimitiveClassAccess() {
		return (pAddPrimitiveClass != null) ? pAddPrimitiveClass : (pAddPrimitiveClass = new AddPrimitiveClassElements());
	}
	
	public ParserRule getAddPrimitiveClassRule() {
		return getAddPrimitiveClassAccess().getRule();
	}

	////addEmbeddedClass(name) adds new embedded class
	//AddEmbeddedClass returns ops::AddEmbeddedClass:
	//	name=ID "=" / *'new'* / "embedded";
	public AddEmbeddedClassElements getAddEmbeddedClassAccess() {
		return (pAddEmbeddedClass != null) ? pAddEmbeddedClass : (pAddEmbeddedClass = new AddEmbeddedClassElements());
	}
	
	public ParserRule getAddEmbeddedClassRule() {
		return getAddEmbeddedClassAccess().getRule();
	}

	////addStandardClass(name, boolean, InheritanceType)
	////adds StandardClass with abstract flag and given maping type in DB
	//AddStandardClass returns ops::AddStandardClass:
	//	name=ID "=" / *'new'* / (isAbstract?="abstract" & inheritanceType=InheritanceType?)? "class";
	public AddStandardClassElements getAddStandardClassAccess() {
		return (pAddStandardClass != null) ? pAddStandardClass : (pAddStandardClass = new AddStandardClassElements());
	}
	
	public ParserRule getAddStandardClassRule() {
		return getAddStandardClassAccess().getRule();
	}

	////renameEntity(A, B) renames entity A to B
	//RenameEntity returns ops::RenameEntity: //	'set'
	//	name=ID "->" newName=ID;
	public RenameEntityElements getRenameEntityAccess() {
		return (pRenameEntity != null) ? pRenameEntity : (pRenameEntity = new RenameEntityElements());
	}
	
	public ParserRule getRenameEntityRule() {
		return getRenameEntityAccess().getRule();
	}

	////setParent(A, B) sets A new parent B
	//SetParent returns ops::SetParent: //	'set'
	////	 name=ID (('child-of' parentName=ID) | 'not child-of')
	//	name=ID ("<" parentName=ID | "!<");
	public SetParentElements getSetParentAccess() {
		return (pSetParent != null) ? pSetParent : (pSetParent = new SetParentElements());
	}
	
	public ParserRule getSetParentRule() {
		return getSetParentAccess().getRule();
	}

	////setAbstract(name, boolean) sets/unsets given class as abstract
	//SetAbstract returns ops::SetAbstract: //	'set'
	//	name=ID (isAbstract?="abstract" | "!abstract");
	public SetAbstractElements getSetAbstractAccess() {
		return (pSetAbstract != null) ? pSetAbstract : (pSetAbstract = new SetAbstractElements());
	}
	
	public ParserRule getSetAbstractRule() {
		return getSetAbstractAccess().getRule();
	}

	////removeEntity(name) removes entity (GeneralClass, PrimitiveClass and all its subtypes)
	//RemoveEntity returns ops::RemoveEntity: //	'delete'
	//	"!" name=ID;
	public RemoveEntityElements getRemoveEntityAccess() {
		return (pRemoveEntity != null) ? pRemoveEntity : (pRemoveEntity = new RemoveEntityElements());
	}
	
	public ParserRule getRemoveEntityRule() {
		return getRemoveEntityAccess().getRule();
	}

	////addProperty(owningClass, propertyName, propertyType) adds property and its type to a class
	//AddProperty returns ops::AddProperty:
	//	owningClassName=ID "+=" (("!ordered" | isOrdered?="ordered")? & ("!unique" | isUnique?="unique")?) name=ID ":" type=ID
	//	("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")? ("=" defaultValue=ID)?;
	public AddPropertyElements getAddPropertyAccess() {
		return (pAddProperty != null) ? pAddProperty : (pAddProperty = new AddPropertyElements());
	}
	
	public ParserRule getAddPropertyRule() {
		return getAddPropertyAccess().getRule();
	}

	////renamePropety(A, id, identifier) renames A's property id to identifier
	//RenameProperty returns ops::RenameProperty: //	'set'
	//	owningClassName=ID "." name=ID "->" newName=ID;
	public RenamePropertyElements getRenamePropertyAccess() {
		return (pRenameProperty != null) ? pRenameProperty : (pRenameProperty = new RenamePropertyElements());
	}
	
	public ParserRule getRenamePropertyRule() {
		return getRenamePropertyAccess().getRule();
	}

	////removePropety(A, id) removes A's property id
	//RemoveProperty returns ops::RemoveProperty:
	//	owningClassName=ID "-=" name=ID;
	public RemovePropertyElements getRemovePropertyAccess() {
		return (pRemoveProperty != null) ? pRemoveProperty : (pRemoveProperty = new RemovePropertyElements());
	}
	
	public ParserRule getRemovePropertyRule() {
		return getRemovePropertyAccess().getRule();
	}

	////setType(A, id, int) changes type of A's propety id to int
	//SetType returns ops::SetType: //	'set'
	//	owningClassName=ID "." name=ID ":" type=ID;
	public SetTypeElements getSetTypeAccess() {
		return (pSetType != null) ? pSetType : (pSetType = new SetTypeElements());
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}

	////setOpposite(A, key, B, id, true) creates link between A's key and B's id
	////setOpposite(A, key, B, id, false) destroys link between A's key and B's id
	//SetOpposite returns ops::SetOpposite: //	'set'
	//	firstClassName=ID "." firstPropertyName=ID (isOpposite?="<->" | "!<->") secondClassName=ID "." secondPropertyName=ID;
	public SetOppositeElements getSetOppositeAccess() {
		return (pSetOpposite != null) ? pSetOpposite : (pSetOpposite = new SetOppositeElements());
	}
	
	public ParserRule getSetOppositeRule() {
		return getSetOppositeAccess().getRule();
	}

	////setBounds(A, list, 0, 50) sets bounds to A's property list to 0,50 (lower, upper)
	//SetBounds returns ops::SetBounds: //set
	//	owningClassName=ID "." name=ID ("[" (upperBound=INT | lowerBound=INT ".." upperBound=INT?) "]")?;
	public SetBoundsElements getSetBoundsAccess() {
		return (pSetBounds != null) ? pSetBounds : (pSetBounds = new SetBoundsElements());
	}
	
	public ParserRule getSetBoundsRule() {
		return getSetBoundsAccess().getRule();
	}

	////setOrdered(A, list, true) sets A's property list as ordered
	////setOrdered(A, list, false) sets A's property list as unordered
	//SetOrdered returns ops::SetOrdered: //set
	//	owningClassName=ID "." name=ID (isOrdered?="ordered" | "!ordered");
	public SetOrderedElements getSetOrderedAccess() {
		return (pSetOrdered != null) ? pSetOrdered : (pSetOrdered = new SetOrderedElements());
	}
	
	public ParserRule getSetOrderedRule() {
		return getSetOrderedAccess().getRule();
	}

	////setUnique(A, list, true) sets A's property list as unique
	////setUnique(A, list, false) unsets unique status of A's property list
	//SetUnique returns ops::SetUnique: //set
	//	owningClassName=ID "." name=ID (isUnique?="unique" | "!unique");
	public SetUniqueElements getSetUniqueAccess() {
		return (pSetUnique != null) ? pSetUnique : (pSetUnique = new SetUniqueElements());
	}
	
	public ParserRule getSetUniqueRule() {
		return getSetUniqueAccess().getRule();
	}

	////copyPropety(A, id, B, MergeType) copies A's property id to B by selected MergeType
	//CopyProperty returns ops::CopyProperty:
	//	"copy" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID;
	public CopyPropertyElements getCopyPropertyAccess() {
		return (pCopyProperty != null) ? pCopyProperty : (pCopyProperty = new CopyPropertyElements());
	}
	
	public ParserRule getCopyPropertyRule() {
		return getCopyPropertyAccess().getRule();
	}

	////movePropety(A, id, B, MergeType) moves (and deletes) A's property id to B by selected MergeType
	//MoveProperty returns ops::MoveProperty:
	//	"move" type=MergeType owningClassName=ID "." name=ID "->" targetClassName=ID;
	public MovePropertyElements getMovePropertyAccess() {
		return (pMoveProperty != null) ? pMoveProperty : (pMoveProperty = new MovePropertyElements());
	}
	
	public ParserRule getMovePropertyRule() {
		return getMovePropertyAccess().getRule();
	}

	/// **
	// * Decomposable Operations:
	// * / //extractClass(A, {id, name}, B) creates B and moves A's properties {id, name} to created B
	//ExtractClass returns ops::ExtractClass:
	//	"extract" sourceClassName=ID "." "[" extractPropertiesNames+=ID ("," extractPropertiesNames+=ID)* "]" "->"
	//	extractClassName=ID;
	public ExtractClassElements getExtractClassAccess() {
		return (pExtractClass != null) ? pExtractClass : (pExtractClass = new ExtractClassElements());
	}
	
	public ParserRule getExtractClassRule() {
		return getExtractClassAccess().getRule();
	}

	////extractParent({A, B}, {id, name}, C)
	//// creates C, sets C as parent of A and B and moves A's and B's properties {id, name} to C
	//ExtractParent returns ops::ExtractParent:
	//	"extract" "[" sourceClassesName+=ID ("," sourceClassesName+=ID)* "]" "." "[" extractPropertiesName+=ID (","
	//	extractPropertiesName+=ID)* "]" "->" extractParentName=ID;
	public ExtractParentElements getExtractParentAccess() {
		return (pExtractParent != null) ? pExtractParent : (pExtractParent = new ExtractParentElements());
	}
	
	public ParserRule getExtractParentRule() {
		return getExtractParentAccess().getRule();
	}

	/// **
	// * / enum MergeType returns ops::MergeType:
	//	strict | force | tolerant;
	public MergeTypeElements getMergeTypeAccess() {
		return (unknownRuleMergeType != null) ? unknownRuleMergeType : (unknownRuleMergeType = new MergeTypeElements());
	}
	
	public EnumRule getMergeTypeRule() {
		return getMergeTypeAccess().getRule();
	}

	//enum PrimitiveType returns app::PrimitiveType:
	//	boolean | char | int;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (unknownRulePrimitiveType != null) ? unknownRulePrimitiveType : (unknownRulePrimitiveType = new PrimitiveTypeElements());
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//enum InheritanceType returns app::InheritanceType:
	//	joined | tablePerClass | singleTable;
	public InheritanceTypeElements getInheritanceTypeAccess() {
		return (unknownRuleInheritanceType != null) ? unknownRuleInheritanceType : (unknownRuleInheritanceType = new InheritanceTypeElements());
	}
	
	public EnumRule getInheritanceTypeRule() {
		return getInheritanceTypeAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
