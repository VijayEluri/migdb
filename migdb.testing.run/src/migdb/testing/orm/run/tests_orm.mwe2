module migbb.testing.orm.run.tests_orm

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.mwe.*


import org.eclipse.xtext.mwe.SlotEntry
//import org.eclipse.xtext.mwe.ResourceLoadingSlotEntry
import org.eclipse.xtext.mwe.Validator
import org.eclipse.xtext.mwe.NameBasedFilter

import org.eclipse.emf.mwe.utils.Writer
import org.eclipse.emf.mwe.utils.Reader

import eu.collectionspro.mwe.*
import migdb.generator.*

var QVTO_DIR = "../migdb.qvto/transforms"
var OUTPUT_BASE_DIR = "output-tests/orm_atomic"
var IN_APP_OPS = "${QVTO_DIR}/tests/operations/app"
var IN_APP_STR = "${QVTO_DIR}/tests/structures/app"
var IN_RDB_OPS = "${QVTO_DIR}/tests/operations/rdb"
var TEST_TRANSFORMATION = "${QVTO_DIR}/main/orm_run.qvto"

Workflow{	
/***** DEFINE META-MODELS *****/
/**/
	bean=org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri=".."
		registerGeneratedEPackage = "mm.app.AppPackage"
	}
/**/
	bean=org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri=".."
		registerGeneratedEPackage = "mm.rdb.RdbPackage"
	}
/**/
	bean=org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri=".."
		registerGeneratedEPackage = "mm.errors.ErrorsPackage"
	}		

/***** CLEAN DIRECTORIES [XMI] *****/
/**/
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${OUTPUT_BASE_DIR}"
	}

/***** MAIN TESTING *****/

/***** EXTRACT CLASS *****/
/**/
	component = QVTOExecutor{
		outputSlot = "extractClass_ops"
		transformationFile = "${IN_APP_OPS}/extractClass_ops.qvto" 
	}
/**/	
	component = QVTOExecutor{
		outputSlot = "extractClass_str"
		transformationFile = "${IN_APP_STR}/extractClass_str.qvto" 
	}	
/**/	
	component = QVTOExecutor{
		outputSlot = "emptyRdbOps"
		transformationFile = "${IN_RDB_OPS}/empty_rdb_ops.qvto" 
	}
/**/	
	component = QVTOExecutor{
		inputSlot = "extractClass_ops"
		inputSlot = "extractClass_str"
		inputSlot = "emptyRdbOps"
		outputSlot = "extractClass-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
/**/	
	component = Writer {
		modelSlot = "extractClass-out"
		uri = "${OUTPUT_BASE_DIR}/extractClass_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
/*************************/
	
	//str Integer
	component = QVTOExecutor{
		outputSlot = "structureInteger"
		transformationFile = "${IN_APP_STR}/structure_int.qvto" 
	}
	
	//addClass1
	component = QVTOExecutor{
		outputSlot = "addClass1"
		transformationFile = "${IN_APP_OPS}/addClass1.qvto" 
	}
	
	//helper - empty rdbOps
	component = QVTOExecutor{
		outputSlot = "emptyRdbOps"
		transformationFile = "${IN_RDB_OPS}/empty_rdb_ops.qvto" 
	}
	
	component = QVTOExecutor{
		inputSlot = "addClass1"
		inputSlot = "structureInteger"
		inputSlot = "emptyRdbOps"
		outputSlot = "addClass1-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addClass1-out"
		uri = "${OUTPUT_BASE_DIR}/addClass1_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}

	//addProperty1
	component = QVTOExecutor{
		outputSlot = "addProperty1"
		transformationFile = "${IN_APP_OPS}/addProperty1.qvto" 
	}

	//structureTab
	component = QVTOExecutor{
		outputSlot = "structureTab"
		transformationFile = "${IN_APP_STR}/structure_tab.qvto" 
	}
	
	component = QVTOExecutor{
		inputSlot = "addProperty1"
		inputSlot = "structureTab"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty1-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty1-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty1_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
	
	//str_tab_joined
	component = QVTOExecutor{
		outputSlot = "structure_tab_joined_hierarchy"
		transformationFile = "${IN_APP_STR}/structure_tab_joined_hierarchy.qvto" 
	}

	component = QVTOExecutor{
		inputSlot = "addProperty1"
		inputSlot = "structure_tab_joined_hierarchy"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty1a-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty1a-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty1a_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}

	//str_tab_ST
	component = QVTOExecutor{
		outputSlot = "structure_tab_ST_hierarchy"
		transformationFile = "${IN_APP_STR}/structure_tab_ST_hierarchy.qvto" 
	}

	component = QVTOExecutor{
		inputSlot = "addProperty1"
		inputSlot = "structure_tab_ST_hierarchy"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty1b-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty1b-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty1b_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}

	//str_tab_TPC
	component = QVTOExecutor{
		outputSlot = "structure_tab_TPC_hierarchy"
		transformationFile = "${IN_APP_STR}/structure_tab_TPC_hierarchy.qvto" 
	}

	component = QVTOExecutor{
		inputSlot = "addProperty1"
		inputSlot = "structure_tab_TPC_hierarchy"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty1c-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty1c-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty1c_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
	
	//str_tab_embedded
	component = QVTOExecutor{
		outputSlot = "structure_tab_embedded"
		transformationFile = "${IN_APP_STR}/structure_tab_embedded.qvto" 
	}

	component = QVTOExecutor{
		inputSlot = "addProperty1"
		inputSlot = "structure_tab_embedded"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty1d-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty1d-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty1d_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
	
	//addProperty2
	component = QVTOExecutor{
		outputSlot = "addProperty2"
		transformationFile = "${IN_APP_OPS}/addProperty2.qvto" 
	}
	
	//str_tab_type
	component = QVTOExecutor{
		outputSlot = "structure_tab_type"
		transformationFile = "${IN_APP_STR}/structure_tab_type.qvto" 
	}

	component = QVTOExecutor{
		inputSlot = "addProperty2"
		inputSlot = "structure_tab_type"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty2-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty2-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty2_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
	
	//addProperty3
	component = QVTOExecutor{
		outputSlot = "addProperty3"
		transformationFile = "${IN_APP_OPS}/addProperty3.qvto" 
	}
	
	//str_embedded_type
	component = QVTOExecutor{
		outputSlot = "structure_embedded_hierarchy_TPC"
		transformationFile = "${IN_APP_STR}/structure_embedded_hierarchy_TPC.qvto" 
	}

	component = QVTOExecutor{
		inputSlot = "addProperty3"
		inputSlot = "structure_embedded_hierarchy_TPC"
		inputSlot = "emptyRdbOps"
		outputSlot = "addProperty3-out"
		transformationFile = "${TEST_TRANSFORMATION}" 
	}
	
	component = Writer {
		modelSlot = "addProperty3-out"
		uri = "${OUTPUT_BASE_DIR}/addProperty3_out.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
	
	component = Writer {
		modelSlot = "structure_embedded_hierarchy_TPC"
		uri = "${OUTPUT_BASE_DIR}/structure_embedded_hierarchy_TPC.xmi"
		cloneSlotContents = false
		useSingleGlobalResourceSet = true
	}
}