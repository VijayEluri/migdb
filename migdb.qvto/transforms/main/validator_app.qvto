/*
 * The MIT License
 * 
 * Copyright (c) 2010-2012 MigDB team [https://github.com/migdb/migdb/wiki]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

import queries_app;
import builder_errors;
	
modeltype APP uses 'http://www.collectionspro.eu/jam/mm/app';
modeltype ERR uses 'http://www.collectionspro.eu/jam/mm/errors';

transformation validator_app(in inModel : APP, inout errorModel : ERR);

main() {	
	log("Validation aplication model started...");
	if(inModel.rootObjects()->exists(root | root.oclIsTypeOf(APP::Structure)))then{
		inModel.rootObjects()![Structure].isModelValid(errorModel.rootObjects()![ErrorLog]);
		log("");
	}else{
		log("Root element doesn't conform to APP::Structure type");
	}endif;
}
///////////////---------------------------------Validacni query --------------------------------///////////

query getValidatorAppId() : String{
	return "validator_app.qvto";
}

query app::Structure::isModelValid(inout errorLog : ErrorLog):Boolean{
	var classUniqueName : Boolean := true; 
	var propUniqueName : Boolean := true;
	var notCycledHierarchies : Boolean := true;
	var oppositeProperty : Boolean := true;
	var notHasNonRootId : Boolean := true;
	var idBounds : Boolean := true;
	var idTypes : Boolean := true;
	var notTpcExpansion : Boolean := true;
	var rootsId : Boolean := true;
	var areHierarchyTypesHomogenous : Boolean := true;
	
	var entities : Set(ModelEntity) := self.oclAsType(Structure).entities;
	var stdClasses : Set(StandardClass) := entities[StandardClass];
	var stdClassProps : Bag(MultipliableProperty) := stdClasses->properties;
	//classes leading to cycle
	var cycles : Set(StandardClass) := Set{};
	entities->forEach(ent | not ent.hasUniqueName()) {
		errorLog.errors+= _validationError("Structure contains ambigous Class name \"" + ent.name + "\"", getValidatorAppId());		
		classUniqueName := false;
	};
	stdClassProps->forEach(prop | not prop.hasUniqueNameInHierarchy()) {
		errorLog.errors+= _validationError("Structure contains ambigous property name \"" + prop.name +
		 "\" in class \"" + prop.owningGeneralClass.name + "\"", getValidatorAppId());
		propUniqueName := false;		
	};
	stdClasses->forEach(cls | cls.containsCycle(OrderedSet{}) and not cycles->includes(cls)) {
		var  iterateClass : StandardClass := cls;  
		var errorMessage : String := "Structure contains cycled hierarchy:\"" + cls.name +"\"";
		while(not cycles->includes(iterateClass)){
			cycles += iterateClass;
			iterateClass := iterateClass.parent;
			errorMessage := errorMessage + ", \"" + iterateClass.name+"\"";					
		};
		errorLog.errors+= _validationError(errorMessage + "...", getValidatorAppId());
		notCycledHierarchies := false;
	};
	stdClassProps[AssociationProperty]->forEach(assocProp | not assocProp.isOppositeCorrectlySet()){
		var errorMessage : String := "Structure contains property \""+ assocProp.name + "\" property in class \""
		 + assocProp.owningGeneralClass.name + "\" opposite not correctly set";
		errorLog.errors+= _validationError(errorMessage, getValidatorAppId());
		 oppositeProperty := false;
	};
    stdClasses->forEach(cls | cls.parent <> null and cls.hasId()){
    	var errorMessage : String := "Structure contains Non-root class \"" + cls.name + "\" containing id property " 
    	+ cls.idProperty.name + " .";
    	errorLog.errors+= _validationError(errorMessage, getValidatorAppId());
    	notHasNonRootId := false;
    };
	stdClasses->forEach(cls | not cls.areIDBoundsCorrectlySet()){
		var errorMessage : String := "Structure contains class \"" + cls.name + "\" with id bounds not correctly set";
		errorLog.errors+= _validationError(errorMessage, getValidatorAppId());
		idBounds := false;
	};
	stdClasses->forEach(cls | not cls.areIDTypesCorrectlySet()){
		var errorMessage : String := "Structure contains class \"" +cls.name + 
		"\" with id not according primitive Integer";
	    errorLog.errors+= _validationError(errorMessage, getValidatorAppId());
	     idTypes := false;
	};
	
	stdClasses->forEach(cls | cls.parent = null and not cls.hasId()){
		rootsId := false;
		var errorMessage : String := "Structure contains root class " + cls.name + " with no id Property";
		errorLog.errors+= _validationError(errorMessage, getValidatorAppId());	
	};
	
	stdClassProps->forEach(prop | (prop.owningGeneralClass.isNonleafTPCClass() and
	  (prop.upperBound > 1 or prop.upperBound = -1))){
	  var errorMessage : String := "Structure contains TPC hierarchy causing table expansion class \""
		 + prop.owningGeneralClass.name + "\" property\"" + prop.name + "\"";
		errorLog.errors+= _validationError(errorMessage, getValidatorAppId());
		notTpcExpansion := false;
	};
	var valid : Boolean := classUniqueName and propUniqueName and notCycledHierarchies and oppositeProperty
	 	 and notHasNonRootId and idBounds and idTypes and notTpcExpansion and rootsId;
	return  valid;
}