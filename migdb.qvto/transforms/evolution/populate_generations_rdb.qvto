/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

modeltype RDB uses rdb('http://www.collectionspro.eu/jam/mm/rdb');

transformation DB_To_Rdb(in inModel : RDB, out outModel : RDB);
main() {
	assert(inModel.rootObjects()->size() = 1);
	assert(inModel.rootObjects()->forAll(oclIsKindOf(RDB::ModelRoot)));

	log("transformation started...");

	inModel.rootObjects().deepclone();

	var root : RDB::ModelRoot = outModel.rootObjects()![RDB::ModelRoot];
	var gen0 : RDB::ModelGeneration = root.modelGenerations->first();

	root.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(gen0)) then {
			log("	operation is valid " + op.repr());
			op.xmap apply(gen0);
		} else {
			log("	operation is invalid " + op.repr());
		} endif;
	};

	root.operations = root.operations->reject(true);
}

// kontroluje validitu operace
abstract query RDB::operations::ModelOperation::
	isValid(gen : RDB::ModelGeneration) : Boolean;

// namapuje danou operaci
abstract mapping RDB::operations::ModelOperation::
	apply(inout gen : RDB::ModelGeneration);


/* ++++++++++ ADD OPERATIONS ++++++++++++++++++++ */

query RDB::operations::AddSchema::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dane generaci neexistuje schema stejneho nazvu
	return not gen.isSchemaInGeneration(self.name);
}

// prida schema do generace
mapping RDB::operations::AddSchema::apply(inout gen : RDB::ModelGeneration) {
	gen.schemas += object RDB::Schema {
		name := self.name;
	}
}

/**
 * ADD SEQUENCE
 * In the system we use only one global sequence. 
 * Operation is something like singleton - Sequence can be created only one times
 */
query RDB::operations::AddSequence::isValid(gen : RDB::ModelGeneration) : Boolean {
	// sequence with @newDefaultValue must exists in generation
	return not gen.isSequenceInSchema(self.owningSchemaName, self.name) 
	// in schema can not be another sequence
	       and gen.findSchema(self.owningSchemaName)->sequences->size() = 0;
}

mapping RDB::operations::AddSequence::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.sequences += object RDB::Sequence {
		name := self.name;
		startValue := self.startValue;
	}
}

query RDB::operations::AddIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v danem schematu neexistuje index stejneho nazvu
	return not gen.isIndexInSchema(self.owningSchemaName, self.name)
	// v dane tabulce existuje dany sloupce
		   and gen.areColumnsInTable(self.owningSchemaName, self.owningTableName, self.columnsNames);
}

// prida index do schematu
mapping RDB::operations::AddIndex::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.indexes += object RDB::Index {
		name := self.name;		
		columns += gen.findColumns(self.owningSchemaName, self.owningTableName, self.columnsNames);
	}
}

query RDB::operations::AddTable::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v danem schematu neexistuje tabulka stejneho nazvu
	return not gen.isTableInSchema(self.owningSchemaName, self.name);
}

// prida tabulku do schematu
mapping RDB::operations::AddTable::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	s.tables += object RDB::Table {
		name := self.name;
	};
}

query RDB::operations::AddColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
	// v dane tabulce neexistuje sloupec stejneho nazvu
	return not gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name);
}

// prida sloupec do tabulky
mapping RDB::operations::AddColumn::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.columns += object RDB::Column {
		name := self.name;
		type := self.type;
		defaultValue := self.defaultValue;
	}
}

query RDB::operations::AddUniqueIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezeni stejneho nazvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v danem schematu existuje dany index
	and gen.isIndexInSchema(self.owningSchemaName, self.underlyingIndexName);
}

// prida omezeni 'UniqueIndex' pro tabulku
mapping RDB::operations::AddUniqueIndex::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::UniqueIndex {
		name := self.name;
		underlyingIndex := gen.findIndex(self.owningSchemaName, self.underlyingIndexName);
	}
}

query RDB::operations::AddPrimaryKey::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezeni stejneho nazvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v danem schematu existuje dany index
	and gen.isIndexInSchema(self.owningSchemaName, self.underlyingIndexName)
	// v dane tabulce existuje dany sloupec
	and gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.columnName);
}

// prida omezeni 'PrimaryKey' pro tabulku
mapping RDB::operations::AddPrimaryKey::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::PrimaryKey {
		name := self.name;
		underlyingIndex := gen.findIndex(self.owningSchemaName, self.underlyingIndexName);
	}
}

query RDB::operations::AddForeignKey::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro danou tabulku neexistuje omezeni stejneho nazvu
	return not gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name)
	// v danem schematu existuje cilova tabulka
	and gen.isTableInSchema(self.owningSchemaName, self.targetTableName)
	// v cilove tabulce existuje dany sloupce
	and gen.isColumnInTable(self.owningSchemaName, self.targetTableName, self.constrainedColumnName);
}

// prida omezeni 'ForeignKey' pro tabulku
mapping RDB::operations::AddForeignKey::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	t.constraints += object RDB::ForeignKey {
		name := self.name;
		targetTable := gen.findTable(self.owningSchemaName, self.targetTableName);
		constrainedColumn := gen.findColumn(self.owningSchemaName, self.targetTableName, self.constrainedColumnName);
	}
}

query RDB::operations::AddNotNullConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
	// pro dani sloupec neexistuje omezeni stejneho nazvu
	return not gen.isConstraintForColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name);	   
}

// prida omezeni 'NotNull' pro sloupec
mapping RDB::operations::AddNotNullConstraint::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.constraints += object RDB::NotNullConstraint {
		name := self.name;
	}
}

/* ++++++++++ EDIT OPERATIONS ++++++++++++++++++++ */

query RDB::operations::RenameTable::isValid( gen : RDB::ModelGeneration) : Boolean {
	// tabulka s nazvem @name existuje ve schematu
	return gen.isTableInSchema(self.owningSchemaName, self.name)
	// tabulka s nazvem @newName neexistuje ve schematu
		   and not gen.isTableInSchema(self.owningSchemaName, self.newName);
}

mapping RDB::operations::RenameTable::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.name);
	// zmena hodnoty atributu name
	t.name := self.newName;
}

query RDB::operations::RenameColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
	// sloupec s nazvem @name existuje v tabulce
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
	// sloupec s nazvem @newName neexistuje v tabulce
		   and not gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.newName);
}

mapping RDB::operations::RenameColumn::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.name);
	// zmena hodnoty atributu name
	c.name := self.newName;
}

/**
 * SET COLUMN TYPE
 * This operation replace old type of column with a new type of column
 * Column and new type must exists in actual model generation. 
 */
query RDB::operations::SetColumnType::isValid(gen : RDB::ModelGeneration) : Boolean {
	// column with @name must exists in generation
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName)
	// new type must exists in generation
		   and gen.isPrimitiveType(self.newType);
}

mapping RDB::operations::SetColumnType::apply(inout gen : RDB::ModelGeneration){
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.type := gen.createPrimitiveType(self.newType);
}

/**
 * SET COLUMN DEFAULT VALUE
 * This operation set new default value to column
 * Column must exists in actual model generation. 
 * If is property isSequence set on TRUE - Sequence must exist in generation - this information is used only in SQL generator
 * In sequence case @newDefaultValue means name of sequence in model generation
 */
query RDB::operations::SetColumnDefaultValue::isValid(gen : RDB::ModelGeneration) : Boolean {
	var isSequence : Boolean := true;
	// sequence with @newDefaultValue must exists in generation
	if (not gen.isSequenceInSchema(self.owningSchemaName, self.newDefaultValue)) then { isSequence := false; } endif;
	// column with @owningColumnName must exists in generation
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName) and isSequence;
}

mapping RDB::operations::SetColumnDefaultValue::apply(inout gen : RDB::ModelGeneration){
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.defaultValue := self.newDefaultValue;
}


/* ++++++++++ REMOVE OPERATIONS ++++++++++++++++++++ */

query RDB::operations::RemoveTable::isValid(gen : RDB::ModelGeneration) : Boolean {
	// tabulka existuje v danem schematu
	return gen.isTableInSchema(self.owningSchemaName, self.name)
	// v tabulce existuje pouze identifikacni sloupec
		   and gen.findTable(self.owningSchemaName, self.name).columns->size() = 1;
}

// odstrani tabulku z daneho schematu
mapping RDB::operations::RemoveTable::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	// odstraneni tabulky
	s.tables := s.tables->excluding(gen.findTable(self.owningSchemaName, self.name));
}

query RDB::operations::RemoveColumn::isValid(gen : RDB::ModelGeneration) : Boolean {
    // sloupec existuje v dane tabulce
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.name)
	// dane sloupec nemi zadne omezeni
		   and gen.findColumn(self.owningSchemaName, self.owningTableName, self.name).constraints->size() = 0
	// pro dany sloupec neexistuje tabulkove omezeni 'Unique'
		   and not gen.isUnique(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje tabulkove omezeni 'PrimaryKey'
		   and not gen.isPrimaryKey(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje tabulkove omezeni 'ForeignKey'
		   and not gen.isForeignKey(self.owningSchemaName, self.owningTableName, self.name)
	// pro dany sloupec neexistuje sloupcove omezeni 'NotNull'
		   and not gen.isNotNull(self.owningSchemaName, self.owningTableName, self.name);
}

// odstrani atribut z dane tridy
mapping RDB::operations::RemoveColumn::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	// odstraneni sloupce
	t.columns := t.columns->excluding(gen.findColumn(self.owningSchemaName, self.owningTableName, self.name));
}

query RDB::operations::RemoveTableConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
    // omezeni existuje pro danou tabulku
	return gen.isConstraintForTable(self.owningSchemaName, self.owningTableName, self.name);
}

// odstrani omezeni pro danou tabulku
mapping RDB::operations::RemoveTableConstraint::apply(inout gen : RDB::ModelGeneration) {
	var t : RDB::Table := gen.findTable(self.owningSchemaName, self.owningTableName);
	// odstraneni omezeni
	t.constraints := t.constraints->excluding(gen.findTableConstraint(self.owningSchemaName, self.owningTableName, self.name));
}

query RDB::operations::RemoveColumnConstraint::isValid(gen : RDB::ModelGeneration) : Boolean {
    // omezeni existuje pro dany sloupec
	return gen.isConstraintForColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name);
}

// odstrani omezeni pro dany sloupec
mapping RDB::operations::RemoveColumnConstraint::apply(inout gen : RDB::ModelGeneration) {
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	// odstraneni omezeni
	c.constraints := c.constraints->excluding(gen.findColumnConstraint(self.owningSchemaName, self.owningTableName, self.owningColumnName, self.name));
}

query RDB::operations::RemoveIndex::isValid(gen : RDB::ModelGeneration) : Boolean {
    // index existuje v danem schematu
	return gen.isIndexInSchema(self.owningSchemaName, self.name);
}

// odstrani index z daneho schematu
mapping RDB::operations::RemoveIndex::apply(inout gen : RDB::ModelGeneration) {
	var s : RDB::Schema := gen.findSchema(self.owningSchemaName);
	// odstraneni indexu
	s.indexes := s.indexes->excluding(gen.findIndex(self.owningSchemaName, self.name));
}

/**
 * REMOVE DEFAULT VALUE
 * This operation remove default value and set value to NULL
 * Column must exists in actual model generation. 
 */
query RDB::operations::RemoveDefaultValue::isValid(gen : RDB::ModelGeneration) : Boolean {
	// column with @name must exists in generation
	return gen.isColumnInTable(self.owningSchemaName, self.owningTableName, self.owningColumnName);
}

mapping RDB::operations::RemoveDefaultValue::apply(inout gen : RDB::ModelGeneration){
	var c : RDB::Column := gen.findColumn(self.owningSchemaName, self.owningTableName, self.owningColumnName);
	c.defaultValue := null;
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

// overi, zda-li existuje schema v generaci
query RDB::ModelGeneration::isSchemaInGeneration(sName : String) : Boolean {
	return self.schemas->exists(name = sName);
}

// vrati schema z generace
query RDB::ModelGeneration::findSchema(sName : String) : RDB::Schema {
	return self.schemas->selectOne(name = sName);
}

// overi, zda-li existuje sekvence ve schematu
query RDB::ModelGeneration::isSequenceInSchema(sName : String, qName : String) : Boolean {
	return self.findSchema(sName).sequences->exists(name = qName);
}

// vrati sequenci z generace
query RDB::ModelGeneration::findSequence(sName : String, qName : String) : RDB::Sequence {
	return self.findSchema(sName).sequences->selectOne(name = qName);
}

// overi, zda-li existuje index ve schematu
query RDB::ModelGeneration::isIndexInSchema(sName : String, iName : String) : Boolean {
	return self.findSchema(sName).indexes->exists(name = iName);
}

// vrati index ze schema
query RDB::ModelGeneration::findIndex(sName : String, iName : String) : RDB::Index {
	return self.findSchema(sName).indexes->selectOne(name = iName);
}

// overi, zda-li existuje tabulka ve schematu
query RDB::ModelGeneration::isTableInSchema(sName : String, tName : String) : Boolean {
	return self.findSchema(sName).tables->exists(name = tName);
}

// vrati tabulku ze schematu
query RDB::ModelGeneration::findTable(sName : String, tName : String) : RDB::Table {
	return self.findSchema(sName).tables->selectOne(name = tName);
}

// overi, zda-li existuje sloupec v tabulce
query RDB::ModelGeneration::isColumnInTable(sName : String, tName : String, cName : String) : Boolean {
	return self.findTable(sName, tName).columns->exists(name = cName);
}

// overi, zda-li existuje sloupce v tabulce
query RDB::ModelGeneration::areColumnsInTable(sName : String, tName : String, cNames : OrderedSet(String)) : Boolean {
	var b : Boolean := true;
	cNames->forEach(cName) {
		b = b and self.isColumnInTable(sName, tName, cName);
	};
	return b;
}

// vrati sloupec z tabulky
query RDB::ModelGeneration::findColumn(sName : String, tName : String, cName : String) : RDB::Column {
	return self.findTable(sName, tName).columns->selectOne(name = cName);
}

// vrati serazenou mnozinu sloupcu z tabulky
query RDB::ModelGeneration::findColumns(sName : String, tName : String, cNames : OrderedSet(String)) : OrderedSet(RDB::Column) {
	var columns : OrderedSet(RDB::Column);
	cNames->forEach(cName) {
		columns += self.findColumn(sName, tName, cName);
	};
	return columns;
}

// overi, zda-li existuje omezeni pro tabulku
query RDB::ModelGeneration::isConstraintForTable(sName : String, tName : String, rName : String) : Boolean {
	return self.findTable(sName, tName).constraints->exists(name = rName);
}

// overi, zda-li existuje omezeni pro sloupec 
query RDB::ModelGeneration::isConstraintForColumn(sName : String, tName : String, cName : String, rName : String) : Boolean {
	return self.findColumn(sName, tName, cName).constraints->exists(name = rName);
}

// vrati omezeni dane tabulky
query RDB::ModelGeneration::findTableConstraint(sName : String, tName : String, rName : String) : RDB::TableConstraint {
	return self.findTable(sName, tName).constraints->selectOne(name = rName);
}

// vrati omezeni daneho sloupce
query RDB::ModelGeneration::findColumnConstraint(sName : String, tName : String, cName : String, rName : String) : RDB::ColumnConstraint {
	return self.findColumn(sName, tName, cName).constraints->selectOne(name = rName);
}

// overi, zda-li existuje pro sloupec tabulkove omezeni 'Unique'
query RDB::ModelGeneration::isUnique(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'Unique'
	self.findTable(sName, tName).constraints.oclAsType(RDB::UniqueIndex)->forEach(r) {
		return r.underlyingIndex.columns->exists(name = cName);
	};
	return false;
}

// overi, zda-li existuje pro sloupce tabulkove omezeni 'PrimaryKey'
query RDB::ModelGeneration::isPrimaryKey(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'PrimaryKey'
	self.findTable(sName, tName).constraints.oclAsType(RDB::PrimaryKey)->forEach(r) {
		return r.underlyingIndex.columns->exists(name = cName);
	};
	return false;
}

// overi, zda-li existuje pro sloupec tabulkove omezeni 'ForeignKey'
query RDB::ModelGeneration::isForeignKey(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'ForeignKey'
	self.findTable(sName, tName).constraints.oclAsType(RDB::ForeignKey)->forEach(r) {
		return r.constrainedColumn.name = cName;
	};
	return false;
}

// overi, zda-li existuje pro sloupec sloupcove omezeni 'Not Null'
query RDB::ModelGeneration::isNotNull(sName : String, tName : String, cName : String) : Boolean {
	// vybere omezeni typu 'NotNull'
	self.findTable(sName, tName).constraints.oclAsType(RDB::NotNullConstraint)->forEach(r) {
		return r.owningColumn.name = cName;
	};
	return false;
}

// overi, zda primitivni typ existuje (true - exituje, false - neexistuje)
query RDB::ModelGeneration::isPrimitiveType(type : String) : Boolean {
	// je treba prohledat enum, zda se v nem nachazi nas hledany prvek
	return not (self.createPrimitiveType(type) = null);
}

// prirazeni primitivni hodnoty podle vstupniho stringu
query RDB::ModelGeneration::createPrimitiveType (type : String) : RDB::PrimitiveType {
	switch {
		case (type = "boolean") return RDB::PrimitiveType::boolean;
		case (type = "char") return RDB::PrimitiveType::char;
		case (type = "int") return RDB::PrimitiveType::int;
		case (type = "float") return RDB::PrimitiveType::float;
	};
	return null;
}