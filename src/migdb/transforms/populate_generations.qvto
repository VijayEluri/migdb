/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

modeltype APP uses 'mm-app';

transformation APP_To_Rdb(in inModel : APP, out outModel : APP);
main() {
	assert(inModel.rootObjects()->size() = 1);
	assert(inModel.rootObjects()->forAll(oclIsKindOf(APP::reduced::ModelRoot)));
	
	log("transformation started...");
	
	inModel.rootObjects().deepclone();

	var root : APP::reduced::ModelRoot = outModel.rootObjects()![APP::reduced::ModelRoot];
	var gen0 : APP::reduced::ModelGeneration = root.modelGenerations->first();
	
	root.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(gen0)) then {
			log("	operation is valid " + op.repr());
			op.xmap apply(gen0);
		} endif;
	};
	
	root.operations = root.operations->reject(true);
}

// kontrola validity operace
abstract query APP::reduced::operations::ModelOperation::
	isValid(gen : APP::reduced::ModelGeneration) : Boolean;

// namapovani dane operace
abstract mapping APP::reduced::operations::ModelOperation::
	apply(inout gen : APP::reduced::ModelGeneration);


/* ++++++++++ ADD OPERATIONS ++++++++++++++++++++ */

query APP::reduced::operations::AddClass::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return not gen.isClassInGeneration(self.name)
		   and not (self.name = self.parent);
}

mapping APP::reduced::operations::AddClass::apply(inout gen : APP::reduced::ModelGeneration) {
	gen.classes += object APP::reduced::Class {
		name := self.name;
		parent := gen.findClass(self.parent);
		isAbstract := self.isAbstract;
		isEmbedded := self.isEmbedded;
		isPrimitive := self.isPrimitive;
		tableName := self.tableName;
		inheritanceType := self.inheritanceType;
	};
}

query APP::reduced::operations::AddProperty::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.owningClassName)
		   and not gen.isPropertyInClass(self.name, self.owningClassName);
}

mapping APP::reduced::operations::AddProperty::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.owningClassName);
	
	c.properties += object APP::reduced::Property {
		name := self.name;
		type := gen.findClass(self.type);
		defaultValue := self.defaultValue; // a value type has to be equal with a type of property
		lowerBound := self.lowerBound;
		upperBound := self.upperBound;
		isOrdered := self.isOrdered; // has to be a collection (upperBound == -1)
		isUnique := self.isUnique; // has to be a collection (upperBound == -1)
		columnName := self.columnName;
		columnNamePattern := self.columnNamePattern;
		sequenceName := self.sequenceName;
	};
}

query APP::reduced::operations::AddAssociation::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isPropertyInClass(self.firstPropertyName, self.firstClassName)
		   and gen.isPropertyInClass(self.secondPropertyName, self.secondClassName);
}

mapping APP::reduced::operations::AddAssociation::apply(inout gen : APP::reduced::ModelGeneration) {
	var p1 : APP::reduced::Property := gen.findClass(self.firstClassName).findProperty(self.firstPropertyName);
	var p2 : APP::reduced::Property := gen.findClass(self.secondClassName).findProperty(self.secondPropertyName);
	p1.opositeProperty := p2;
	p2.opositeProperty := p1;
}


/* ++++++++++ SET OPERATIONS FOR CLASSES ++++++++++++++++++++ */

query APP::reduced::operations::SetAbstract::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.name);
}

mapping APP::reduced::operations::SetAbstract::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.name);
	c.isAbstract := self.isAbstract;
}

query APP::reduced::operations::SetEmbedded::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.name);
}

mapping APP::reduced::operations::SetEmbedded::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.name);
	c.isEmbedded := self.isEmbedded;
}

query APP::reduced::operations::SetParent::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.name)
	       and not gen.isSelfParent(self.parentName, self.name, true);
}

mapping APP::reduced::operations::SetParent::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.name);
	c.parent := gen.findClass(self.parentName);	
}

query APP::reduced::operations::SetPrimitive::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.name);
}

mapping APP::reduced::operations::SetPrimitive::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.name);
	c.isPrimitive := self.isPrimitive;
}


/* ++++++++++ SET OPERATIONS FOR PROPERTIES ++++++++++++++++++++ */

query APP::reduced::operations::SetType::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.owningClassName)
		   and gen.isPropertyInClass(self.name, self.owningClassName)
		   and gen.isClassInGeneration(self.type);
}

mapping APP::reduced::operations::SetType::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.owningClassName);
	var p : APP::reduced::Property := c.findProperty(self.name);
	p.type := gen.findClass(self.type); // null
}

query APP::reduced::operations::SetOrdered::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.owningClassName)
		   and gen.isPropertyInClass(self.name, self.owningClassName);
}

mapping APP::reduced::operations::SetOrdered::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.owningClassName);
	var p : APP::reduced::Property := c.findProperty(self.name);
	p.isOrdered := self.isOrdered;
}

query APP::reduced::operations::SetUnique::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.owningClassName)
		   and gen.isPropertyInClass(self.name, self.owningClassName);
}

mapping APP::reduced::operations::SetUnique::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.owningClassName);
	var p : APP::reduced::Property := c.findProperty(self.name);
	p.isUnique := self.isUnique;
}


/* ++++++++++ EDIT OPERATIONS ++++++++++++++++++++ */

query APP::reduced::operations::RenameClass::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.name)
		   and not gen.isClassInGeneration(self.newName);
}

mapping APP::reduced::operations::RenameClass::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.name);
	c.name = self.newName;
}

query APP::reduced::operations::RenameProperty::isValid(gen : APP::reduced::ModelGeneration) : Boolean {
	return gen.isClassInGeneration(self.owningClassName)
		   and gen.isPropertyInClass(self.name, self.owningClassName)
		   and not gen.isPropertyInClass(self.newName, self.owningClassName);
}

mapping APP::reduced::operations::RenameProperty::apply(inout gen : APP::reduced::ModelGeneration) {
	var c : APP::reduced::Class := gen.findClass(self.owningClassName);
	var p : APP::reduced::Property := c.findProperty(self.name);
	p.name = self.newName;
}

/* ++++++++++ DELETE OPERATIONS ++++++++++++++++++++ */

query APP::reduced::operations::RemoveClass::isValid(gen : APP::reduced::ModelGeneration) : Boolean{
	return gen.isClassInGeneration(self.name) // testuji zda trida existuje
		   and not gen.classes.properties->exists(type = self) // testuji, zda neni trida soucasti vazby
		   and not gen.classes->exists(parent = self); // testuji, zda neni trida v hyerarchii
}

mapping APP::reduced::operations::RemoveClass::apply(inout gen : APP::reduced::ModelGeneration){
	gen.classes := gen.classes->excluding(gen.findClass(self.name));
}

query APP::reduced::operations::RemoveProperty::isValid(gen : APP::reduced::ModelGeneration) : Boolean{
	return gen.isPropertyInClass(self.name, self.owningClassName);
	// nevim jak zaclenit to, ze je soucasti asociace
}

mapping APP::reduced::operations::RemoveProperty::apply(inout gen : APP::reduced::ModelGeneration){
	var c :  APP::reduced::Class := gen.findClass(self.owningClassName); // ulozime si hledanou tridu 
	c.properties := c.properties->excluding(c.findProperty(self.name));
}

query APP::reduced::operations::RemoveAssociation::isValid(gen : APP::reduced::ModelGeneration) : Boolean{
	return gen.classes->exists(name = self.firstClassName) // testujeme zda existuje trida  first
		   and gen.classes->exists(name = self.secondClassName) // testujeme zda existuje trida second
		   and gen.findClass(self.firstClassName).properties->exists(name = self.firstPropertyName) // testujeme zda existuje property ve tride first
		   and gen.findClass(self.secondClassName).properties->exists(name = self.secondPropertyName); // testujeme zda existuje property ve tride second
}

mapping APP::reduced::operations::RemoveAssociation::apply(inout gen : APP::reduced::ModelGeneration){
	var firstClass :  APP::reduced::Class := gen.findClass(self.firstClassName);
	var secondClass :  APP::reduced::Class := gen.findClass(self.secondClassName);
	firstClass.properties->excluding(firstClass.findProperty(self.firstPropertyName));
	secondClass.properties->excluding(secondClass.findProperty(self.secondPropertyName));
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

// vrati tridu daneho jmena
query APP::reduced::ModelGeneration::findClass(cName : String) : APP::reduced::Class {
	return self.classes->selectOne(name = cName);
}

// overi, jestli v dane generaci existuje trida s danym jmenem
query APP::reduced::ModelGeneration::isClassInGeneration(cName : String) : Boolean {
	return self.classes->exists(name = cName );
}

// vrati property daneho jmena
query APP::reduced::Class::findProperty(pName : String) : APP::reduced::Property {
	return self.properties->selectOne(name = pName);
}

// overi, jestli v dane tride existuje property s danym jmenem
query APP::reduced::ModelGeneration::isPropertyInClass(pName : String, cName : String) : Boolean {
	return self.classes->select(name=cName).properties->exists(name=pName);
}

// overi, jestli je trida sama sobe rodicem
query APP::reduced::ModelGeneration::isSelfParent(cName : String, startName : String, entry : Boolean) : Boolean {
	var c : APP::reduced::Class := self.findClass(cName);
	if (c <> null) then {
		if (not entry and cName = startName) then { return true; } endif;
		if (c.parent <> null) then { return self.isSelfParent(c.parent.name, startName, false); } endif;
	} endif;
	return false;
}
