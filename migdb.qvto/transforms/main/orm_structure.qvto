import queries_app;
import builder_rdb;
import queries_rdb;
import builder_errors;
import name_service_app;
import text_service;
// imported because of toRdbType(APP::TYPE) RDB::Type
import orm;

modeltype APP uses "http://www.collectionspro.eu/jam/mm/app";
modeltype ERR uses "http://www.collectionspro.eu/jam/mm/errors";
modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";


library orm_structure;

query getOrmStructureTransformationId() : String{
	return "orm_structure.qvto";
}
/**
	Entry point gets APP::Structure and maps it to RDB::Structure
**/
helper APP::Structure::toRdb(inout errorLog : ErrorLog ): RDB::Structure{
	var publicSchema : RDB::Schema := _schema(getDefaultSchemaName());
	var rdbStructure : RDB::Structure := _rdbStructure(OrderedSet{publicSchema});
	log("ORM structure transformation started");
	var standardClasses : Set(StandardClass) := self.entities[StandardClass];
	var owningAssociationProperties : Bag(AssociationProperty) := standardClasses->properties[AssociationProperty]->select(prop | prop.isOwning);
	standardClasses->forEach(stcls){
		log(stcls.repr());
	};
	// 1. mapping standardClasses to tables
	standardClasses->forEach(stCls | stCls.isRoot() or not stCls.hasSingleTableInheritanceType()){
		stCls.toTable(publicSchema, errorLog);
	};
	//2. mapping of associations transformed to column, e.g. unidirectional 1-1, bidirectional 1-1, M-1 unidirectional, 1-M bidirectional
	owningAssociationProperties->forEach(prop | prop.isOneToOneUnidirectional()
		or prop.isOneToOneBidirectional() or prop.isOneToManyUnidirectional() or prop.isOneToManyBidirectional()){
		prop.toAssociationColumn(publicSchema, errorLog);
	};

	//3. mapping of associations transformed to additional column in a table
	owningAssociationProperties->forEach(prop | prop.isManyToManyUnidirectional() or prop.isManyToManyBidirectional()){
		prop.toAssociationTable(publicSchema, errorLog);
	};
	//4. adding foreign keys to parent tables applies only on joined hierarchy 
	//- in state 1 existence of those tables is not ensured	  
	standardClasses->forEach(clazz | clazz.hasJoinedInheritanceType() and not clazz.isRoot()){
		clazz.addReferenceToParent(publicSchema, errorLog);
	};
	log("transformation ended");
	return rdbStructure;
}

/**
	Switch mapping of Standard class 
**/
helper app::StandardClass::toTable(schema : RDB::Schema, inout errorLog : ErrorLog){
	log("to table " + self.repr());	
	if(self.hasJoinedInheritanceType())then{
		self.toJoinedTable(schema, errorLog);
		return;
	}endif;
	if(self.hasSingleTableInheritanceType() and self.isRoot())then{
		self.toSingleTable(schema, errorLog);
		return;
	}endif;
	if(self.hasTablePerClassInheritanceType())then{
		self.toTablePerClass(schema, errorLog);
		return;	
	}endif;
	errorLog.errors+=_ormError("Unknown inheritance type", getOrmStructureTransformationId());
	return;	
}


/**
	Mapping joined Class to table - maps properties owned by the chosen class. Doesn't add foreign key 
	referencing parent table because existence of parent cannot be ensured in that moment
**/
helper app::StandardClass::toJoinedTable(inout schema : RDB::Schema, inout errorLog : ErrorLog){
	if(not self.hasJoinedInheritanceType())then{
		var errorMessage : String := "Mapping non joined class " + self.repr() + " by joined mapping";
		errorLog.errors +=_ormError(errorMessage, getOrmStructureTransformationId());
		return;
	}endif;
	var tableName := self.name.translate();
	var table : Table := _table(tableName);
	schema.tables += table;
	//mapping owning properties
	self->properties[PrimitiveProperty]->asSet()->toColumns(table, errorLog);
	return;
}

/**
	Maps class with inheritanceType table per class. Maps collected properties around the path from class to 
	the root of the hierarchy. No FK is added 
**/
helper app::StandardClass::toTablePerClass(inout schema : RDB::Schema, inout errorLog : ErrorLog){
	if(not self.hasTablePerClassInheritanceType())then{
		var errorMessage : String := "Implementation fault : Mapping non table per class " + self.repr() + " by TPC mapping";
		errorLog.errors +=_ormError(errorMessage, getOrmStructureTransformationId());
		return;
	}endif;
	//log("toTablePerClass section " + self.name);
	var table : Table := _table(self.name.translate());
	schema.tables+= table;
	var columns : OrderedSet(Column) := self.getPathToRoot()->properties[PrimitiveProperty]->asSet()->toColumns(table, errorLog);
	return;
}

/**
	Mapping ROOT class with InheritanceType SingleTable - maps collumns of all successors to one 
	RootTable of hierarchy then adds discriminator collumn.
**/
helper app::StandardClass::toSingleTable(inout schema : RDB::Schema, inout errorLog : ErrorLog){
	if(not self.hasSingleTableInheritanceType() or not self.isRoot())then{
		var errorMessage : String := "Implementation fault : Mapping non single table class or " + 
			self.repr() + " or that class is not root of class hierarchy by single table mapping";
		errorLog.errors +=_ormError(errorMessage, getOrmStructureTransformationId());
		return;
	}endif;
	var table : Table := _table(self.name.translate(), OrderedSet{}, OrderedSet{});
	schema.tables+=table;
	self.getAllDescendants()->properties->asSet()->toColumns(table, errorLog);
	//needs existance of String Class
	table.columns += _column(getDiscriminatorColumnName(), RDB::PrimitiveType::char);
	return;
}

/**
	Switch mapping for multipliable properties
**/
helper Set(app::MultipliableProperty)::toColumns(inout table : Table, inout errorLog : ErrorLog){
	self->forEach(prop){
		if(prop.oclIsTypeOf(PrimitiveProperty))then{
			var primitiveProperty : PrimitiveProperty := prop.oclAsType(PrimitiveProperty);
			if(primitiveProperty.upperBound = 1)then{	
				prop.oclAsType(PrimitiveProperty).toPrimitive(table, errorLog);
			} else{
				if(primitiveProperty.upperBound = -1 or primitiveProperty.upperBound > 1)then{
					primitiveProperty.toCollection(table, errorLog);
				} else{
					var errorMessage : String := "Property " + prop.repr() + " has invalid upperBound - cannot be mapped";
					errorLog.errors += _ormError(errorMessage, getOrmStructureTransformationId());
				}endif;
			}endif;
		}else {
			if(prop.oclIsTypeOf(NestedProperty))then{
				prop.oclAsType(NestedProperty).toColumns(table, errorLog);
			}else{
				var errorMessage : String := "property " + prop.repr() + " has unknown type - can't be mapped";
				errorLog.errors+= _ormError(errorMessage, getOrmStructureTransformationId());
				return;
			}endif;		
		}endif;
	};
	return;
}

/**
	Mapping Nested Property to set of columns from EmbeddedClass
**/
helper app::NestedProperty::toColumns(inout table : RDB::Table, inout errorLog : ErrorLog){
	log("toEmbeddedColumn section "+ self.name + " " + self.type.name);
	self.type.oclAsType(EmbeddedClass).embeddedProperties ->forEach(prop){
		log(prop.name);
		var column := _column(self.name + "_" + prop.name, toRdbType(prop.getPrimitiveType()));
		table.columns += column;
	};
	return;
}

/**
  Maps primitiveProperty to column and eventually creates PK
**/
helper app::PrimitiveProperty::toPrimitive(inout table : Table, inout errorLog : ErrorLog){
	if(not(self.upperBound = 1 and (self.lowerBound = 1 or self.lowerBound = 0))) then {
		var errorMessage : String := "error attempt to map " + self.repr() + " to collumn";
		errorLog.errors += _ormError(errorMessage, getOrmStructureTransformationId());
		return;
	}endif;
	log("toPrimitive property section " + self.name);
	var column : Column;
	column := _column(self.name.translate(), toRdbType(self.getPrimitiveType()), self.defaultValue);
	if(self.isID())then{
		table.constraints += _primaryKey(getPrimaryKeyName(table.name), column);
	}endif;
	table.columns += column;
	return;	
}

/**
	Maps primitive property with upperBound more than 1 or -1.
**/
helper app::PrimitiveProperty::toCollection(inout referencedTable : Table, inout errorLog : ErrorLog){
	if(not(self.upperBound > 1 or self.upperBound = -1)) then {
		var errorMessage : String := "error attempt to map " + self.repr() + " to collection table";
		errorLog.errors += _ormError(errorMessage, getOrmStructureTransformationId());
		return;
	}endif;
	log("To collection " + self.repr());
	var collectionPropertyColumn : rdb::Column := _column(self.name.translate() , toRdbType(self.getPrimitiveType()));
	var idColumn := _column(self.owningGeneralClass.translateIdName(), toRdbType(self.owningGeneralClass.getId().getPrimitiveType()));
	var fkOwningTableProjection : rdb::ForeignKey := _foreignKey(self.getFKCollectionName(), referencedTable, idColumn);
	var collectionTable : rdb::Table := _table(self.getCollectionTableName(), OrderedSet{collectionPropertyColumn, idColumn}, OrderedSet{fkOwningTableProjection});
	log("Before:" + (referencedTable.owningSchema.tables->size()).toString());
	var schema : Schema := referencedTable.owningSchema;
	schema.tables+= collectionTable;
	//adds ordering column
	if(self.isOrdered)then{
		var orderingColumn : Column :=_column(getOrderingColumnName(), RDB::PrimitiveType::int);
		collectionTable.columns += orderingColumn;
		collectionTable.constraints+= _unique(getOrderingConstraintName(collectionTable.name), OrderedSet{orderingColumn, idColumn});
	}endif;
	//adding unique constraint
	if(self.isUnique)then{
		collectionTable.constraints+= _unique(self.getUniqueConstraintName(), OrderedSet{collectionPropertyColumn, idColumn});
	}endif;
	log("After:" + referencedTable.owningSchema.tables->size().toString());	
	return;
}

/**
	This mapping maps Property to Table referencing associated tables
**/
helper app::AssociationProperty::toAssociationTable(inout schema : RDB::Schema, inout errorLog : ErrorLog) {
	if((not self.isManyToManyBidirectional() and not self.isManyToManyUnidirectional()) or not self.isOwning) then {
		var errorMessage : String := "error attempt to map not owning associationProperty" + self.repr() + " to association table";
		errorLog.errors += _ormError(errorMessage, getOrmStructureTransformationId());
		return;
	}endif;
	//set of clases containing property owning association or it's TPC ancestor contains it 
	var mappedClassSet : OrderedSet(StandardClass) := self.owningGeneralClass.getMappedClassSet();
	mappedClassSet->forEach(associationOwningClass){
		//projection table of owningClass 
		var owningClassProjection : rdb::Table := schema.findTable(associationOwningClass.name.translate());
		var oppositeClassSet : OrderedSet(StandardClass) := self.type.getMappedClassSet();
		var ownerIdProjection : Column := owningClassProjection.getPKColumn();
		oppositeClassSet->forEach(oppositeClass){
			var oppositeClassProjection:rdb::Table := schema.findTable(oppositeClass.name.translate());
			var oppositeIdProjection : Column := oppositeClassProjection.getPKColumn();
			//create association table
			var associationTable : Table := _table(getAssociationTableName(self, associationOwningClass));
			//reference to owningClassProjection
			var owningAssociationColumn : Column := _column(ownerIdProjection.name, ownerIdProjection.type);		
			associationTable.columns += owningAssociationColumn;				
			var fkReferencingOwnerName : String := getFKAssociationTableRefOriginName(associationTable.name, associationOwningClass);
			var fkReferencingOwner : rdb::ForeignKey := _foreignKey(fkReferencingOwnerName, owningClassProjection, owningAssociationColumn);
			associationTable.constraints += fkReferencingOwner;
			//reference to oppositteClassProjection
			var oppositeAssociationColumn : Column := _column(oppositeIdProjection.name, oppositeIdProjection.type);
			associationTable.columns += oppositeAssociationColumn;
			var fkReferencingOppositeName : String := getFKAssociationTableRefOriginName(associationTable.name, oppositeClass);
			var fkReferencingOpposite : rdb::ForeignKey := _foreignKey(fkReferencingOppositeName, owningClassProjection, oppositeAssociationColumn);
			associationTable.constraints+= fkReferencingOpposite;
			// adding ordering column
			if(self.isOrdered or (self.oppositeProperty != null and self.oppositeProperty.isOrdered)) then{
				var orderingColumn : rdb::Column := _column(getOrderingColumnName(), RDB::PrimitiveType::int);
				associationTable.columns += orderingColumn;
				var uniqueOrder : rdb::Unique := _unique(getOrderingConstraintName(associationTable.name), OrderedSet{owningAssociationColumn, orderingColumn});
			}endif;
			// adding uniqueness to collection		
			if(self.isUnique or (self.oppositeProperty != null and self.oppositeProperty.isUnique))then{
				var uniqueConstraintName : String := self.getUniqueConstraintName();
				var uniqueConstraint :rdb::Unique := _unique(uniqueConstraintName, OrderedSet{owningAssociationColumn, oppositeAssociationColumn});
				associationTable.constraints += uniqueConstraint;
			}endif;
			schema.tables+=associationTable;		
		};
	};				
	return;
}

/**
	Mapping association property to addition column into owning table
**/
helper app::AssociationProperty::toAssociationColumn(inout schema : RDB::Schema, inout errorLog : ErrorLog){
	if((not self.isOneToOneBidirectional() and not self.isOneToOneUnidirectional() and not self.isOneToManyUnidirectional() and not self.isManyToManyBidirectional())
		or not self.isOwning)then{
			var errorMessage : String := ("Mapping associationProperty" + self.repr() + " to association column");
			errorLog.errors += _ormError(errorMessage, getOrmStructureTransformationId());
			return;
	}endif;
	var mappedClassSet : OrderedSet(StandardClass) := self.owningGeneralClass.getMappedClassSet();
	mappedClassSet->forEach(associationOwningClass){
		//projection table of owningClass 
		var owningClassProjection : rdb::Table := schema.findTable(associationOwningClass.name.translate());
		var oppositeClassSet : OrderedSet(StandardClass) := self.type.getMappedClassSet();
		oppositeClassSet->forEach(oppositeClass){
			var oppositeProjection : Table := schema.findTable(oppositeClass.name.translate()); 
			var oppositeIdColumn : Column := oppositeProjection.getPKColumn();
			var oppositeReferencingColumn : Column := _column(oppositeIdColumn.name, oppositeIdColumn.type);
			owningClassProjection.columns += oppositeReferencingColumn;
			var fkReferencingOpposite : ForeignKey := _foreignKey(self.getFkRefencingOppositeName(associationOwningClass, oppositeClass), oppositeProjection, oppositeIdColumn);
			owningClassProjection.constraints += fkReferencingOpposite;
		};
	};	
}

/**
	Connecting joined hierarchy tables
**/
helper app::StandardClass::addReferenceToParent(inout schema : Schema, inout errorLog : ErrorLog){
	if(not self.hasJoinedInheritanceType() or self.isRoot())then{
		var errorMessage : String := ("Implementation error - adding reference to parent of class " + self.repr());
		errorLog.errors += _ormError(errorMessage, getOrmStructureTransformationId());
		return;		
	}endif;
	var childProjection : Table := schema.findTable(self.name.translate());
	var parentProjection : Table := schema.findTable(self.parent.getDbRepresentative().name.translate());
	var childId : Column := childProjection.getPKColumn();
	log("child id " + childId.repr());
	var fkReferencingParent : ForeignKey := _foreignKey(self.getParentFkName(), parentProjection, childId);
	childProjection.constraints+= fkReferencingParent;
	return;
}