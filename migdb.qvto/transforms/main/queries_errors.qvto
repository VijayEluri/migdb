library queries_errors;
import builder_errors;


modeltype ERR uses 'http://www.collectionspro.eu/jam/mm/errors';

query ErrorLog::print(){
	 self.errors->forEach(err){
		 	log(err.repr());
		 };
}

helper addValidationError(inout errorLog : ErrorLog, message : String, transformationId : String){
	if(errorLog.errors <> null and errorLog.errors[ValidationError]->
			forAll(err | err.message <> message or err.transformationId <> transformationId))then{
		errorLog.errors += _validationError(message, transformationId);
	}endif;
}

helper addOrmError(inout errorLog : ErrorLog, message : String, transformationId : String){
	if(errorLog.errors <> null and errorLog.errors[OrmError]->
			forAll(err | err.message <> message or err.transformationId <> transformationId))then{
		errorLog.errors += _ormError(message, transformationId);
	}endif;
}

helper addEvolutionError(inout errorLog : ErrorLog, message : String, transformationId : String, operationIndex : Integer){
	if(errorLog.errors <> null and errorLog.errors[EvolutionError]->
			forAll(err | err.message <> message or err.transformationId <> transformationId or
			err.operationIndex <> operationIndex))then{
		errorLog.errors += _evolutionError(operationIndex, message, transformationId);
	}endif;
}

query Error::equals(error : Error) : Boolean{
	return self.message = error.message and self.transformationId = error.transformationId;
}

