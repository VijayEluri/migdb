@namespace(uri="http://www.collectionspro.eu/jam/mm", prefix="mm")
package mm;

@namespace(uri="http://www.collectionspro.eu/jam/mm/app", prefix="app")
package app {
  abstract class ModelRoot {
  }

  class Structure extends ModelRoot {
    !ordered val ModelEntity[*]#owningModel entities;
  }

  class Operations extends ModelRoot {
    val ops.ModelOperation[*]#owningOperations operations;
  }

  class ModelEntity {
    readonly derived ref Structure[1]#entities owningModel;
    attr String[1] name;
  }

  class GeneralClass extends ModelEntity {
  }

  class PrimitiveClass extends ModelEntity {
    attr PrimitiveType[1] primitiveType;
  }

  class EmbeddedClass extends GeneralClass {
    val EmbeddedProperty[+]#owningEmbeddedClass embeddedProperties;
    ref EmbeddedProperty[1] idProperty;
  }

  class StandardClass extends GeneralClass {
    ref StandardClass parent;
    attr boolean isAbstract = false;
    attr InheritanceType[1] inheritanceType;
    !ordered val MultipliableProperty[*]#owningGeneralClass properties;
    !unique !ordered !resolve ref PrimitiveProperty idProperty;
  }

  enum InheritanceType {
    joined = 0;
    tablePerClass = 1;
    singleTable = 2;
  }

  enum ToleranceType {
    strict = 0;
    force = 1;
    tolerant = 2;
  }

  enum PrimitiveType {
    boolean = 0;
    char = 1;
    int = 2;
  }

  class AssociationProperty extends MultipliableProperty {
    ref AssociationProperty oppositeProperty;
    ref StandardClass[1] type;
    attr boolean[1] isOwning = true;
  }

  abstract class MultipliableProperty extends Property {
    readonly derived ref StandardClass[1]#properties owningGeneralClass;
    attr int upperBound = 1;
    attr int lowerBound = 0;
    attr boolean isOrdered = false;
    attr boolean isUnique = false;
  }

  class PrimitiveProperty extends MultipliableProperty {
    ref PrimitiveClass[1] type;
    attr String defaultValue;
  }

  abstract class Property {
    attr String[1] name;
  }

  class NestedProperty extends MultipliableProperty {
    ref EmbeddedClass[1] type;
  }

  class EmbeddedProperty extends Property {
    ref PrimitiveClass[1] type;
    derived ref EmbeddedClass#embeddedProperties owningEmbeddedClass;
    attr boolean[1] isMandatory;
  }

  @namespace(uri="http://www.collectionspro.eu/jam/mm/app-ops", prefix="app-ops")
  package ops {
    abstract class ModelOperation {
      readonly derived ref Operations[1]#operations owningOperations;
    }

    abstract class DecomposableOperation extends ModelOperation {
    }

    abstract class AtomicOperation extends ModelOperation {
    }

    class AddPrimitiveClass extends AtomicOperation {
      attr String[1] name;
      attr PrimitiveType[1] primitiveType;
    }

    class AddEmbeddedClass extends AtomicOperation {
      attr String[1] name;
    }

    class AddStandardClass extends AtomicOperation {
      attr String[1] name;
      attr boolean isAbstract;
      attr InheritanceType[1] inheritanceType;
    }

    class RenameEntity extends AtomicOperation {
      attr String[1] name;
      attr String[1] newName;
    }

    class SetAbstract extends AtomicOperation {
      attr String[1] name;
      attr boolean[1] isAbstract;
    }

    class RemoveEntity extends AtomicOperation {
      attr String[1] name;
    }

    class AddProperty extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] type;
      attr String defaultValue;
      attr int lowerBound;
      attr int upperBound = 1;
      attr boolean isOrdered;
      attr boolean isUnique;
    }

    class RenameProperty extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] newName;
    }

    class RemoveProperty extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
    }

    class SetType extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] type;
    }

    class SetOpposite extends AtomicOperation {
      attr String[1] firstClassName;
      attr String[1] firstPropertyName;
      attr String[1] secondClassName;
      attr String[1] secondPropertyName;
      attr boolean[1] isOpposite;
    }

    class SetBounds extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr int[1] lowerBound;
      attr int[1] upperBound;
    }

    class SetOrdered extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr boolean[1] isOrdered;
    }

    class SetUnique extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr boolean[1] isUnique;
    }

    class CopyProperty extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] targetClassName;
      attr ToleranceType[1] tolerance;
    }

    class MoveProperty extends AtomicOperation {
      attr String[1] owningClassName;
      attr String[1] name;
      attr String[1] targetClassName;
      attr ToleranceType[1] tolerance;
    }

    class ExtractClass extends DecomposableOperation {
      attr String[1] sourceClassName;
      attr String[+] extractPropertiesNames;
      attr String[1] extractClassName;
    }

    class ExtractParent extends DecomposableOperation {
      attr String[+] sourceClassesName;
      attr String[+] extractPropertiesName;
      attr String[1] extractParentName;
    }

    class AddParent extends AtomicOperation {
      attr String[1] className;
      attr String[1] parentClassName;
    }

    class RemoveParent extends AtomicOperation {
      attr String[1] className;
    }
    
    class ZipperHierarchy extends DecomposableOperation {
      attr String[1] className;
    }    

  }

}

