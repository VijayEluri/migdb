/*
 * The MIT License
 * 
 * Copyright (c) 2010-2012 MigDB team [https://github.com/migdb/migdb/wiki]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
library queries_app;


modeltype APP uses 'http://www.collectionspro.eu/jam/mm/app';

abstract query app::Property::isID() : Boolean;

abstract query app::MultipliableProperty::isID() : Boolean;

query app::AssociationProperty::isID():Boolean{
	return false;
}

query app::EmbeddedProperty::isID():Boolean{
	return self.owningEmbeddedClass.idProperty = self;
}

query app::PrimitiveProperty::isID() : Boolean{
	return self.owningGeneralClass.parent = null and self.owningGeneralClass.getId() = self;
}

query APP::NestedProperty::isID() : Boolean{
	return false;	
}

/**
	Must has owningClass as a parameter - member method cannot change member fields.
**/
helper removeProperty(inout owningClass : GeneralClass, removedPropertyName : String){
	if(owningClass.oclIsTypeOf(StandardClass))then {
		removeProperty(owningClass.oclAsType(StandardClass), removedPropertyName);
	}else {
		if(owningClass.oclIsTypeOf(EmbeddedClass))then {
			removeProperty(owningClass.oclAsType(EmbeddedClass), removedPropertyName);
		}else {
			log("Removing from not StandardClass neither EmbeddedClass not allowed");
			assert(false);
		}endif;
	} endif;
}

helper removeProperty(inout owningClass : EmbeddedClass ,removedPropertyName : String){
	owningClass.embeddedProperties := owningClass.embeddedProperties->
		reject(pr | pr.name = removedPropertyName);
	return;
}

helper removeProperty(inout owningClass : StandardClass, removedPropertyName : String){
	owningClass.properties := owningClass.properties->reject(pr | pr.name = removedPropertyName);
	return;
}

/**	Checks if this class has default inheritanceType **/
query app::StandardClass::hasImplicitInheritanceType():Boolean{
	return self.hasInheritanceType(app::InheritanceType::joined);	
} 

/**	Checks if this class has singleTable inheritanceType **/
query app::StandardClass::hasSingleTableInheritanceType():Boolean{
	return self.hasInheritanceType(app::InheritanceType::singleTable);	
}

/**	Checks if this class has inheritanceType tablePerClass **/
query app::StandardClass::hasTablePerClassInheritanceType():Boolean{
	return self.hasInheritanceType(app::InheritanceType::tablePerClass);	
}

/**	Checks if this class has joined inheritanceType **/
query app::StandardClass::hasJoinedInheritanceType():Boolean{
	return self.hasInheritanceType(app::InheritanceType::joined);	
}

/**	Compares actual inheritanceType of class with chosenType **/
query app::StandardClass::hasInheritanceType( chosenType:app::InheritanceType):Boolean{
	return self.inheritanceType = chosenType;
}

/**	Returns root of the class hierarchy. **/
query app::StandardClass::getRootClass():app::StandardClass{
	var path : OrderedSet(app::StandardClass) := self.getPathToRoot();
	if(path->size() = 0 ) then{
		log("Class is in cycle. Root doesn't exist");
		return null;
	}endif;
	return path->last();	
}

/** Returns true for PrimitiveProperty and false otherwise **/
query app::MultipliableProperty::isPrimitive():Boolean{
	return self.oclIsTypeOf(PrimitiveProperty);
}

/**
	Returns path to root class or to strong component (including classes in Strong component).
**/
query app::StandardClass::getPathToRoot():OrderedSet(app::StandardClass){
	var emptyOrderedSet : OrderedSet(app::StandardClass) := OrderedSet{};
	return self.getPath(emptyOrderedSet);		
}

/** 
	Recursive helper for getPathToRoot method - hides collection parameter. Returns path to root 
	class or to strong component (including classes in Strong component). 
**/
query app::StandardClass::getPath(collection : OrderedSet(app::StandardClass)
		):OrderedSet(app::StandardClass){
	//return path + strong component
	if(collection->includes(self))then{
		return collection
	}endif;
	// return path
	if(self.parent = null)then{
		return collection->append(self);
	}endif;
	//continue recursively
	return self.parent.getPath(collection->append(self));
}

/**
	Overuje, jestli dana Property reprezentuje bidirectional (oboustranne navigabilni) vazbu 1-1
**/
query app::MultipliableProperty::isOneToOneBidirectional():Boolean{
	return self.oclIsKindOf(AssociationProperty) and self.upperBound = 1 and 
	self.oclAsType(AssociationProperty).oppositeProperty.oppositeProperty = self and
	self.oclAsType(AssociationProperty).oppositeProperty.upperBound = 1;
}

/**
	Overuje, jestli dana Property reprezentuje unidirectional (jednostranne navigabilni) vazbu 1-M
**/	
query app::MultipliableProperty::isOneToManyUnidirectional():Boolean{
	if(not self.oclIsKindOf(AssociationProperty)) then{
		return false;
	}endif;
	var associationProperty : AssociationProperty := self.oclAsType(AssociationProperty);
	
	return associationProperty.upperBound = 1 and associationProperty.oppositeProperty = null and 
	not associationProperty.owningGeneralClass.isNonleafTPCClass() and
	not associationProperty.type.oclAsType(app::StandardClass).isNonleafTPCClass();
}

/**
	Overuje, jestli dana Property reprezentuje bidirectional (oboustranne navigabilni) vazbu 1-M
**/
query app::MultipliableProperty::isOneToManyBidirectional():Boolean{	
	if(not self.oclIsKindOf(AssociationProperty)) then{
		return false;
	}endif;
	var associationProperty : AssociationProperty := self.oclAsType(AssociationProperty);
	
	return self.upperBound = -1 and	associationProperty.oppositeProperty.oppositeProperty = self 
		and associationProperty.oppositeProperty.upperBound = 1 and 
		not associationProperty.owningGeneralClass.isNonleafTPCClass() and 
		not associationProperty.type.oclAsType(app::StandardClass).isNonleafTPCClass();
}

/**
	Overuje, jestli dana Property reprezentuje unidirectional (jednostranne navigabilni) vazbu M-N
**/	
query app::MultipliableProperty::isManyToManyUnidirectional():Boolean{
	if(not self.oclIsKindOf(AssociationProperty)) then{
		return false;
	}endif;
	var associationProperty : AssociationProperty := self.oclAsType(AssociationProperty);

	return associationProperty.upperBound = -1 and associationProperty.oppositeProperty = null and 
	not associationProperty.owningGeneralClass.isNonleafTPCClass() and not 
	associationProperty.type.oclAsType(app::StandardClass).isNonleafTPCClass();
}

/**
	Overuje, jestli dana Property reprezentuje bidirectional (oboustranne navigabilni) vazbu M-N
**/
query app::MultipliableProperty::isManyToManyBidirectional():Boolean{
	if(not self.oclIsKindOf(AssociationProperty)) then{
		return false;
	}endif;
	var associationProperty : AssociationProperty := self.oclAsType(AssociationProperty);
	
	return associationProperty.upperBound = -1 and associationProperty.oppositeProperty.
		oppositeProperty = self and associationProperty.oppositeProperty.upperBound = -1 and
		not self.owningGeneralClass.isNonleafTPCClass() and 
		not associationProperty.type.oclAsType(app::StandardClass).isNonleafTPCClass();
}

/**
	Toto query vraci true, pokud ma trida inheritanceType TablePerClass  a ma potomka, jinak false. 
	Je pouzivane k odstraneni slozitych mapovani vazeb mezi nelistovymi Classy s inheritanceType
	TablePerClass.
**/
query app::GeneralClass::isNonleafTPCClass():Boolean{
		if(self.oclIsTypeOf(StandardClass) and 
				self.oclAsType(StandardClass).inheritanceType = app::InheritanceType::tablePerClass 
				and self.owningModel.entities[app::StandardClass]->exists(cls | cls.parent = self)
		)then{
			return true;
		}endif;
	return false;
}

/** 
	This query checks whether self Class is contained in cycle - not CYCLED hierarchy. In first call
	 it should has self as actualClass parameter. 
**/
query app::StandardClass::isContainedInCycle(inout visitedClasses : Set(app::StandardClass), 
		in actualClass : StandardClass) :Boolean{
	//if it iterated to self and actualClass is already visited (preventing starting call)
	if(actualClass = self and visitedClasses->includes(actualClass)) then {
		return true;
	} endif;

	//stop when comes to root or class already visited
	if(actualClass.parent = null or visitedClasses->includes(actualClass)) then {
		return false;
	}endif;

	return self.isContainedInCycle(visitedClasses->including(actualClass), actualClass.parent);
}


/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */
query getAppDefaultIdTypeName():String{
	return "Integer";
}

query APP::Structure::findDefaultIdType() : PrimitiveClass{
	return self.findPrimitiveClass(getAppDefaultIdTypeName());
}

query APP::Structure::containsEntity(eName : String) : Boolean {
	return self.entities->exists(name = eName);
}

query APP::Structure::containsPrimitiveClass(className : String) : Boolean {
	return self.containsEntity(className);
}

query APP::Structure::containsGeneralClass(className : String) : Boolean {
	return self.containsEntity(className);
}

query APP::Structure::containsStandardClass(className : String) : Boolean {
	return self.containsEntity(className);
}


query APP::Structure::findEntity(eName : String) : APP::ModelEntity {
	return self.entities![name = eName];
}

query APP::Structure::findStandardClass(className : String) : APP::StandardClass {
	return self.findEntity(className).oclAsType(APP::StandardClass);
}

query APP::Structure::findPrimitiveClass(className : String) : APP::PrimitiveClass {
	return self.findEntity(className).oclAsType(APP::PrimitiveClass);
}

query APP::Structure::findGeneralClass(className : String) : APP::GeneralClass {
	return self.findEntity(className).oclAsType(APP::GeneralClass);
}

query APP::Structure::isPropertyInGeneralClass(className : String, propertyName : String
		) : Boolean {
	return self.findGeneralClass(className).containsProperty(propertyName);
}

query APP::Structure::isPropertyInClass(className : String, propertyName : String) : Boolean {
	return self.findClass(className).containsProperty(propertyName);
}

abstract query GeneralClass::containsProperty(propertyName : String) : Boolean;

query StandardClass::containsProperty(propertyName : String) : Boolean{
	return self.properties->exists(name = propertyName);
} 

query EmbeddedClass::containsProperty(propertyName : String) : Boolean{
	return self.embeddedProperties->exists(name = propertyName);
}

abstract query GeneralClass::containsProperty(primitiveType : PrimitiveClass) : Boolean;

query StandardClass::containsPropertyOfType(_primitiveType : PrimitiveClass) : Boolean{
	return self.properties[PrimitiveProperty]->exists(prop | prop.type = _primitiveType);
}

query EmbeddedClass::containsPropertyOfType(_primitiveType : PrimitiveClass) : Boolean{
	return self.embeddedProperties->exists(prop | prop.type = _primitiveType);
}

query StandardClass::containsPropertyOfType(_type : EmbeddedClass) : Boolean{
	return self.properties[NestedProperty]->exists(prop | prop.type = _type );
}

query StandardClass::containsPropertyOfType(_standardClasstype : StandardClass) : Boolean{
	return self->properties[AssociationProperty]->exists(prop | prop.type);	
}

query APP::Structure::arePropertiesInClass(className : String, propertyNames : OrderedSet(String)
		) : Boolean {
	var generalClass : GeneralClass := self.findGeneralClass(className);
	return propertyNames->forAll(name | generalClass.containsProperty(name));
}

query APP::Structure::findProperty(className : String, propertyName : String) : APP::Property {
	return self.findGeneralClass(className).getProperty(propertyName);
}

abstract query GeneralClass::getProperty(propertyName : String) : APP:: Property;

query StandardClass::getProperty(propertyName : String) : APP:: Property{
	return self.properties![name = propertyName];
}

query EmbeddedClass::getProperty(propertyName : String) : APP:: Property{
	return self.embeddedProperties![name = propertyName];
}

query APP::Structure::containsClass(className : String) : Boolean {
	return self.findEntity(className).oclIsTypeOf(APP::StandardClass);
}

query APP::Structure::findClass(className : String) : APP::StandardClass {
	return self.findEntity(className).oclAsType(APP::StandardClass);
}

query areBoundsValid(lowerBound : Integer, upperBound : Integer) : Boolean {
	return (lowerBound > -1 and (upperBound = -1 or (upperBound > 0 and upperBound >= lowerBound)));
}

//checks if self class is descendantOf class precedessorName
query APP::Structure::isDescendantOf(className : String, precedessorName : String ) : Boolean {
	var cls : StandardClass := self.findStandardClass(className);
	return cls.isDescendantOf(precedessorName);
}
 
query APP::StandardClass::isDescendantOf(precedessorName : String): Boolean {
	return self.getPathToRoot()->exists(c | c.name = precedessorName);
}

query APP::Structure::areClassesRelatives(className : String , secondClassName : String ) : Boolean{
	return  self.isDescendantOf(className, secondClassName) or self.isDescendantOf(
		secondClassName, className);
}

/**
	Vrati vsechny potomky dane tridy v topologickem usporadani - tj predek nesmi byt v listu 
	pozdeji nez jeho potomek
**/
query APP::Structure::getClassDescendants(className : String) : OrderedSet(StandardClass){
	var _clas := self.findStandardClass(className);
	return _clas.getAllDescendants();
}

/**
	Vrati potomky dane tridy v topologickem usporadani - Nyni implementovano pomoci DFS. 
	Nema deterministicke chovani. Opetovne spusteni muze vratit jine, ale platne usporadani    
**/
query APP::StandardClass::getAllDescendants() : OrderedSet(StandardClass){
	return self.getDescendants(OrderedSet{}, OrderedSet{InheritanceType::joined,
		InheritanceType::tablePerClass, InheritanceType::singleTable});
}

query APP::StandardClass::getDescendantsOfType(_inheritanceType : InheritanceType
		) : OrderedSet(StandardClass){
	return self.getDescendants(OrderedSet{}, OrderedSet{_inheritanceType});
}

/** 
	NOTE: This query should not be called directly - see 
	APP::StandardClass::getDescendantsOfType(_inheritanceType : InheritanceType)
	returns descendants of chosen inheritanceTypes
**/
query APP::StandardClass::getDescendants(_descendantsList : OrderedSet(StandardClass), 
		_inheritanceTypes: OrderedSet(InheritanceType)) : OrderedSet(StandardClass){
	var set : OrderedSet(StandardClass) := _descendantsList;
	if(_inheritanceTypes->includes(self.inheritanceType))then{
		set +=self;
	}endif;
	self.owningModel.entities[StandardClass]->select(cls | cls.parent = self)->forEach(_class){
		//processing branch of search tree
		set := _class.getDescendants(set, _inheritanceTypes);
	};
	return set;
}

query PrimitiveProperty::getPrimitiveType(): APP::PrimitiveType{
	return self.type.primitiveType;
}

query EmbeddedProperty::getPrimitiveType(): APP::PrimitiveType{
	return self.type.primitiveType;
}

/**+++++++++++++++++++++ Validator Queries +++++++++++++++++++++**/
/* Returns true if Property represents unidirectional 1:1 association */
query app::MultipliableProperty::isOneToOneUnidirectional():Boolean{
	return false;
}

/** Returns true if class has idProperty, false otherwise **/
query StandardClass::hasId():Boolean{
	return self.idProperty <> null;
}

query app::Structure::containsNonleafTPCAssociation():Boolean{
	return self.entities[app::StandardClass]->properties->exists( prop | not prop.isPrimitive() and 
		prop.owningGeneralClass.isNonleafTPCClass() and 
			(prop.isOneToOneUnidirectional() or 
				prop.isOneToOneBidirectional() or prop.isOneToManyUnidirectional() or 
				prop.isOneToManyBidirectional() or prop.isManyToManyUnidirectional() or 
				prop.isManyToManyBidirectional()
			)
		);
}

query app::StandardClass::areIDTypesCorrectlySet() : Boolean{
    return self.parent <> null or self.getId().type.name = getAppDefaultIdTypeName();
}

query app::StandardClass::areIDBoundsCorrectlySet() : Boolean{
    return self.parent <> null or 
    (self.getId().lowerBound = 1 and self.getId().upperBound = 1);
}

query app::AssociationProperty::isOppositeCorrectlySet():Boolean{
	return self.oppositeProperty = null or (self.oppositeProperty.oppositeProperty = self and 
		self.type=self.oppositeProperty.owningGeneralClass and 
		self.owningGeneralClass = self.oppositeProperty.type);
}

query app::ModelEntity::hasUniqueName():Boolean{
	return self.owningModel->entities->forAll(ent | ent.name <> self.name or ent = self);
}


query app::MultipliableProperty::hasUniqueNameInHierarchy():Boolean{
    if(not self.owningGeneralClass.oclIsTypeOf(StandardClass))then{
    	log("This method can be called only on Property owned by StandardClass");
    	assert(false);
    }endif;
    self.owningGeneralClass[StandardClass].getPathToRoot()->properties->
    	forEach(prop | prop.name = self.name and prop <> self){
			return false;
		};
	return true;	
}

query StandardClass::getId():PrimitiveProperty{ 
	if(self.isRoot())then{
		return self.idProperty;
	}endif;
	if(self.idProperty = null)then{
		log("Invalid getId call - no root, no ID: " + self.repr());
		assert(false);
	}endif;
	return self.parent.getId();
}

/** Returns class representative - e.g. origin class of table where are stored instances of this 
 *  cls. 
 */
query StandardClass::getDbRepresentative(): StandardClass{
	var representant : StandardClass := self;
	while(representant.parent <> null and representant.hasSingleTableInheritanceType()){
		representant := representant.parent;
	};
	return self;
}

query app::StandardClass::isRoot():Boolean{
	return self.parent = null;
}

/**+++++++++++++++++++++ Printing on standard output +++++++++++++++++++++**/
query app::Structure::print(){
	self->entities->forEach(ent){
		log(ent.repr());
	}
}

query app::Operations::print(){
	self->operations->forEach(op){
		log(op.repr());
	}
}