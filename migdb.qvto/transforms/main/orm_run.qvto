import orm;
import queries_app;
import queries_rdb;
import validator_app;
	
modeltype APP uses "http://www.collectionspro.eu/jam/mm/app";
modeltype RDB uses "http://www.collectionspro.eu/jam/mm/rdb";
modeltype ERR uses "http://www.collectionspro.eu/jam/mm/errors";

transformation orm_run(in inStr : APP, in inOps : APP, out rdbOutOps : RDB, out errorModel : ERR);

main(){	
	var rdbOps : RDB::Operations := rdbOutOps.rootObjects()![RDB::Operations];
	rdbOps := _rdbOperations();
	var errorLog : ErrorLog := errorModel.rootObjects()![ErrorLog];
	errorLog := object ErrorLog{ errors:= OrderedSet{};};

	
	var appOps :APP::Operations := inOps.rootObjects()![APP::Operations];
	var appStr :APP::Structure := inStr.rootObjects()![APP::Structure];
	
	if(canProcessTest(appStr, appOps, errorLog))then{
		appOps.operations->forEach(op){
			op.toRdb(appStr, rdbOps);
		};
		consolidate(rdbOps);
		setApplied(rdbOps);
	}endif;
	log("ending");
}

query canProcessTest(structure : APP::Structure, ops : APP::Operations, inout errorLog : ErrorLog) : Boolean{
	if(inOps.rootObjects()![APP::Operations].operations->size() > 1 or 
			inOps.rootObjects()![APP::Operations].operations->isEmpty())then{
		log("Unsupported input operations count:" + 
			inOps.rootObjects()![APP::Operations].operations->size().repr());
		log("model invalid 1");
		return false;
	}endif;

	if(not inStr.rootObjects()![APP::Structure].isModelValid(errorLog))then{
		log("model invalid 2");
		return false;
	}endif;
	return true;	
}

