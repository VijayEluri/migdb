/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
library queries_rdb;

modeltype RDB uses 'http://www.collectionspro.eu/jam/mm/rdb';


/********************************************************************************
 *									PRINTERS									*
 ********************************************************************************/
query Operations::print(){
	self.operations->forEach(op){
		log(op.repr());
	}
}

query Structure::print(){
	self.schemas->forEach(schema){
		log("schema: " + schema.name);
		schema.tables->forEach(table){
			log(table.repr());
		}
	}	
}

/********************************************************************************
 *									QUERIES										*
 ********************************************************************************/


/********************************** SCHEMA **************************************/

query getDefaultSchemaName() : String{
	return "public";
}

query RDB::Structure::containsSchema(schemaName : String) : Boolean {
	return self.schemas->exists(name = schemaName);
}

query RDB::Structure::findSchema(schemaName : String) : RDB::Schema {
	return self.schemas->any(name = schemaName);
}

query RDB::Schema::containsTable(tableName : String) : Boolean{
	return self.tables->exists(name = tableName);
}

query RDB::Schema::findTable(tableName : String) : RDB::Table{
	return self.tables->any(name = tableName);
}


/********************************** SEQUENCE ************************************/
query RDB::Structure::containsSequenceInSchema(schemaName : String, sequenceName : String
		) : Boolean {
	return self.findSchema(schemaName).sequence != null;
}


/************************************ INDEX *************************************/
query RDB::Structure::containsIndexInSchema(schemaName : String, indexName : String) : Boolean {
	return self.findSchema(schemaName).indexes->exists(name = indexName);
}

query RDB::Structure::findIndex(schemaName : String, indexName : String) : RDB::Index {
	return self.findSchema(schemaName).indexes->any(name = indexName);
}

/*********************************** TABLE *************************************/
query RDB::Structure::containsTableInSchema(schemaName : String, tableName : String) : Boolean {
	return self.findSchema(schemaName).containsTable(tableName);
}

query RDB::Structure::containsTablesInSchema(schemaName : String, tableNames : OrderedSet(String)
		) : Boolean {
	var schema : Schema := self.findSchema(schemaName);
	return tableNames->forAll(name | schema.containsTable(name));
}

query RDB::Structure::findTable(schemaName : String, tableName : String) : RDB::Table {
	return self.findSchema(schemaName).findTable(tableName);
}

/*********************************** COLUMN ************************************/

query RDB::Structure::containsColumnInTable(schemaName : String, tableName : String, 
	constraintName : String) : Boolean {
    return self.findTable(schemaName, tableName).columns->exists(name = constraintName);
}

query RDB::Structure::findColumn(schemaName : String, tableName : String, cName : String) : RDB::Column {
	return self.findTable(schemaName, tableName).columns->any(name = cName);
}

query RDB::Structure::findColumns(schemaName : String, tableName : String, cNames : OrderedSet(String)) : OrderedSet(RDB::Column) {
	var columns : OrderedSet(RDB::Column);
	cNames->forEach(cName) {
		columns += self.findColumn(schemaName, tableName, cName);
	};
	return columns;
}


/********************************** CONSTRAINT **********************************/
query RDB::Structure::containsConstraint(owningSchema : String, owningTable : String, 
		constraintableName : String) : Boolean{
	return self.findTable(owningSchema, owningTable).constraints->exists(constraint |
	 	constraint.name = constraintableName);	
}

query RDB::Structure::hasConstraintUniqueName(constraintableName : String) : Boolean {
	return self.schemas->tables->constraints->select(const | 
		const.name = constraintableName)->size() = 1;
}

query RDB::Structure::findConstraint(schemaName : String, tableName : String, rName : String
		) : RDB::Constraint {
	return self.findTable(schemaName, tableName).constraints->any(name = rName);
}



/********************************* COLUMN TYPE *********************************/

query RDB::Structure::isSameColumnType (schemaName : String, tableNameA : String, 
		columnNameA : String, tableNameB : String, columnNameB : String) : Boolean {
	return self.findColumn(schemaName, tableNameA, columnNameA).type = self.
		findColumn(schemaName, tableNameB, columnNameB).type;
}

/**+++++++++++++++++++++ Validator queries +++++++++++++++++++++++**/

query rdb::Table::getPKColumn():rdb::Column{
	return self.constraints![rdb::PrimaryKey].constrainedColumn;
}

query RDB::Table::hasRedundantId() : Boolean{
	return self.constraints[PrimaryKey]->size() > 1;
};

query isValidIdentifier(identifier : String):Boolean{
	var valid : Boolean := true;
	if(not beginsWithChar(identifier))then{
//			log("Model invalid - identifier \"" + identifier + "\" not begins with lower char");
			valid := false;
		}endif;
		if(isKeyWord(identifier))then{
//			log("Model invalid - identifier \"" + identifier + "\" is Postgresql keyword");
			valid := false;
		}endif;
		if(not containsAllowedChars(identifier))then{
//			log("Model invalid - identifier \"" + identifier + "\" contains forbidden characters");		
			valid := false;
		}endif;
		return valid;
}

query beginsWithChar(identifier : String ) : Boolean{
	var firstChar: String  := identifier.substring(1,1);
	return isLatinCharacter(firstChar);
}

query containsAllowedChars(identifier : String):Boolean{
	var position:Integer := 1;
	var valid : Boolean := true;
	while(position < identifier.size()){
		var char:String := identifier.substring(position, position);
		if(not (isLatinCharacter(char) or char = "_" or isDigit(char)))then {
//			log("forbidden character \'" + char + "\'");
			valid := false;
		}endif;
		position := position + 1;
	};
	return valid;
}

query isLatinCharacter(char : String):Boolean{
	if(char = "a" or char = "b" or char = "c" or char = "d" or char = "e" or 
		char = "f" or char = "g" or char = "h" or char = "i" or char = "j" or
		 char = "k" or char = "l" or char = "m" or char = "n" or char = "o" or
		 char = "p" or char = "q" or char = "r" or char = "s" or char = "t" or
		  char = "u" or char = "v" or char = "w" or char = "x" or char = "y" or
		   char = "z")then{
		return true;
	}endif;
	return false;
}

query isDigit(char : String) : Boolean{
	if(char = "0" or char = "1" or char = "2" or char = "3" or char = "4" or 
		char = "5" or char = "6" or char = "7" or char = "8" or char = "9")then{
		return true;
	}endif;
	return false;
}

query rdb::Schema::hasUniqueName() : Boolean{
    var schemas : OrderedSet(Schema) := self.owningStructure->schemas->asOrderedSet();
	return schemas->forAll(schema | schema.name <> self.name or schema = self); 
}

query rdb::Table::hasUniqueName() : Boolean{
	return self.owningSchema->tables->forAll(table | table.name <> self.name or table = self);
}

query rdb::Column::hasUniqueName() : Boolean{
	return self.owningTable->columns->forAll(column | column.name <> self.name or column = self);
}

query rdb::Constraint::hasUniqueName() : Boolean{
	return self.owningTable->owningSchema->tables->constraints->forAll(const | 
		const.name <> self.name or const = self);
}

query isKeyWord(name: String ):Boolean{
	var keyList:List(String) = List {"ABORT",
"ABSOLUTE",
"ACCESS",
"ACTION",
"ADD",
"ADMIN",
"AFTER",
"AGGREGATE",
"ALL",
"ALSO",
"ALTER",
"ALWAYS",
"ANALYSE",
"ANALYZE",
"AND",
"ANY",
"ARRAY",
"AS",
"ASC",
"ASSERTION",
"ASSIGNMENT",
"ASYMMETRIC",
"AT",
"AUTHORIZATION",
"BACKWARD",
"BEFORE",
"BEGIN",
"BETWEEN",
"BIGINT",
"BINARY",
"BIT",
"BOOLEAN",
"BOTH",
"BY",
"CACHE",
"CALLED",
"CASCADE",
"CASCADED",
"CASE",
"CAST",
"CATALOG",
"CHAIN",
"CHAR",
"CHARACTER",
"CHARACTERISTICS",
"CHECK",
"CHECKPOINT",
"CLASS",
"CLOSE",
"CLUSTER",
"COALESCE",
"COLLATE",
"COLUMN",
"COMMENT",
"COMMENTS",
"COMMIT",
"COMMITTED",
"CONCURRENTLY",
"CONFIGURATION",
"CONNECTION",
"CONSTRAINT",
"CONSTRAINTS",
"CONTENT",
"CONTINUE",
"CONVERSION",
"COPY",
"COST",
"CREATE",
"CREATEDB",
"CREATEROLE",
"CREATEUSER",
"CROSS",
"CSV",
"CURRENT",
"CURRENT_CATALOG",
"CURRENT_DATE",
"CURRENT_ROLE",
"CURRENT_SCHEMA",
"CURRENT_TIME",
"CURRENT_TIMESTAMP",
"CURRENT_USER",
"CURSOR",
"CYCLE",
"DATA",
"DATABASE",
"DAY",
"DEALLOCATE",
"DEC",
"DECIMAL",
"DECLARE",
"DEFAULT",
"DEFAULTS",
"DEFERRABLE",
"DEFERRED",
"DEFINER",
"DELETE",
"DELIMITER",
"DELIMITERS",
"DESC",
"DICTIONARY",
"DISABLE",
"DISCARD",
"DISTINCT",
"DO",
"DOCUMENT",
"DOMAIN",
"DOUBLE",
"DROP",
"EACH",
"ELSE",
"ENABLE",
"ENCODING",
"ENCRYPTED",
"END",
"ENUM",
"ESCAPE",
"EXCEPT",
"EXCLUDE",
"EXCLUDING",
"EXCLUSIVE",
"EXECUTE",
"EXISTS",
"EXPLAIN",
"EXTERNAL",
"EXTRACT",
"FALSE",
"FAMILY",
"FETCH",
"FIRST",
"FLOAT",
"FOLLOWING",
"FOR",
"FORCE",
"FOREIGN",
"FORWARD",
"FREEZE",
"FROM",
"FULL",
"FUNCTION",
"FUNCTIONS",
"GLOBAL",
"GRANT",
"GRANTED",
"GREATEST",
"GROUP",
"HANDLER",
"HAVING",
"HEADER",
"HOLD",
"HOUR",
"IDENTITY",
"IF",
"ILIKE",
"IMMEDIATE",
"IMMUTABLE",
"IMPLICIT",
"IN",
"INCLUDING",
"INCREMENT",
"INDEX",
"INDEXES",
"INHERIT",
"INHERITS",
"INITIALLY",
"INLINE",
"INNER",
"INOUT",
"INPUT",
"INSENSITIVE",
"INSERT",
"INSTEAD",
"INT",
"INTEGER",
"INTERSECT",
"INTERVAL",
"INTO",
"INVOKER",
"IS",
"ISNULL",
"ISOLATION",
"JOIN",
"KEY",
"LANGUAGE",
"LARGE",
"LAST",
"LC_COLLATE",
"LC_CTYPE",
"LEADING",
"LEAST",
"LEFT",
"LEVEL",
"LIKE",
"LIMIT",
"LISTEN",
"LOAD",
"LOCAL",
"LOCALTIME",
"LOCALTIMESTAMP",
"LOCATION",
"LOCK",
"LOGIN",
"MAPPING",
"MATCH",
"MAXVALUE",
"MINUTE",
"MINVALUE",
"MODE",
"MONTH",
"MOVE",
"NAME",
"NAMES",
"NATIONAL",
"NATURAL",
"NCHAR",
"NEXT",
"NO",
"NOCREATEDB",
"NOCREATEROLE",
"NOCREATEUSER",
"NOINHERIT",
"NOLOGIN",
"NONE",
"NOSUPERUSER",
"NOT",
"NOTHING",
"NOTIFY",
"NOTNULL",
"NOWAIT",
"NULL",
"NULLIF",
"NULLS",
"NUMERIC",
"OBJECT",
"OF",
"OFF",
"OFFSET",
"OIDS",
"ON",
"ONLY",
"OPERATOR",
"OPTION",
"OPTIONS",
"OR",
"ORDER",
"OUT",
"OUTER",
"OVER",
"OVERLAPS",
"OVERLAY",
"OWNED",
"OWNER",
"PARSER",
"PARTIAL",
"PARTITION",
"PASSWORD",
"PLACING",
"PLANS",
"POSITION",
"PRECEDING",
"PRECISION",
"PREPARE",
"PREPARED",
"PRESERVE",
"PRIMARY",
"PRIOR",
"PRIVILEGES",
"PROCEDURAL",
"PROCEDURE",
"QUOTE",
"RANGE",
"READ",
"REAL",
"REASSIGN",
"RECHECK",
"RECURSIVE",
"REFERENCES",
"REINDEX",
"RELATIVE",
"RELEASE",
"RENAME",
"REPEATABLE",
"REPLACE",
"REPLICA",
"RESET",
"RESTART",
"RESTRICT",
"RETURNING",
"RETURNS",
"REVOKE",
"RIGHT",
"ROLE",
"ROLLBACK",
"ROW",
"ROWS",
"RULE",
"SAVEPOINT",
"SCHEMA",
"SCROLL",
"SEARCH",
"SECOND",
"SECURITY",
"SELECT",
"SEQUENCE",
"SEQUENCES",
"SERIALIZABLE",
"SERVER",
"SESSION",
"SESSION_USER",
"SET",
"SETOF",
"SHARE",
"SHOW",
"SIMILAR",
"SIMPLE",
"SMALLINT",
"SOME",
"STABLE",
"STANDALONE",
"START",
"STATEMENT",
"STATISTICS",
"STDIN",
"STDOUT",
"STORAGE",
"STRICT",
"STRIP",
"SUBSTRING",
"SUPERUSER",
"SYMMETRIC",
"SYSID",
"SYSTEM",
"TABLE",
"TABLES",
"TABLESPACE",
"TEMP",
"TEMPLATE",
"TEMPORARY",
"TEXT",
"THEN",
"TIME",
"TIMESTAMP",
"TO",
"TRAILING",
"TRANSACTION",
"TREAT",
"TRIGGER",
"TRIM",
"TRUE",
"TRUNCATE",
"TRUSTED",
"TYPE",
"UNBOUNDED",
"UNCOMMITTED",
"UNENCRYPTED",
"UNION",
"UNIQUE",
"UNKNOWN",
"UNLISTEN",
"UNTIL",
"UPDATE",
"USER",
"USING",
"VACUUM",
"VALID",
"VALIDATOR",
"VALUE",
"VALUES",
"VARCHAR",
"VARIADIC",
"VARYING",
"VERBOSE",
"VERSION",
"VIEW",
"VOLATILE",
"WHEN",
"WHERE",
"WHITESPACE",
"WINDOW",
"WITH",
"WITHOUT",
"WORK",
"WRAPPER",
"WRITE",
"XML",
"XMLATTRIBUTES",
"XMLCONCAT",
"XMLELEMENT",
"XMLFOREST",
"XMLPARSE",
"XMLPI",
"XMLROOT",
"XMLSERIALIZE",
"YEAR",
"YES",
"ZONE"}; 
	return keyList->exists(str | str.oclAsType(String).toLower() = name);
}
