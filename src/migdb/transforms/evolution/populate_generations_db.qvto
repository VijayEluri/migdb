/*
 * The MIT License
 * 
 * Copyright (c) 2010-2011 MigDB team [https://rabbit.felk.cvut.cz/trac/migdb]
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */

modeltype DB uses 'mm-db';

transformation DB_To_Rdb(in inModel : DB, out outModel : DB);
main() {
	assert(inModel.rootObjects()->size() = 1);
	assert(inModel.rootObjects()->forAll(oclIsKindOf(DB::rdb::ModelRoot)));
	
	log("transformation started...");
	
	inModel.rootObjects().deepclone();

	var root : DB::rdb::ModelRoot = outModel.rootObjects()![DB::rdb::ModelRoot];
	var gen0 : DB::rdb::ModelGeneration = root.modelGenerations->first();
	
	root.operations->forEach(op) {
		log("	iterating over operation " + op.repr());
		if (op.isValid(gen0)) then {
			log("	operation is valid " + op.repr());
			op.xmap apply(gen0);
		} else {
			log("	operation is invalid " + op.repr());
		} endif;
	};
	
	root.operations = root.operations->reject(true);
}

// kontroluje validitu operace
abstract query DB::rdb::operations::ModelOperation::
	isValid(gen : DB::rdb::ModelGeneration) : Boolean;

// namapuje danou operaci
abstract mapping DB::rdb::operations::ModelOperation::
	apply(inout gen : DB::rdb::ModelGeneration);


/* ++++++++++ ADD OPERATIONS ++++++++++++++++++++ */

query DB::rdb::operations::AddTable::isValid(gen : DB::rdb::ModelGeneration) : Boolean {
	// schéma existuje v generaci
	return gen.isSchemaInGeneration(self.owningSchemaName)
	// tabulka neexistuje ve schématu
		   and not gen.findSchema(self.owningSchemaName).isTableInSchema(self.name);
}

// pøidá tabulku do schématu
mapping DB::rdb::operations::AddTable::apply(inout gen : DB::rdb::ModelGeneration) {
	var s : DB::rdb::Schema := gen.findSchema(self.owningSchemaName);
	s.tables += object DB::rdb::Table {
		name := self.name;
	};
}

/* ++++++++++ QUERIES FOR OPERATIONS ++++++++++++++++++++ */

// ovìøí, zda-li existuje schéma v generaci
query DB::rdb::ModelGeneration::isSchemaInGeneration(sName : String) : Boolean {
	return self.schemas->exists(name = sName);
}

// vrátí schéma z generace
query DB::rdb::ModelGeneration::findSchema(sName : String) : DB::rdb::Schema {
	return self.schemas->selectOne(name = sName);
}

// ovìøí, zda-li existuje tabulka ve schématu
query DB::rdb::Schema::isTableInSchema(tName : String) : Boolean {
	return self.tables->exists(name = tName);
}
